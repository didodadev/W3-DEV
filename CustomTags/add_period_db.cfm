<!--- 
kullanım : 
<cf_add_period_db username="workcube" password="12345" period_id="15" host="workcube" dsn="#dsn#" upload_folder="#upload_folder#">
 --->
<!--- CREATE_CONSTRAINT2 querysi icin kontrol edelim. Mutlaka olmali BK 20130109 --->


<cfsetting requesttimeout="2000">
<cfparam name="attributes.main_dsn" default = "" />

<cfquery name="get_period" datasource="#attributes.dsn#">
	SELECT
		PERIOD_YEAR,
		OUR_COMPANY_ID
	FROM
		SETUP_PERIOD
	WHERE
		PERIOD_ID = #attributes.period_id#
</cfquery>

<!--- Yeni kurulumlarda period_year olarak içinde bulunduğumuz yılı, company_id olarakta 1 alır --->
<cfif get_period.recordcount eq 0>
    <cfset get_period = structNew() />
    <cfset get_period.period_year = year(now()) />
    <cfset get_period.our_company_id = 1 />
</cfif>

<!--- <cfset period_year = get_period.period_year>
<cfset company_id = get_period.our_company_id> --->
<!--- 
COLLATE Turkish_CI_AS 
COLLATE SQL_Latin1_General_CP1_CI_AS
COLLATE Latin1_General_CI_AS (Almanca kurulumlarda)
collation (dil setine) dikkat 
<cfabort>
--->

<cfset new_dsn = ( len( attributes.main_dsn ) ) ? attributes.main_dsn : attributes.dsn />

<cf_add_dsn_mssql dsn="_#attributes.dsn#" db="#new_dsn#" host="#attributes.host#" username="#attributes.username#" password="#attributes.password#">
<cfquery name="addLogin" datasource="_#attributes.dsn#">
    CREATE LOGIN #attributes.dsn#_#get_period.period_year#_#get_period.our_company_id# WITH PASSWORD = '#attributes.password#' 
</cfquery>

<cfquery name="addSchema" datasource="#attributes.dsn#">
    CREATE SCHEMA #attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#
</cfquery>

<cfquery name="addUser" datasource="#attributes.dsn#">
    CREATE USER [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#] FOR LOGIN [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#] WITH DEFAULT_SCHEMA=[#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#]
    ALTER ROLE [db_owner] ADD MEMBER [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#]
</cfquery>

<cf_add_dsn_mssql dsn="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#" db="#new_dsn#" host="#attributes.host#" username="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#" password="#attributes.password#">

<cflock name="#CreateUUID()#" timeout="500">
	<cftransaction>
    <!---Period db tabloları create ediliyor.--->
	
		<cfquery name="CREATE_PERIOD_DB_TABLES" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#">			
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_CARD](
                    [CARD_ID] [int] IDENTITY(1,1) NOT NULL,
                    [ACTION_ID] [int] NULL,
                    [WRK_ID] [nvarchar](43) NULL,
                    [CARD_DETAIL] [nvarchar](150) NULL,
                    [ACTION_DATE] [datetime] NULL,
                    [CARD_TYPE] [int] NULL,
                    [CARD_CAT_ID] [int] NULL DEFAULT ((0)),
                    [ACTION_TYPE] [int] NULL,
                    [BILL_NO] [int] NULL,
                    [IS_ACCOUNT] [bit] NULL DEFAULT ((0)),
                    [CARD_TYPE_NO] [int] NULL,
                    [PAPER_NO] [nvarchar](50) NULL,
                    [IS_COMPOUND] [bit] NULL,
                    [IS_OTHER_CURRENCY] [bit] NULL,
                    [ACC_COMPANY_ID] [int] NULL,
                    [ACC_CONSUMER_ID] [int] NULL,
                    [ACC_EMPLOYEE_ID] [int] NULL,
                    [ACTION_TABLE] [nvarchar](50) NULL,
                    [IS_RATE_DIFF] [bit] NULL DEFAULT ((0)),
                    [IS_ACCOUNT_CODE2] [bit] NULL,
                    [ACTION_CAT_ID] [int] NULL,
                    [IS_CANCEL] [bit] NULL,
                    [RECORD_CONS] [int] NULL,
                    [RECORD_PAR] [int] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [CARD_DOCUMENT_TYPE] [int] NULL,
                    [CARD_PAYMENT_METHOD] [int] NULL,
                    [DUE_DATE] [datetime] NULL,
                    [ACTION_ROW_ID] [int] NULL,
                    [EX_ID] [int] NULL,
                    [RECORD_TYPE] [int] NULL,
                 CONSTRAINT [PK_ACCOUNT_CARD_CARD_ID] PRIMARY KEY CLUSTERED 
                (
                    [CARD_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_CARD_HISTORY](
                    [CARD_HISTORY_ID] [int] IDENTITY(1,1) NOT NULL,
                    [CARD_ID] [int] NOT NULL,
                    [ACTION_ID] [int] NULL,
                    [WRK_ID] [nvarchar](43) NULL,
                    [CARD_DETAIL] [nvarchar](150) NULL,
                    [ACTION_DATE] [datetime] NULL,
                    [CARD_TYPE] [int] NULL,
                    [ACTION_TYPE] [int] NULL,
                    [BILL_NO] [int] NULL,
                    [IS_ACCOUNT] [bit] NULL,
                    [CARD_TYPE_NO] [int] NULL,
                    [PAPER_NO] [nvarchar](50) NULL,
                    [IS_COMPOUND] [bit] NULL,
                    [IS_OTHER_CURRENCY] [bit] NULL,
                    [ACC_COMPANY_ID] [int] NULL,
                    [ACC_CONSUMER_ID] [int] NULL,
                    [ACC_EMPLOYEE_ID] [int] NULL,
                    [ACTION_TABLE] [nvarchar](50) NULL,
                    [IS_RATE_DIFF] [bit] NULL,
                    [IS_ACCOUNT_CODE2] [bit] NULL,
                    [ACTION_CAT_ID] [int] NULL,
                    [CARD_CAT_ID] [int] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_PAR] [int] NULL,
                    [RECORD_CONS] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP_OLD] [int] NULL,
                    [RECORD_PAR_OLD] [int] NULL,
                    [RECORD_CONS_OLD] [int] NULL,
                    [RECORD_IP_OLD] [nvarchar](40) NULL,
                    [RECORD_DATE_OLD] [datetime] NULL,
                    [CARD_DOCUMENT_TYPE] [int] NULL,
                    [CARD_PAYMENT_METHOD] [int] NULL,
                    [ACTION_ROW_ID] [int] NULL,
                    [DUE_DATE] [datetime] NULL,
                CONSTRAINT [PK_ACCOUNT_CARD_HISTORY_CARD_HISTORY_ID] PRIMARY KEY CLUSTERED 
                (
                    [CARD_HISTORY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BUDGET_TRANSFER_DEMAND_ROWS](
                    [DEMAND_ROWS_ID] [int] IDENTITY(1,1) NOT NULL,
                    [DEMAND_ID] [int] NULL,
                    [DEMAND_EXP_CENTER] [int] NULL,
                    [DEMAND_EXP_ITEM] [int] NULL,
                    [DEMAND_ACTIVITY_TYPE] [int] NULL,
                    [DEMAND_PROJECT_ID] [int] NULL,
                    [AMOUNT] [float] NULL,
                    [USABLE_MONEY] [float] NULL,
                    [MONEY_CURRENCY] [nvarchar](43) NULL,
                    [TRANSFER_EXP_CENTER] [int] NULL,
                    [TRANSFER_EXP_ITEM] [int] NULL,
                    [TRANSFER_ACTIVITY_TYPE] [int] NULL,
                    [TRANSFER_PROJECT_ID] [int] NULL,
                    [USABLE_TRANSFER_MONEY] [float] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [TRANSFER_STATUS] [bit] NULL,
                    [OFFER_ID] [int] NULL,
                    [INTERNAL_ID] [int] NULL,
                    [ORDER_ID] [int] NULL,
                    [EXPENSE_ID] [int] NULL,
                    [BLOCK_TYPE] [bit] NULL,
                CONSTRAINT [PK_BUDGET_TRANSFER_DEMAND_ROWS_DEMAND_ROWS_ID] PRIMARY KEY CLUSTERED 
                (
                    [DEMAND_ROWS_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]


                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_CARD_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL,
                    [ACTION_MONEY_ID] [int] IDENTITY(1,1) NOT NULL,
                CONSTRAINT [PK_ACCOUNT_CARD_MONEY] PRIMARY KEY CLUSTERED 
                (
                    [ACTION_MONEY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_CARD_ROWS](
                    [CARD_ID] [int] NOT NULL,
                    [CARD_ROW_ID] [int] IDENTITY(1,1) NOT NULL,
                    [ACCOUNT_ID] [nvarchar](100) NOT NULL,
                    [BA] [bit] NOT NULL,
                    [AMOUNT] [float] NOT NULL,
                    [AMOUNT_CURRENCY] [nvarchar](43) NULL DEFAULT (N'PARA BİRİMİ'),
                    [DETAIL] [nvarchar](500) NULL,
                    [AMOUNT_2] [float] NULL,
                    [ROW_ACTION_ID] [int] NULL,
                    [ROW_ACTION_TYPE_ID] [int] NULL,
                    [ROW_PAPER_NO] [nvarchar](50) NULL,
                    [AMOUNT_CURRENCY_2] [nvarchar](43) NULL,
                    [OTHER_AMOUNT] [float] NULL,
                    [OTHER_CURRENCY] [nvarchar](43) NULL,
                    [QUANTITY] [float] NULL,
                    [PRICE] [float] NULL,
                    [BILL_CONTROL_NO] [float] NULL,
                    [IFRS_CODE] [nvarchar](100) NULL,
                    [ACCOUNT_CODE2] [nvarchar](100) NULL,
                    [IS_RATE_DIFF_ROW] [bit] NULL DEFAULT ((0)),
                    [COST_PROFIT_CENTER] [int] NULL,
                    [ACC_DEPARTMENT_ID] [int] NULL,
                    [ACC_BRANCH_ID] [int] NULL,
                    [ACC_PROJECT_ID] [int] NULL,
                    [CARD_ROW_NO] [int] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                 CONSTRAINT [PK_ACCOUNT_CARD_ROWS_CARD_ROW_ID] PRIMARY KEY CLUSTERED 
                (
                    [CARD_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_CARD_ROWS_HISTORY](
                    [CARD_HISTORY_ID] [int] NOT NULL,
                    [CARD_ID] [int] NOT NULL,
                    [CARD_ROW_ID] [int] NOT NULL,
                    [ACCOUNT_ID] [nvarchar](100) NOT NULL,
                    [BA] [bit] NOT NULL,
                    [AMOUNT] [float] NOT NULL,
                    [AMOUNT_CURRENCY] [nvarchar](43) NULL,
                    [DETAIL] [nvarchar](500) NULL,
                    [AMOUNT_2] [float] NULL,
                    [AMOUNT_CURRENCY_2] [nvarchar](43) NULL,
                    [OTHER_AMOUNT] [float] NULL,
                    [OTHER_CURRENCY] [nvarchar](43) NULL,
                    [QUANTITY] [float] NULL,
                    [PRICE] [float] NULL,
                    [BILL_CONTROL_NO] [float] NULL,
                    [IFRS_CODE] [nvarchar](100) NULL,
                    [ACCOUNT_CODE2] [nvarchar](100) NULL,
                    [IS_RATE_DIFF_ROW] [bit] NULL,
                    [ACC_DEPARTMENT_ID] [int] NULL,
                    [ACC_BRANCH_ID] [int] NULL,
                    [ACC_PROJECT_ID] [int] NULL
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_CARD_ROWS_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] NULL,
                    [ACTION_ROW_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_CARD_SAVE](
                    [CARD_ID] [int] NOT NULL,
                    [NEW_CARD_ID] [int] NOT NULL,
                    [ACTION_ID] [int] NULL,
                    [CARD_DETAIL] [nvarchar](150) NULL,
                    [ACTION_DATE] [datetime] NULL,
                    [CARD_TYPE] [int] NULL,
                    [ACTION_TYPE] [int] NULL,
                    [BILL_NO] [int] NULL,
                    [IS_ACCOUNT] [bit] NULL,
                    [CARD_TYPE_NO] [int] NULL,
                    [PAPER_NO] [nvarchar](50) NULL,
                    [IS_COMPOUND] [bit] NULL,
                    [IS_OTHER_CURRENCY] [bit] NULL,
                    [RECORD_PAR_OLD] [int] NULL,
                    [IS_ACCOUNT_GROUP] [bit] NULL,
                    [PROCESS_DATE] [datetime] NULL,
                    [IS_RATE_DIFF] [bit] NULL,
                    [ACTION_TABLE] [nvarchar](50) NULL,
                    [NEW_BILL_NO] [int] NULL,
                    [NEW_CARD_TYPE_NO] [int] NULL,
                    [ACTION_CAT_ID] [int] NULL,
                    [CARD_CAT_ID] [int] NULL,
                    [IS_TEMPORARY_SOLVED] [int] NULL,
                    [NEW_CARD_DETAIL] [nvarchar](150) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [RECORD_EMP_OLD] [int] NULL,
                    [RECORD_IP_OLD] [nvarchar](40) NULL,
                    [RECORD_DATE_OLD] [datetime] NULL,
                    [CARD_DOCUMENT_TYPE] [int] NULL,
                    [CARD_PAYMENT_METHOD] [int] NULL
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_CARD_SAVE_ROWS](
                    [CARD_ID] [int] NOT NULL,
                    [ACCOUNT_ID] [nvarchar](100) NOT NULL,
                    [BA] [bit] NOT NULL,
                    [AMOUNT] [float] NOT NULL,
                    [AMOUNT_CURRENCY] [nvarchar](43) NULL,
                    [DETAIL] [nvarchar](500) NULL,
                    [AMOUNT_2] [float] NULL,
                    [AMOUNT_CURRENCY_2] [nvarchar](43) NULL,
                    [OTHER_CURRENCY] [nvarchar](43) NULL,
                    [OTHER_AMOUNT] [float] NULL,
                    [IFRS_CODE] [nvarchar](100) NULL,
                    [ACCOUNT_CODE2] [nvarchar](100) NULL,
                    [IS_RATE_DIFF_ROW] [bit] NULL,
                    [ACC_DEPARTMENT_ID] [int] NULL,
                    [ACC_BRANCH_ID] [int] NULL,
                    [ACC_PROJECT_ID] [int] NULL,
                    [QUANTITY] [float] NULL
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_CLOSED_DEFINITION](
                    [ACCOUNT_CLOSED_ID] [int] IDENTITY(1,1) NOT NULL,
                    [CLAIM_ACCOUNT_CODE] [nvarchar](100) NULL,
                    [DEBT_ACCOUNT_CODE] [nvarchar](100) NULL,
                    [CLOSED_ACCOUNT_CODE] [nvarchar](100) NULL,
                    [CLOSED_TYPE] [bit] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](100) NULL,
                    [RECORD_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](100) NULL,
                    [UPDATE_EMP] [int] NULL,
                    [INCOME] [bit] NULL,
                 CONSTRAINT [PK_ACCOUNT_CLOSED_DEFINITION] PRIMARY KEY CLUSTERED 
                (
                    [ACCOUNT_CLOSED_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_DEFINITIONS](
                    [DEF_ID] [int] IDENTITY(1,1) NOT NULL,
                    [DEF_TYPE_ID] [int] NULL,
                    [DEF_TYPE_NAME] [nvarchar](100) NULL,
                    [DEF_SELECTED_ROWS] [nvarchar](1000) NULL,
                    [DEF_FORM_TABLE] [nvarchar](50) NULL,
                    [INVERSE_REMAINDER] [bit] NULL,
                    [IS_DEPT_CLAIM_DETAIL] [bit] NULL,
                 CONSTRAINT [PK_ACCOUNT_DEFINITIONS_DEF_ID] PRIMARY KEY CLUSTERED 
                (
                    [DEF_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_PLAN](
                    [ACCOUNT_ID] [int] IDENTITY(1,1) NOT NULL,
                    [ACCOUNT_CODE] [nvarchar](100) NULL,
                    [ACCOUNT_NAME] [nvarchar](150) NULL,
                    [SUB_ACCOUNT] [bit] NULL DEFAULT ((0)),
                    [IFRS_CODE] [nvarchar](50) NULL,
                    [IFRS_NAME] [nvarchar](150) NULL,
                    [ACCOUNT_CODE2] [nvarchar](50) NULL,
                    [ACCOUNT_NAME2] [nvarchar](150) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [ACCOUNT_CODE_UPPER] [nvarchar](100) NULL,
                 CONSTRAINT [PK_ACCOUNT_PLAN_ACCOUNT_ID] PRIMARY KEY CLUSTERED 
                (
                    [ACCOUNT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BALANCE_SHEET_TABLE](
                    [BALANCE_ID] [int] IDENTITY(1,1) NOT NULL,
                    [CODE] [nvarchar](43) NULL,
                    [NAME] [nvarchar](150) NULL,
                    [ACCOUNT_CODE] [nvarchar](50) NULL,
                    [SIGN] [nvarchar](43) NULL,
                    [BA] [bit] NULL,
                    [VIEW_AMOUNT_TYPE] [int] NULL,
                    [IFRS_CODE] [nvarchar](50) NULL,
                    [NAME_LANG_NO] [int] NULL,
                 CONSTRAINT [PK_BALANCE_SHEET_TABLE_BALANCE_ID] PRIMARY KEY CLUSTERED 
                (
                    [BALANCE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ACTION_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL,
                    [ACTION_MONEY_ID] [int] IDENTITY(1,1) NOT NULL,
                CONSTRAINT [PK_BANK_ACTION_MONEY] PRIMARY KEY CLUSTERED 
                (
                    [ACTION_MONEY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]

                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ACTION_MULTI_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL,
                    [ACTION_MONEY_ID] [int] IDENTITY(1,1) NOT NULL,
                CONSTRAINT [PK_BANK_ACTION_MULTI_MONEY] PRIMARY KEY CLUSTERED 
                (
                    [ACTION_MONEY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ACTIONS](
                    [ACTION_ID] [int] IDENTITY(1,1) NOT NULL,
                    [ACTION_TYPE] [nvarchar](50) NOT NULL,
                    [ACTION_TYPE_ID] [int] NULL,
                    [PAPER_NO] [nvarchar](50) NULL,
                    [ACTION_DETAIL] [nvarchar](max) NULL,
                    [ACTION_FROM_COMPANY_ID] [int] NULL,
                    [ACTION_TO_COMPANY_ID] [int] NULL,
                    [ACTION_TO_EMPLOYEE_ID] [int] NULL,
                    [ACTION_FROM_EMPLOYEE_ID] [int] NULL,
                    [ACTION_FROM_ACCOUNT_ID] [int] NULL,
                    [ACTION_TO_ACCOUNT_ID] [int] NULL,
                    [ACTION_FROM_CASH_ID] [int] NULL,
                    [ACTION_TO_CASH_ID] [int] NULL,
                    [ACTION_FROM_CONSUMER_ID] [int] NULL,
                    [ACTION_VALUE] [float] NOT NULL,
                    [BANK_ACTION_KDVSIZ_VALUE] [float] NULL,
                    [BANK_ACTION_TAX_VALUE] [float] NULL,
                    [ACTION_CURRENCY_ID] [nvarchar](43) NULL,
                    [ACTION_DATE] [datetime] NULL,
                    [OTHER_CASH_ACT_VALUE] [float] NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [ACTION_EMPLOYEE_ID] [int] NULL,
                    [PAYROLL_ID] [int] NULL,
                    [VOUCHER_PAYROLL_ID] [int] NULL,
                    [CHEQUE_ID] [int] NULL,
                    [VOUCHER_ID] [int] NULL,
                    [IS_ACCOUNT] [bit] NULL DEFAULT ((0)),
                    [IS_ACCOUNT_TYPE] [int] NULL DEFAULT ((0)),
                    [PROCESS_CAT] [int] NULL,
                    [UPD_STATUS] [bit] NULL,
                    [BANK_ORDER_ID] [int] NULL,
                    [EXPENSE_ID] [int] NULL,
                    [MASRAF] [float] NULL DEFAULT ((0)),
                    [ACTION_TO_CONSUMER_ID] [int] NULL,
                    [WITH_NEXT_ROW] [bit] NULL,
                    [MULTI_ACTION_ID] [int] NULL,
                    [FILE_IMPORT_ID] [int] NULL,
                    [PROJECT_ID] [int] NULL,
                    [TO_BRANCH_ID] [int] NULL,
                    [FROM_BRANCH_ID] [int] NULL,
                    [EXPENSE_CENTER_ID] [int] NULL,
                    [EXPENSE_ITEM_ID] [int] NULL,
                    [SYSTEM_ACTION_VALUE] [float] NULL,
                    [SYSTEM_CURRENCY_ID] [nvarchar](43) NULL,
                    [ACTION_VALUE_2] [float] NULL,
                    [ACTION_CURRENCY_ID_2] [nvarchar](43) NULL,
                    [ASSETP_ID] [int] NULL,
                    [SPECIAL_DEFINITION_ID] [int] NULL,
                    [ACC_DEPARTMENT_ID] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [ACC_TYPE_ID] [int] NULL,
                    [AVANS_ID] [int] NULL,
                    [RELATED_ACTION_ID] [int] NULL,
                    [CREDITCARD_ID] [int] NULL,
                    [IS_TRANSFER] [bit] NULL,
                    [PROCESS_STAGE] [int] NULL,
                    [OTHER_COST] [float] NULL,
                    [SUBSCRIPTION_ID] [int] NULL,
                    [GENEL_VIRMAN_ID] [int] NULL,
                    [IBAN_NO] [nvarchar](50) NULL,
                    [BILL_ID] [int] NULL,
                 CONSTRAINT [PK_BANK_ACTIONS_ACTION_ID] PRIMARY KEY CLUSTERED 
                (
                    [ACTION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ACTIONS_MULTI](
                    [MULTI_ACTION_ID] [int] IDENTITY(1,1) NOT NULL,
                    [ACTION_TYPE_ID] [int] NULL,
                    [ACTION_DATE] [datetime] NULL,
                    [IS_ACCOUNT] [bit] NULL,
                    [IS_ACCOUNT_TYPE] [int] NULL,
                    [TO_ACCOUNT_ID] [int] NULL,
                    [FROM_ACCOUNT_ID] [int] NULL,
                    [PROCESS_CAT] [int] NULL,
                    [UPD_STATUS] [bit] NULL,
                    [ACC_DEPARTMENT_ID] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [PROCESS_STAGE] [int] NULL,
                 CONSTRAINT [PK_BANK_ACTIONS_MULTI_MULTI_ACTION_ID] PRIMARY KEY CLUSTERED 
                (
                    [MULTI_ACTION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ORDER_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL,
                    [ACTION_MONEY_ID] [int] IDENTITY(1,1) NOT NULL,
                CONSTRAINT [PK_BANK_ORDER_MONEY] PRIMARY KEY CLUSTERED 
                (
                    [ACTION_MONEY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ORDERS](
                    [BANK_ORDER_ID] [int] IDENTITY(1,1) NOT NULL,
                    [BANK_ORDER_TYPE] [int] NULL,
                    [BANK_ORDER_TYPE_ID] [int] NULL,
                    [ACTION_VALUE] [float] NULL,
                    [ACCOUNT_ID] [int] NULL,
                    [COMPANY_ID] [int] NULL,
                    [EMPLOYEE_ID] [int] NULL,
                    [CONSUMER_ID] [int] NULL,
                    [PARTNER_ID] [int] NULL,
                    [TO_ACCOUNT_ID] [int] NULL,
                    [ACTION_DATE] [datetime] NULL,
                    [ACTION_MONEY] [nvarchar](43) NULL,
                    [SERI_NO] [nvarchar](43) NULL,
                    [IS_PAID] [bit] NULL,
                    [PAYMENT_DATE] [datetime] NULL,
                    [FILE_IMPORT_ID] [int] NULL,
                    [ORDER_ID] [int] NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [OTHER_MONEY_VALUE] [float] NULL,
                    [PROJECT_ID] [int] NULL,
                    [ACTION_DETAIL] [nvarchar](250) NULL,
                    [RELATED_ACTION_ID] [int] NULL,
                    [RELATED_ACTION_TYPE_ID] [int] NULL,
                    [ASSETP_ID] [int] NULL,
                    [CLOSED_ID] [int] NULL,
                    [FILE_EXPORT_ID] [int] NULL,
                    [ACTION_BANK_ACCOUNT] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_PAR] [int] NULL,
                    [RECORD_CONS] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [CREDIT_LIMIT_ID] [int] NULL,
                    [ACC_TYPE_ID] [int] NULL,
                    [TO_BRANCH_ID] [int] NULL,
                    [FROM_BRANCH_ID] [int] NULL,
                    [SPECIAL_DEFINITION_ID] [int] NULL,
                    [SUBSCRIPTION_ID] [int] NULL,
                 CONSTRAINT [PK_BANK_ORDERS_BANK_ORDER_ID] PRIMARY KEY CLUSTERED 
                (
                    [BANK_ORDER_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BILLS](
                    [BILL_ID] [int] IDENTITY(1,1) NOT NULL,
                    [BILL_NO] [int] NULL,
                    [TEDIYE_BILL_NO] [int] NULL,
                    [TAHSIL_BILL_NO] [int] NULL,
                    [MAHSUP_BILL_NO] [int] NULL,
                 CONSTRAINT [PK_BILLS_BILL_ID] PRIMARY KEY CLUSTERED 
                (
                    [BILL_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ACTION_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL,
                    [ACTION_MONEY_ID] [int] IDENTITY(1,1) NOT NULL,
                CONSTRAINT [PK_CARI_ACTION_MONEY] PRIMARY KEY CLUSTERED 
                (
                    [ACTION_MONEY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ACTION_MULTI_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL,
                    [ACTION_MONEY_ID] [int] IDENTITY(1,1) NOT NULL,
                CONSTRAINT [PK_CARI_ACTION_MULTI_MONEY] PRIMARY KEY CLUSTERED 
                (
                    [ACTION_MONEY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ACTIONS](
                    [ACTION_ID] [int] IDENTITY(1,1) NOT NULL,
                    [ACTION_NAME] [nvarchar](50) NULL,
                    [ACTION_TYPE_ID] [int] NULL,
                    [ACTION_VALUE] [float] NULL,
                    [ACTION_CURRENCY_ID] [nvarchar](43) NULL,
                    [OTHER_MONEY] [nvarchar](50) NULL,
                    [OTHER_CASH_ACT_VALUE] [float] NULL,
                    [TO_CMP_ID] [int] NULL,
                    [FROM_CMP_ID] [int] NULL,
                    [TO_CONSUMER_ID] [int] NULL,
                    [FROM_CONSUMER_ID] [int] NULL,
                    [FROM_EMPLOYEE_ID] [int] NULL,
                    [TO_EMPLOYEE_ID] [int] NULL,
                    [ACTION_DATE] [datetime] NULL,
                    [ACTION_DETAIL] [nvarchar](500) NULL,
                    [ACTION_ACCOUNT_CODE] [nvarchar](50) NULL,
                    [PAPER_NO] [nvarchar](50) NULL,
                    [PROJECT_ID_2] [int] NULL,
                    [PROCESS_CAT] [int] NOT NULL,
                    [DUE_DATE] [datetime] NULL,
                    [PROJECT_ID] [int] NULL,
                    [UPD_STATUS] [bit] NULL,
                    [INVOICE_ID] [int] NULL,
                    [COMPANY_BLOCK_ID] [int] NULL,
                    [EXPENSE_CENTER_ID] [int] NULL,
                    [EXPENSE_ITEM_ID] [int] NULL,
                    [INCOME_CENTER_ID] [int] NULL,
                    [INCOME_ITEM_ID] [int] NULL,
                    [MULTI_ACTION_ID] [int] NULL,
                    [DUE_DIFF_ID] [int] NULL,
                    [ASSETP_ID] [int] NULL,
                    [ASSETP_ID_2] [int] NULL,
                    [ACC_DEPARTMENT_ID] [int] NULL,
                    [RECORD_CONS] [int] NULL,
                    [RELATION_ACTION_TYPE_ID] [int] NULL,
                    [RELATION_ACTION_ID] [int] NULL,
                    [ACC_BRANCH_ID] [int] NULL,
                    [CONTRACT_ID] [int] NULL,
                    [PROGRESS_ID] [int] NULL,
                    [FROM_PROGRESS] [bit] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [RECORD_PAR] [int] NULL,
                    [ACC_TYPE_ID] [int] NULL,
                    [FROM_ACC_TYPE_ID] [int] NULL,
                    [TO_BRANCH_ID] [int] NULL,
                    [FROM_BRANCH_ID] [int] NULL,
                    [EXTENDED_PROPERTY2] [nvarchar](100) NULL,
                    [EXTENDED_PROPERTY6] [nvarchar](100) NULL,
                    [EXTENDED_PROPERTY9] [datetime] NULL,
                    [EXTENDED_PROPERTY11] [nvarchar](100) NULL,
                    [EXTENDED_PROPERTY14] [nvarchar](100) NULL,
                    [EXTENDED_PROPERTY17] [nvarchar](100) NULL,
                    [ACTIVITY_ID] [int] NULL,
                    [SUBSCRIPTION_ID] [int] NULL,
                    [TO_SUBSCRIPTION_ID] [int] NULL,
                    [FROM_DUE_DATE] [datetime] NULL,
                 CONSTRAINT [PK_CARI_ACTIONS_ACTION_ID] PRIMARY KEY CLUSTERED 
                (
                    [ACTION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ACTIONS_MULTI](
                    [MULTI_ACTION_ID] [int] IDENTITY(1,1) NOT NULL,
                    [ACTION_TYPE_ID] [int] NULL,
                    [ACTION_DATE] [datetime] NULL,
                    [IS_ACCOUNT] [bit] NULL,
                    [IS_ACCOUNT_TYPE] [int] NULL,
                    [PROCESS_CAT] [int] NULL,
                    [UPD_STATUS] [bit] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                 CONSTRAINT [PK_CARI_ACTIONS_MULTI_MULTI_ACTION_ID] PRIMARY KEY CLUSTERED 
                (
                    [MULTI_ACTION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ERECEIPT_RELATION](
                    [RELATION_ID] [int] IDENTITY(1,1) NOT NULL,
                    [ACTION_ID] [int] NULL,
                    [ACTION_TYPE] [nvarchar](50) NULL,
                    [ERECEIPT_ID] [nvarchar](50) NULL,
                    [UUID] [nvarchar](50) NULL,
                    [PATH] [nvarchar](250) NULL,
                    [PROFILE_ID] [nvarchar](50) NULL,
                    [INTEGRATION_ID] [nvarchar](50) NULL,
                    [IS_PAPER_UPDATE] [bit] NULL,
                    [STATUS_CODE] [int] NULL,
                    [STATUS_DESCRIPTION] [nvarchar](250) NULL,
                    [STATUS_DATE] [datetime] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECEIPT_UUID] [nvarchar](250) NULL,
                    [RECEIPT_ID] [nvarchar](250) NULL,
                CONSTRAINT [PK_ERECEIPT_RELATION] PRIMARY KEY CLUSTERED 
                (
                    [RELATION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                

                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ERECEIPT_SENDING_DETAIL](
                    [SENDING_DETAIL_ID] [int] IDENTITY(1,1) NOT NULL,
                    [SERVICE_RESULT] [nvarchar](50) NULL,
                    [UUID] [nvarchar](50) NULL,
                    [ERECEIPT_ID] [nvarchar](50) NULL,
                    [STATUS_DESCRIPTION] [nvarchar](50) NULL,
                    [STATUS_CODE] [nvarchar](50) NULL,
                    [ERROR_CODE] [nvarchar](50) NULL,
                    [ACTION_ID] [int] NULL,
                    [ACTION_TYPE] [nvarchar](50) NULL,
                    [SERVICE_RESULT_DESCRIPTION] [nvarchar](250) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                CONSTRAINT [PK_ERECEIPT_SENDING_DETAIL] PRIMARY KEY CLUSTERED 
                (
                    [SENDING_DETAIL_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]

                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_CLOSED](
                    [CLOSED_ID] [int] IDENTITY(1,1) NOT NULL,
                    [ACTION_ID] [int] NULL,
                    [COMPANY_ID] [int] NULL,
                    [CONSUMER_ID] [int] NULL,
                    [DEBT_AMOUNT_VALUE] [float] NULL,
                    [CLAIM_AMOUNT_VALUE] [float] NULL,
                    [DIFFERENCE_AMOUNT_VALUE] [float] NULL,
                    [PAYMENT_DEBT_AMOUNT_VALUE] [float] NULL,
                    [PAYMENT_CLAIM_AMOUNT_VALUE] [float] NULL,
                    [PAYMENT_DIFF_AMOUNT_VALUE] [float] NULL,
                    [P_ORDER_DEBT_AMOUNT_VALUE] [float] NULL,
                    [P_ORDER_CLAIM_AMOUNT_VALUE] [float] NULL,
                    [P_ORDER_DIFF_AMOUNT_VALUE] [float] NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [IS_DEMAND] [bit] NULL,
                    [IS_ORDER] [bit] NULL,
                    [IS_CLOSED] [bit] NULL,
                    [IS_BAKIM] [bit] NULL,
                    [PROCESS_STAGE] [int] NULL,
                    [ACTION_DETAIL] [nvarchar](500) NULL,
                    [PAPER_ACTION_DATE] [datetime] NULL,
                    [PAPER_DUE_DATE] [datetime] NULL,
                    [PAYMETHOD_ID] [int] NULL,
                    [PROJECT_ID] [int] NULL,
                    [ORDER_ID] [int] NULL,
                    [IS_BANK_ORDER] [bit] NULL DEFAULT ((0)),
                    [EMPLOYEE_ID] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [int] NULL,
                    [ACC_TYPE_ID] [int] NULL,
                    [PROCESS_CAT] [int] NULL,
                    [CONTRACT_ID] [int] NULL,
                    [ADDITIONAL_DETAIL] [nvarchar](1000) NULL,
                 CONSTRAINT [PK_CARI_CLOSED_CLOSED_ID] PRIMARY KEY CLUSTERED 
                (
                    [CLOSED_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_CLOSED_HISTORY](
                    [CLOSED_HIST_ID] [int] IDENTITY(1,1) NOT NULL,
                    [WRK_ID] [nvarchar](50) NULL,
                    [HISTORY_ACT_TYPE] [int] NULL,
                    [CLOSED_ID] [int] NULL,
                    [ACTION_ID] [int] NULL,
                    [COMPANY_ID] [int] NULL,
                    [CONSUMER_ID] [int] NULL,
                    [DEBT_AMOUNT_VALUE] [float] NULL,
                    [CLAIM_AMOUNT_VALUE] [float] NULL,
                    [DIFFERENCE_AMOUNT_VALUE] [float] NULL,
                    [PAYMENT_DEBT_AMOUNT_VALUE] [float] NULL,
                    [PAYMENT_CLAIM_AMOUNT_VALUE] [float] NULL,
                    [PAYMENT_DIFF_AMOUNT_VALUE] [float] NULL,
                    [P_ORDER_DEBT_AMOUNT_VALUE] [float] NULL,
                    [P_ORDER_CLAIM_AMOUNT_VALUE] [float] NULL,
                    [P_ORDER_DIFF_AMOUNT_VALUE] [float] NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [IS_DEMAND] [bit] NULL,
                    [IS_ORDER] [bit] NULL,
                    [IS_CLOSED] [bit] NULL,
                    [IS_BAKIM] [bit] NULL,
                    [PROCESS_STAGE] [int] NULL,
                    [ACTION_DETAIL] [nvarchar](500) NULL,
                    [PAPER_ACTION_DATE] [datetime] NULL,
                    [PAPER_DUE_DATE] [datetime] NULL,
                    [PAYMETHOD_ID] [int] NULL,
                    [PROJECT_ID] [int] NULL,
                    [ORDER_ID] [int] NULL,
                    [IS_BANK_ORDER] [bit] NULL DEFAULT ((0)),
                    [EMPLOYEE_ID] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [int] NULL,
                    [ACC_TYPE_ID] [int] NULL,
                    [CONTRACT_ID] INT NULL,
                    [PROCESS_CAT] INT NULL,
                 CONSTRAINT [PK_CARI_CLOSED_HISTORY_CLOSED_HIST_ID] PRIMARY KEY CLUSTERED 
                (
                    [CLOSED_HIST_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_CLOSED_ROW](
                    [CLOSED_ROW_ID] [int] IDENTITY(1,1) NOT NULL,
                    [CLOSED_ID] [int] NULL,
                    [CARI_ACTION_ID] [int] NULL,
                    [ACTION_ID] [int] NULL,
                    [ACTION_TYPE_ID] [int] NULL,
                    [ACTION_VALUE] [float] NULL,
                    [CLOSED_AMOUNT] [float] NULL,
                    [OTHER_CLOSED_AMOUNT] [float] NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [DUE_DATE] [datetime] NULL,
                    [PAYMENT_VALUE] [float] NULL,
                    [OTHER_PAYMENT_VALUE] [float] NULL,
                    [P_ORDER_VALUE] [float] NULL,
                    [OTHER_P_ORDER_VALUE] [float] NULL,
                    [RELATED_CLOSED_ROW_ID] [int] NULL,
                    [RELATED_CARI_ACTION_ID] [int] NULL,
                 CONSTRAINT [PK_CARI_CLOSED_ROW_CLOSED_ROW_ID] PRIMARY KEY CLUSTERED 
                (
                    [CLOSED_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_CLOSED_ROW_HISTORY](
                    [WRK_ID] [nvarchar](50) NULL,
                    [HISTORY_ACT_TYPE] [int] NULL,
                    [CLOSED_ROW_HIST_ID] [int] IDENTITY(1,1) NOT NULL,
                    [CLOSED_ROW_ID] [int] NULL,
                    [CLOSED_ID] [int] NULL,
                    [CARI_ACTION_ID] [int] NULL,
                    [ACTION_ID] [int] NULL,
                    [ACTION_TYPE_ID] [int] NULL,
                    [ACTION_VALUE] [float] NULL,
                    [CLOSED_AMOUNT] [float] NULL,
                    [OTHER_CLOSED_AMOUNT] [float] NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [DUE_DATE] [datetime] NULL,
                    [PAYMENT_VALUE] [float] NULL,
                    [OTHER_PAYMENT_VALUE] [float] NULL,
                    [P_ORDER_VALUE] [float] NULL,
                    [OTHER_P_ORDER_VALUE] [float] NULL,
                    [RELATED_CLOSED_ROW_ID] [int] NULL,
                    [RELATED_CARI_ACTION_ID] [int] NULL,
                 CONSTRAINT [PK_CARI_CLOSED_ROW_HISTORY_CLOSED_ROW_HIST_ID] PRIMARY KEY CLUSTERED 
                (
                    [CLOSED_ROW_HIST_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_DUE_DIFF_ACTIONS](
                    [DUE_DIFF_ID] [int] IDENTITY(1,1) NOT NULL,
                    [ACTION_TYPE] [int] NULL,
                    [PROCESS_TYPE] [int] NULL,
                    [PROCESS_CAT] [int] NULL,
                    [ACTION_DATE] [datetime] NULL,
                    [IS_KDV] [bit] NULL,
                    [PRODUCT_ID] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                 CONSTRAINT [PK_CARI_DUE_DIFF_ACTIONS_DUE_DIFF_ID] PRIMARY KEY CLUSTERED 
                (
                    [DUE_DIFF_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_DUE_DIFF_ACTIONS_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_DUE_DIFF_ACTIONS_ROW](
                    [DUE_DIFF_ROW_ID] [int] IDENTITY(1,1) NOT NULL,
                    [DUE_DIFF_ID] [int] NOT NULL,
                    [COMPANY_ID] [int] NULL,
                    [CONSUMER_ID] [int] NULL,
                    [INVOICE_ID] [int] NULL,
                    [CARI_ROW_ID] [int] NULL,
                    [ACTION_VALUE] [float] NULL,
                    [DUE_DIFF_VALUE] [float] NULL,
                    [PERIOD_ID] [int] NULL,
                    [SUBSCRIPTION_PAYMENT_ROW_ID] [int] NULL,
                 CONSTRAINT [PK_CARI_DUE_DIFF_ACTIONS_ROW_DUE_DIFF_ROW_ID] PRIMARY KEY CLUSTERED 
                (
                    [DUE_DIFF_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_REVENUE_MULTILEVEL](
                    [CARI_MULTILEVEL_ID] [int] IDENTITY(1,1) NOT NULL,
                    [CARI_ACTION_ID] [int] NULL,
                    [ACTION_ID] [int] NULL,
                    [ACTION_TYPE_ID] [int] NULL,
                    [REF_CONSUMER_ID] [int] NULL,
                    [CONSUMER_ID] [int] NULL,
                    [NETTOTAL] [float] NULL,
                    [SALE_STAGE] [int] NULL,
                    [ACTION_DATE] [datetime] NULL,
                 CONSTRAINT [PK_CARI_REVENUE_MULTILEVEL_CARI_MULTILEVEL_ID] PRIMARY KEY CLUSTERED 
                (
                    [CARI_MULTILEVEL_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ROWS](
                    [CARI_ACTION_ID] [int] IDENTITY(1,1) NOT NULL,
                    [ACTION_ID] [int] NOT NULL,
                    [ACTION_TABLE] [nvarchar](50) NOT NULL,
                    [PAPER_NO] [nvarchar](50) NULL,
                    [ACTION_TYPE_ID] [int] NOT NULL,
                    [ACTION_NAME] [nvarchar](100) NULL,
                    [EXPENSE_ITEM_ID] [int] NULL,
                    [EXPENSE_CENTER_ID] [int] NULL,
                    [TO_CMP_ID] [int] NULL,
                    [FROM_CMP_ID] [int] NULL,
                    [TO_ACCOUNT_ID] [int] NULL,
                    [FROM_ACCOUNT_ID] [int] NULL,
                    [FROM_CASH_ID] [int] NULL,
                    [TO_CASH_ID] [int] NULL,
                    [FROM_EMPLOYEE_ID] [int] NULL,
                    [TO_EMPLOYEE_ID] [int] NULL,
                    [FROM_CONSUMER_ID] [int] NULL,
                    [TO_CONSUMER_ID] [int] NULL,
                    [ACTION_VALUE] [float] NULL,
                    [ACTION_DATE] [datetime] NULL,
                    [DUE_DATE] [datetime] NULL,
                    [ACTION_CURRENCY_ID] [nvarchar](43) NULL,
                    [REVENUE_COLLECTOR_ID] [int] NULL,
                    [PAYER_ID] [int] NULL,
                    [IS_ACCOUNT] [bit] NULL DEFAULT ((0)),
                    [IS_ACCOUNT_TYPE] [int] NULL DEFAULT ((0)),
                    [OTHER_CASH_ACT_VALUE] [float] NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [PROCESS_CAT] [int] NOT NULL,
                    [IS_PROCESSED] [bit] NULL,
                    [ACTION_VALUE_2] [float] NULL,
                    [ACTION_CURRENCY_2] [nvarchar](43) NULL,
                    [ACTION_DETAIL] [nvarchar](250) NULL,
                    [FROM_BRANCH_ID] [int] NULL,
                    [TO_BRANCH_ID] [int] NULL,
                    [PROJECT_ID] [int] NULL,
                    [IS_CASH_PAYMENT] [bit] NULL,
                    [ASSETP_ID] [int] NULL,
                    [SPECIAL_DEFINITION_ID] [int] NULL,
                    [PAYROLL_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [PAYMENT_VALUE] [float] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_CONS] [int] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_PAR] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_CONS] [int] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_PAR] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [ACC_TYPE_ID] [int] NULL,
                    [PAPER_ACT_DATE] [datetime] NULL,
                    [IS_CANCEL] [bit] NULL,
                    [SUBSCRIPTION_ID] [int] NULL,
                 CONSTRAINT [PK_CARI_ROWS_CARI_ACTION_ID] PRIMARY KEY CLUSTERED 
                (
                    [CARI_ACTION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH](
                    [CASH_ID] [int] IDENTITY(1,1) NOT NULL,
                    [CASH_NAME] [nvarchar](50) NULL,
                    [CASH_ACC_CODE] [nvarchar](50) NULL,
                    [CASH_CODE] [nvarchar](50) NULL,
                    [BRANCH_ID] [int] NULL,
                    [ISOPEN] [bit] NULL,
                    [CASH_CURRENCY_ID] [nvarchar](43) NULL,
                    [A_CHEQUE_ACC_CODE] [nvarchar](50) NULL,
                    [A_VOUCHER_ACC_CODE] [nvarchar](50) NULL,
                    [V_VOUCHER_ACC_CODE] [nvarchar](50) NULL,
                    [DUE_DIFF_ACC_CODE] [nvarchar](50) NULL,
                    [DEPARTMENT_ID] [int] NULL,
                    [CASH_EMP_ID] [int] NULL,
                    [EMP_ID] [int] NULL,
                    [CASH_STATUS] [bit] NULL,
                    [TRANSFER_CHEQUE_ACC_CODE] [nvarchar](50) NULL,
                    [TRANSFER_VOUCHER_ACC_CODE] [nvarchar](50) NULL,
                    [IS_ALL_BRANCH] [bit] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [PROTESTOLU_SENETLER_CODE] [nvarchar](50) NULL,
                    [KARSILIKSIZ_CEKLER_CODE] [nvarchar](50) NULL,
                 CONSTRAINT [PK_CASH_CASH_ID] PRIMARY KEY CLUSTERED 
                (
                    [CASH_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_ACTION_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL,
                    [ACTION_MONEY_ID] [int] IDENTITY(1,1) NOT NULL,
                CONSTRAINT [PK_CASH_ACTION_MONEY] PRIMARY KEY CLUSTERED 
                (
                    [ACTION_MONEY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_ACTION_MULTI_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL,
                    [ACTION_MONEY_ID] [int] IDENTITY(1,1) NOT NULL
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_ACTION_PARTNER](
                    [CASH_ACTION_PARTNER_ID] [int] IDENTITY(1,1) NOT NULL,
                    [ACTION_VALUE] [float] NULL,
                    [ACTION_CURRENCY] [nvarchar](43) NULL,
                    [INVOICE_ID] [int] NULL,
                 CONSTRAINT [PK_CASH_ACTION_PARTNER_CASH_ACTION_PARTNER_ID] PRIMARY KEY CLUSTERED 
                (
                    [CASH_ACTION_PARTNER_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_ACTIONS](
                [WRK_ID] [nvarchar](43) NULL,
                [ACTION_ID] [int] IDENTITY(1,1) NOT NULL,
                [ACTION_TYPE] [nvarchar](50) NULL,
                [ACTION_TYPE_ID] [int] NULL,
                [PAPER_NO] [nvarchar](50) NULL,
                [ACTION_DETAIL] [nvarchar](max) NULL,
                [CASH_ACTION_FROM_CASH_ID] [int] NULL,
                [CASH_ACTION_TO_CASH_ID] [int] NULL,
                [CASH_ACTION_FROM_COMPANY_ID] [int] NULL,
                [CASH_ACTION_TO_COMPANY_ID] [int] NULL,
                [CASH_ACTION_FROM_CONSUMER_ID] [int] NULL,
                [CASH_ACTION_TO_CONSUMER_ID] [int] NULL,
                [CASH_ACTION_FROM_ACCOUNT_ID] [int] NULL,
                [CASH_ACTION_TO_ACCOUNT_ID] [int] NULL,
                [CASH_ACTION_TO_EMPLOYEE_ID] [int] NULL,
                [CASH_ACTION_FROM_EMPLOYEE_ID] [int] NULL,
                [CASH_ACTION_VALUE] [float] NULL,
                [CASH_ACTION_CURRENCY_ID] [nvarchar](43) NULL,
                [OTHER_MONEY] [nvarchar](43) NULL,
                [OTHER_MONEY_RATE] [float] NULL,
                [OTHER_CASH_ACT_VALUE] [float] NULL,
                [BILL_ID] [int] NULL,
                [ACTION_DATE] [datetime] NULL,
                [REVENUE_COLLECTOR_ID] [int] NULL,
                [PAYER_ID] [int] NULL,
                [PAYROLL_ID] [int] NULL,
                [BANK_ACTION_ID] [int] NULL,
                [IS_PROCESSED] [bit] NULL,
                [IS_ACCOUNT] [bit] NULL DEFAULT ((0)),
                [IS_ACCOUNT_TYPE] [int] NULL DEFAULT ((0)),
                [WITH_NEXT_ROW] [bit] NULL,
                [TAX] [float] NULL,
                [CASH_ACTION_TAX_VALUE] [float] NULL,
                [CASH_ACTION_KDVSIZ_VALUE] [float] NULL,
                [PROCESS_CAT] [int] NULL,
                [STOPAJ] [float] NULL,
                [SSDF] [float] NULL,
                [STOPAJ_ACC_CODE] [nvarchar](50) NULL,
                [SSDF_ACC_CODE] [nvarchar](50) NULL,
                [UPD_STATUS] [bit] NULL,
                [PAYMETHOD_ID] [int] NULL,
                [EXPENSE_ID] [int] NULL,
                [PROJECT_ID] [int] NULL,
                [ORDER_ID] [int] NULL,
                [MULTI_ACTION_ID] [int] NULL,
                [VOUCHER_ID] [int] NULL,
                [ACTION_VALUE] [float] NULL,
                [ACTION_CURRENCY_ID] [nvarchar](43) NULL,
                [ACTION_VALUE_2] [float] NULL,
                [ACTION_CURRENCY_ID_2] [nvarchar](43) NULL,
                [ASSETP_ID] [int] NULL,
                [SPECIAL_DEFINITION_ID] [int] NULL,
                [EXPENSE_ITEM_ID] [int] NULL,
                [EXPENSE_CENTER_ID] [int] NULL,
                [RECORD_EMP] [int] NULL,
                [RECORD_DATE] [datetime] NULL,
                [RECORD_IP] [nvarchar](50) NULL,
                [UPDATE_EMP] [int] NULL,
                [UPDATE_DATE] [datetime] NULL,
                [UPDATE_IP] [nvarchar](50) NULL,
                [ACC_TYPE_ID] [int] NULL,
                [AVANS_ID] [int] NULL,
                [SUBSCRIPTION_ID] [int] NULL,
                [GENEL_VIRMAN_ID] [int] NULL,
                 CONSTRAINT [PK_CASH_ACTIONS_ACTION_ID] PRIMARY KEY CLUSTERED 
                (
                    [ACTION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_ACTIONS_MULTI](
                    [MULTI_ACTION_ID] [int] IDENTITY(1,1) NOT NULL,
                    [ACTION_TYPE_ID] [int] NULL,
                    [ACTION_DATE] [datetime] NULL,
                    [IS_ACCOUNT] [bit] NULL,
                    [IS_ACCOUNT_TYPE] [int] NULL,
                    [TO_CASH_ID] [int] NULL,
                    [FROM_CASH_ID] [int] NULL,
                    [PROCESS_CAT] [int] NULL,
                    [UPD_STATUS] [bit] NULL,
                    [ACC_DEPARTMENT_ID] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [int] NULL,
                 CONSTRAINT [PK_CASH_ACTIONS_MULTI_MULTI_ACTION_ID] PRIMARY KEY CLUSTERED 
                (
                    [MULTI_ACTION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_FLOW_TABLE](
                    [CASH_FLOW_ID] [int] NULL,
                    [CODE] [nvarchar](43) NULL,
                    [NAME] [nvarchar](150) NULL,
                    [ACCOUNT_CODE] [nvarchar](50) NULL,
                    [SIGN] [nvarchar](43) NULL,
                    [BA] [bit] NULL,
                    [VIEW_AMOUNT_TYPE] [int] NULL,
                    [IFRS_CODE] [nvarchar](50) NULL,
                    [NAME_LANG_NO] [int] NULL
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_PAYMENT_TYPE_ROW](
                    [CASH_PAYMENT_TYPE_ID] [int] IDENTITY(1,1) NOT NULL,
                    [CASH_ID] [int] NULL,
                    [POS_REFERANS_ID] [int] NULL,
                    [POS_PAYMENT_NAME] [nvarchar](100) NULL,
                    [POS_ACCOUNT_CODE] [nvarchar](50) NULL,
                 CONSTRAINT [PK_CASH_PAYMENT_TYPE_ROW_CASH_PAYMENT_TYPE_ID] PRIMARY KEY CLUSTERED 
                (
                    [CASH_PAYMENT_TYPE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE](
                    [CHEQUE_ID] [int] IDENTITY(1,1) NOT NULL,
                    [CHEQUE_PAYROLL_ID] [int] NULL,
                    [CHEQUE_CODE] [nvarchar](50) NULL,
                    [CHEQUE_DUEDATE] [datetime] NULL,
                    [CHEQUE_NO] [nvarchar](50) NULL,
                    [CHEQUE_VALUE] [float] NULL,
                    [CURRENCY_ID] [nvarchar](43) NULL,
                    [DEBTOR_NAME] [nvarchar](150) NULL,
                    [CHEQUE_STATUS_ID] [int] NULL,
                    [BANK_NAME] [nvarchar](50) NULL,
                    [BANK_BRANCH_NAME] [nvarchar](50) NULL,
                    [ACCOUNT_NO] [nvarchar](50) NULL,
                    [CHEQUE_CITY] [nvarchar](50) NULL,
                    [TAX_NO] [nvarchar](50) NULL,
                    [TAX_PLACE] [nvarchar](50) NULL,
                    [CHEQUE_PURSE_NO] [nvarchar](50) NULL,
                    [ACCOUNT_ID] [int] NULL,
                    [COMPANY_ID] [int] NULL,
                    [RESULT_ID] [int] NULL,
                    [SELF_CHEQUE] [bit] NULL,
                    [OTHER_MONEY_VALUE] [float] NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [OTHER_MONEY_VALUE2] [float] NULL,
                    [OTHER_MONEY2] [nvarchar](43) NULL,
                    [CONSUMER_ID] [int] NULL,
                    [EMPLOYEE_ID] [int] NULL,
                    [CASH_ID] [int] NULL,
                    [ENDORSEMENT_MEMBER] [nvarchar](150) NULL,
                    [OWNER_COMPANY_ID] [int] NULL,
                    [OWNER_CONSUMER_ID] [int] NULL,
                    [OWNER_EMPLOYEE_ID] [int] NULL,
                    [CH_OTHER_MONEY_VALUE] [float] NULL,
                    [CH_OTHER_MONEY] [nvarchar](43) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [int] NULL,
                    [OLD_STATUS] [int] NULL,
                    [IS_VALUATION] [bit] NULL,
                    [ENTRY_DATE] [datetime] NULL,
                 CONSTRAINT [PK_CHEQUE_CHEQUE_ID] PRIMARY KEY CLUSTERED 
                (
                    [CHEQUE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE_HISTORY](
                    [HISTORY_ID] [int] IDENTITY(1,1) NOT NULL,
                    [CHEQUE_ID] [int] NULL,
                    [PAYROLL_ID] [int] NULL,
                    [STATUS] [int] NULL,
                    [ACT_DATE] [datetime] NULL,
                    [COMPANY_ID] [int] NULL,
                    [SELF_CHEQUE] [bit] NULL,
                    [UPD_STATUS] [bit] NULL,
                    [CURRENCY_ID] [nvarchar](43) NULL,
                    [CURRENCY_ID_VALUE] [float] NULL,
                    [OTHER_MONEY_VALUE] [float] NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [OTHER_MONEY_VALUE2] [float] NULL,
                    [OTHER_MONEY2] [nvarchar](43) NULL,
                    [CONSUMER_ID] [int] NULL,
                    [SYSTEM_VALUE_DIFF] [float] NULL,
                    [SYSTEM_MONEY_DIFF] [nvarchar](43) NULL,
                    [SYSTEM_VALUE_DIFF2] [float] NULL,
                    [SYSTEM_MONEY_DIFF2] [nvarchar](43) NULL,
                    [OTHER_MONEY_VALUE_DIFF] [float] NULL,
                    [OTHER_MONEY_DIFF] [nvarchar](43) NULL,
                    [DETAIL] [nvarchar](200) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [int] NULL,
                    [EMPLOYEE_ID] [int] NULL,
                    [OLD_STATUS] [int] NULL,
                 CONSTRAINT [PK_CHEQUE_HISTORY_HISTORY_ID] PRIMARY KEY CLUSTERED 
                (
                    [HISTORY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE_HISTORY_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[COST_TABLE](
                    [COST_ID] [int] IDENTITY(1,1) NOT NULL,
                    [CODE] [nvarchar](43) NULL,
                    [NAME] [nvarchar](150) NULL,
                    [ACCOUNT_CODE] [nvarchar](50) NULL,
                    [SIGN] [nvarchar](43) NULL,
                    [BA] [bit] NULL,
                    [VIEW_AMOUNT_TYPE] [int] NULL,
                    [ZERO] [bit] NULL,
                    [ADD_] [bit] NULL,
                    [IFRS_CODE] [nvarchar](50) NULL,
                    [NAME_LANG_NO] [int] NULL,
                 CONSTRAINT [PK_COST_TABLE_COST_ID] PRIMARY KEY CLUSTERED 
                (
                    [COST_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CREDIT_CONTRACT_PAYMENT_INCOME](
                    [CREDIT_CONTRACT_PAYMENT_ID] [int] IDENTITY(1,1) NOT NULL,
                    [CREDIT_CONTRACT_ROW_ID] [int] NULL,
                    [DOCUMENT_NO] [nvarchar](43) NULL,
                    [PROCESS_CAT] [int] NOT NULL,
                    [PROCESS_TYPE] [int] NULL,
                    [COMPANY_ID] [int] NULL,
                    [PARTNER_ID] [int] NULL,
                    [BANK_ACCOUNT_ID] [int] NULL,
                    [EXPENSE_CENTER_ID] [int] NULL,
                    [PROCESS_DATE] [datetime] NULL,
                    [CAPITAL_PRICE] [float] NULL,
                    [INTEREST_PRICE] [float] NULL,
                    [TAX_PRICE] [float] NULL,
                    [DELAY_PRICE] [float] NULL,
                    [TOTAL_PRICE] [float] NULL,
                    [OTHER_TOTAL_PRICE] [float] NULL,
                    [CAPITAL_EXPENSE_ITEM_ID] [int] NULL,
                    [INTEREST_EXPENSE_ITEM_ID] [int] NULL,
                    [TAX_EXPENSE_ITEM_ID] [int] NULL,
                    [DELAY_EXPENSE_ITEM_ID] [int] NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [BANK_ACTION_ID] [int] NULL,
                    [CREDIT_CONTRACT_ID] [int] NULL,
                    [ACTION_CURRENCY_ID] [nvarchar](43) NULL,
                    [DETAIL] [nvarchar](100) NULL,
                    [CAPITAL_EXPENSE_ITEM_ID_ACC] [nvarchar](50) NULL,
                    [INTEREST_EXPENSE_ITEM_ID_ACC] [nvarchar](50) NULL,
                    [TAX_EXPENSE_ITEM_ID_ACC] [nvarchar](50) NULL,
                    [DELAY_EXPENSE_ITEM_ID_ACC] [nvarchar](50) NULL,
                    [UPD_STATUS] [bit] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                 CONSTRAINT [PK_CREDIT_CONTRACT_PAYMENT_INCOME_CREDIT_CONTRACT_PAYMENT_ID] PRIMARY KEY CLUSTERED 
                (
                    [CREDIT_CONTRACT_PAYMENT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CREDIT_CONTRACT_PAYMENT_INCOME_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL,
                    [ACTION_MONEY_ID] [int] IDENTITY(1,1) NOT NULL,
                CONSTRAINT [PK_CREDIT_CONTRACT_PAYMENT_INCOME_MONEY] PRIMARY KEY CLUSTERED 
                (
                    [ACTION_MONEY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CREDIT_CONTRACT_PAYMENT_INCOME_TAX](
                    [CREDIT_CONTRACT_TAX_ID] [int] IDENTITY(1,1) NOT NULL,
                    [CREDIT_CONTRACT_PAYMENT_ID] [int] NULL,
                    [TAX_PRICE] [float] NULL,
                    [TAX_EXPENSE_ITEM_ID] [int] NULL,
                    [TAX_EXPENSE_ITEM_ID_ACC] [nvarchar](50) NULL,
                 CONSTRAINT [PK_CREDIT_CONTRACT_PAYMENT_INCOME_TAX_CREDIT_CONTRACT_TAX_ID] PRIMARY KEY CLUSTERED 
                (
                    [CREDIT_CONTRACT_TAX_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EARCHIVE_RELATION](
                    [RELATION_ID] [int] IDENTITY(1,1) NOT NULL,
                    [ACTION_ID] [int] NULL,
                    [ACTION_TYPE] [nvarchar](50) NULL,
                    [EARCHIVE_ID] [nvarchar](50) NULL,
                    [UUID] [nvarchar](50) NULL,
                    [INTEGRATION_ID] [nvarchar](50) NULL,
                    [PATH] [nvarchar](250) NULL,
                    [SENDER_TYPE] [int] NULL,
                    [STATUS] [bit] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [IS_PAPER_UPDATE] [bit] NULL,
                    [IS_CANCEL] [bit] NULL DEFAULT ((0)),
                    [STATUS_CODE] [int] NULL,
                    [STATUS_DESCRIPTION] [nvarchar](250) NULL,
                    [CANCEL_DESCRIPTION] [nvarchar](250) NULL,
                    [CANCEL_DATE] [datetime] NULL,
                    [CANCEL_EMP] [int] NULL,
                    [IS_INTERNET] [bit] NULL,
                    [EARCHIVE_SENDING_TYPE] [int] NULL,
                 CONSTRAINT [PK_EARCHIVE_INVOICE_RELATION] PRIMARY KEY CLUSTERED 
                (
                    [RELATION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EARCHIVE_SENDING_DETAIL](
                    [SENDING_DETAIL_ID] [int] IDENTITY(1,1) NOT NULL,
                    [SERVICE_RESULT] [nvarchar](50) NULL,
                    [UUID] [nvarchar](50) NULL,
                    [EARCHIVE_ID] [nvarchar](50) NULL,
                    [STATUS_DESCRIPTION] [nvarchar](250) NULL,
                    [STATUS_CODE] [nvarchar](50) NULL,
                    [ERROR_CODE] [nvarchar](50) NULL,
                    [ACTION_ID] [int] NULL,
                    [ACTION_TYPE] [nvarchar](50) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [SERVICE_RESULT_DESCRIPTION] [nvarchar](1000) NULL,
                    [ZIP_FILE_NAME] [nvarchar](100) NULL,
                    [OUTPUT_TYPE] [nvarchar](50) NULL,
                    [INVOICE_MULTI_ID] [int] NULL,
                    [EARCHIVE_SENDING_TYPE] [int] NULL,
                    [INVOICE_TYPE_CODE] [nvarchar](50) NULL,
                 CONSTRAINT [PK_EARCHIVE_SENDING_DETAIL] PRIMARY KEY CLUSTERED 
                (
                    [SENDING_DETAIL_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EINVOICE_RECEIVING_DETAIL](
                    [RECEIVING_DETAIL_ID] [int] IDENTITY(1,1) NOT NULL,
                    [SERVICE_RESULT] [nvarchar](50) NULL,
                    [SERVICE_RESULT_DESCRIPTION] [nvarchar](250) NULL,
                    [UUID] [nvarchar](50) NULL,
                    [EINVOICE_ID] [nvarchar](50) NULL,
                    [STATUS_DESCRIPTION] [nvarchar](250) NULL,
                    [STATUS_CODE] [int] NULL,
                    [ERROR_CODE] [int] NULL,
                    [INVOICE_TYPE_CODE] [nvarchar](50) NULL,
                    [SENDER_TAX_ID] [nvarchar](50) NULL,
                    [RECEIVER_TAX_ID] [nvarchar](50) NULL,
                    [PROFILE_ID] [nvarchar](50) NULL,
                    [PAYABLE_AMOUNT] [float] NULL,
                    [ISSUE_DATE] [datetime] NULL,
                    [PARTY_NAME] [nvarchar](250) NULL,
                    [PAYABLE_AMOUNT_CURRENCY] [nvarchar](50) NULL,
                    [PATH] [nvarchar](250) NULL,
                    [STATUS] [bit] NULL,
                    [IS_PROCESS] [bit] NULL,
                    [INVOICE_ID] [int] NULL,
                    [EXPENSE_ID] [int] NULL,
                    [PROCESS_STAGE] [int] NULL,
                    [IS_APPROVE] [bit] NULL,
                    [ORDER_NUMBER] [nvarchar](50) NULL,
                    [IS_MANUEL] [bit] NULL,
                    [EINVOICE_TYPE] [int] NULL,
                    [LAST_DATE] [datetime] NULL,
                    [DETAIL] [nvarchar](500) NULL,
                    [SENDER_ALIAS] [nvarchar](50) NULL,
                    [BELGE_OID] [nvarchar](50) NULL,
                    [PRINT_COUNT] [int] NULL DEFAULT ((0)),
                    [LAST_ID] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [IS_TRANSFER] [bit] NULL DEFAULT ((0)),
                    [BRANCH_ID] [int] NULL,
                    [DEPARTMENT_ID] [int] NULL,
                    [SHIP_ID] [int] NULL,
                    [POSITION_IDS] [nvarchar](50) NULL,
                    [CREATE_DATE] [datetime] NULL,
                 CONSTRAINT [PK_EFATURA_RECEIVING_DETAIL] PRIMARY KEY CLUSTERED 
                (
                    [RECEIVING_DETAIL_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EINVOICE_RELATION](
                    [RELATION_ID] [int] IDENTITY(1,1) NOT NULL,
                    [ACTION_ID] [int] NULL,
                    [ACTION_TYPE] [nvarchar](50) NULL,
                    [EINVOICE_ID] [nvarchar](50) NULL,
                    [UUID] [nvarchar](50) NULL,
                    [PATH] [nvarchar](250) NULL,
                    [SENDER_TYPE] [int] NULL,
                    [SERVICE_RESULT_DESCRIPTION] [nvarchar](500) NULL,
                    [STATUS] [bit] NULL,
                    [PROFILE_ID] [nvarchar](50) NULL,
                    [ENVUUID] [nvarchar](50) NULL,
                    [INTEGRATION_ID] [nvarchar](50) NULL,
                    [IS_PAPER_UPDATE] [bit] NULL,
                    [STATUS_CODE] [int] NULL,
                    [STATUS_DESCRIPTION] [nvarchar](250) NULL,
                    [STATUS_DATE] [datetime] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                 CONSTRAINT [PK_EFATURA_RELATION] PRIMARY KEY CLUSTERED 
                (
                    [RELATION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EINVOICE_RELATION_HISTORY](
                    [ID] [int] IDENTITY(1,1) NOT NULL,
                    [ENVUUID] [nvarchar](50) NULL,
                    [UUID] [nvarchar](50) NULL,
                    [RESPONSE_CODE] [nvarchar](50) NULL,
                    [STATUS_DESCRIPTION] [nvarchar](50) NULL,
                    [NOTE] [nvarchar](250) NULL,
                    [RESPONSE_DATE] [datetime] NULL,
                    [RECORD_DATE] [datetime] NULL,
                 CONSTRAINT [PK_EINVOICE_RELATION_HISTORY] PRIMARY KEY CLUSTERED 
                (
                    [ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EINVOICE_SENDING_DETAIL](
                    [SENDING_DETAIL_ID] [int] IDENTITY(1,1) NOT NULL,
                    [SERVICE_RESULT] [nvarchar](50) NULL,
                    [UUID] [nvarchar](50) NULL,
                    [EINVOICE_ID] [nvarchar](50) NULL,
                    [STATUS_DESCRIPTION] [nvarchar](50) NULL,
                    [STATUS_CODE] [nvarchar](50) NULL,
                    [ERROR_CODE] [nvarchar](50) NULL,
                    [ACTION_ID] [int] NULL,
                    [ACTION_TYPE] [nvarchar](50) NULL,
                    [IS_SUCCESFULL] [bit] NULL,
                    [SERVICE_RESULT_DESCRIPTION] [nvarchar](250) NULL,
                    [BELGE_OID] [nvarchar](50) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [INVOICE_TYPE_CODE] [nvarchar](50) NULL,
                 CONSTRAINT [PK_DP_EFATURA_SENDING_DET] PRIMARY KEY CLUSTERED 
                (
                    [SENDING_DETAIL_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ESHIPMENT_NUMBER](
                    [ID] [int] IDENTITY(1,1) NOT NULL,
                    [ESHIPMENT_PREFIX] [varchar](50) NOT NULL,
                    [ESHIPMENT_NUMBER] [varchar](50) NULL,
                CONSTRAINT [PK_ESHIPMENT_NUMBER] PRIMARY KEY CLUSTERED 
                (
                    [ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]

                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ESHIPMENT_RELATION](
                    [RELATION_ID] [int] IDENTITY(1,1) NOT NULL,
                    [ACTION_ID] [int] NULL,
                    [ACTION_TYPE] [nvarchar](50) NULL,
                    [ESHIPMENT_ID] [nvarchar](50) NULL,
                    [UUID] [nvarchar](50) NULL,
                    [PATH] [nvarchar](250) NULL,
                    [SENDER_TYPE] [int] NULL,
                    [SERVICE_RESULT_DESCRIPTION] [nvarchar](500) NULL,
                    [STATUS] [bit] NULL,
                    [PROFILE_ID] [nvarchar](50) NULL,
                    [ENVUUID] [nvarchar](50) NULL,
                    [INTEGRATION_ID] [nvarchar](50) NULL,
                    [IS_PAPER_UPDATE] [bit] NULL,
                    [STATUS_CODE] [int] NULL,
                    [STATUS_DESCRIPTION] [nvarchar](250) NULL,
                    [STATUS_DATE] [datetime] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECEIPMENT_ID] [nvarchar](250) NULL,
                    [RECEIPMENT_UUID] [nvarchar](250) NULL,
                CONSTRAINT [PK_ESHIPMENT_RELATION] PRIMARY KEY CLUSTERED 
                (
                    [RELATION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]

                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ESHIPMENT_SENDING_DETAIL](
                    [SENDING_DETAIL_ID] [int] IDENTITY(1,1) NOT NULL,
                    [SERVICE_RESULT] [nvarchar](50) NULL,
                    [UUID] [nvarchar](50) NULL,
                    [ESHIPMENT_ID] [nvarchar](50) NULL,
                    [STATUS_DESCRIPTION] [nvarchar](50) NULL,
                    [STATUS_CODE] [nvarchar](50) NULL,
                    [ERROR_CODE] [nvarchar](50) NULL,
                    [ACTION_ID] [int] NULL,
                    [ACTION_TYPE] [nvarchar](50) NULL,
                    [IS_SUCCESFULL] [bit] NULL,
                    [SERVICE_RESULT_DESCRIPTION] [nvarchar](250) NULL,
                    [BELGE_OID] [nvarchar](50) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [SHIPMENT_TYPE_CODE] [nvarchar](50) NULL,
                CONSTRAINT [PK_ESHIPMENT_SENDING_DETAIL] PRIMARY KEY CLUSTERED 
                (
                    [SENDING_DETAIL_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]

                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ESHIPMENT_RECEIVING_DETAIL](
                    [RECEIVING_DETAIL_ID] [int] IDENTITY(1,1) NOT NULL,
                    [SERVICE_RESULT] [nvarchar](50) NULL,
                    [SERVICE_RESULT_DESCRIPTION] [nvarchar](250) NULL,
                    [UUID] [nvarchar](50) NULL,
                    [ESHIPMENT_ID] [nvarchar](50) NULL,
                    [STATUS_DESCRIPTION] [nvarchar](250) NULL,
                    [STATUS_CODE] [int] NULL,
                    [ERROR_CODE] [int] NULL,
                    [DESPATCH_ADVICE_TYPE_CODE] [nvarchar](50) NULL,
                    [SENDER_TAX_ID] [nvarchar](50) NULL,
                    [RECEIVER_TAX_ID] [nvarchar](50) NULL,
                    [PROFILE_ID] [nvarchar](50) NULL,
                    [TOTAL_AMOUNT] [float] NULL,
                    [ISSUE_DATE] [datetime] NULL,
                    [ISSUE_TIME] [datetime] NULL,
                    [PARTY_NAME] [nvarchar](250) NULL,
                    [PATH] [nvarchar](250) NULL,
                    [STATUS] [bit] NULL,
                    [LAST_DATE] [datetime] NULL,
                    [IS_APPROVE] [bit] NULL,
                    [PRINT_COUNT] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [RECEIVER_POSTBOX_NAME] [nvarchar](250) NULL,
                    [SENDER_POSTBOX_NAME] [nvarchar](250) NULL,
                    [DIRECTION] [nvarchar](50) NULL,
                    [CREATE_DATE] [datetime] NULL,
                    [PROCESS_STAGE] [int] NULL,
                    [IS_PROCESS] [bit] NULL,
                    [SHIP_ID] [int] NULL,
                CONSTRAINT [PK_ESHIPMENT_RECEIVING_DETAIL] PRIMARY KEY CLUSTERED 
                (
                    [RECEIVING_DETAIL_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]

                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_CATEGORY](
                    [EXPENSE_CAT_ID] [int] IDENTITY(1,1) NOT NULL,
                    [EXPENSE_CAT_NAME] [nvarchar](150) NULL,
                    [EXPENSE_CAT_DETAIL] [nvarchar](500) NULL,
                    [EXPENCE_IS_HR] [bit] NULL,
                    [EXPENCE_IS_TRAINING] [bit] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [EXPENSE_CAT_CODE] [nvarchar](50) NULL,
                    [IS_SUB_EXPENSE_CAT] [bit] NULL,
                 CONSTRAINT [PK_EXPENSE_CATEGORY_EXPENSE_CAT_ID] PRIMARY KEY CLUSTERED 
                (
                    [EXPENSE_CAT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_RESERVED_ROWS](
                    [EXP_ITEM_ROWS_ID] [int] IDENTITY(1,1) NOT NULL,
                    [EXPENSE_ID] [int] NULL,
                    [EXPENSE_DATE] [datetime] NULL,
                    [EXPENSE_CENTER_ID] [int] NULL,
                    [EXPENSE_ITEM_ID] [int] NULL,
                    [EXPENSE_COST_TYPE] [int] NULL,
                    [EXPENSE_EMPLOYEE] [int] NULL,
                    [PYSCHICAL_ASSET_ID] [int] NULL,
                    [PROJECT_ID] [int] NULL,
                    [PAPER_TYPE] [nvarchar](100) NULL,
                    [AMOUNT] [float] NULL,
                    [AMOUNT_KDV] [float] NULL,
                    [MONEY_CURRENCY_ID] [nvarchar](43) NULL,
                    [SYSTEM_RELATION] [nvarchar](250) NULL,
                    [TOTAL_AMOUNT] [float] NULL,
                    [COMPANY_ID] [int] NULL,
                    [COMPANY_PARTNER_ID] [int] NULL,
                    [ACTIVITY_TYPE] [int] NULL,
                    [DETAIL] [nvarchar](max) NULL,
                    [RATE] [float] NULL,
                    [ACTION_ID] [int] NULL,
                    [STOCK_ID] [int] NULL,
                    [IS_INCOME] [bit] NULL,
                    [MEMBER_TYPE] [nvarchar](43) NULL,
                    [KDV_RATE] [nvarchar](43) NULL,
                    [OTHER_MONEY_VALUE] [float] NULL,
                    [INVOICE_ID] [int] NULL,
                    [SALE_PURCHASE] [bit] NULL,
                    [IS_DETAILED] [bit] NULL,
                    [OTHER_MONEY_VALUE_2] [float] NULL,
                    [MONEY_CURRENCY_ID_2] [nvarchar](43) NULL,
                    [BUDGET_PLAN_ROW_ID] [int] NULL,
                    [STOCK_FIS_ID] [int] NULL,
                    [QUANTITY] [float] NULL,
                    [PRODUCT_ID] [int] NULL,
                    [SPECT_VAR_ID] [int] NULL,
                    [STOCK_ID_2] [int] NULL,
                    [PRODUCT_NAME] [nvarchar](500) NULL,
                    [UNIT] [nvarchar](50) NULL,
                    [UNIT_ID] [int] NULL,
                    [OTV_RATE] [float] NULL,
                    [AMOUNT_OTV] [float] NULL,
                    [SUBSCRIPTION_ID] [int] NULL,
                    [OTHER_MONEY_GROSS_TOTAL] [float] NULL,
                    [WORKGROUP_ID] [int] NULL,
                    [WRK_ROW_ID] [nvarchar](40) NULL,
                    [EXPENSE_ACCOUNT_CODE] [nvarchar](50) NULL,
                    [BRANCH_ID] [int] NULL,
                    [IS_INTEREST] [bit] NULL,
                    [WORK_ID] [int] NULL,
                    [OPP_ID] [int] NULL,
                    [ROW_PAPER_NO] [nvarchar](50) NULL,
                    [ACTION_TABLE] [nvarchar](50) NULL,
                    [RECORD_CONS] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [TAX_CODE] [nvarchar](50) NULL,
                    [BSMV_RATE] [float] NULL,
                    [AMOUNT_BSMV] [float] NULL,
                    [BSMV_CURRENCY] [float] NULL,
                    [OIV_RATE] [float] NULL,
                    [AMOUNT_OIV] [float] NULL,
                    [TEVKIFAT_RATE] [float] NULL,
                    [AMOUNT_TEVKIFAT] [float] NULL,
                    [DISCOUNT_TOTAL] [float] NULL,
                    [DISCOUNT_PRICE] [float] NULL,
                    [DISCOUNT_RATE] [nvarchar](43) NULL,
                    [PROCESS_CAT] [int] NULL,
                CONSTRAINT [PK_EXPENSE_RESERVED_ROWS_EXP_ITEM_ROWS_ID] PRIMARY KEY CLUSTERED 
                (
                    [EXP_ITEM_ROWS_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_CENTER](
                    [EXPENSE_ID] [int] IDENTITY(1,1) NOT NULL,
                    [EXPENSE] [nvarchar](50) NULL,
                    [HIERARCHY] [int] NULL,
                    [DETAIL] [nvarchar](max) NULL,
                    [EXPENSE_CODE] [nvarchar](50) NULL,
                    [EXPENSE_ACTIVE] [bit] NULL,
                    [RESPONSIBLE1] [int] NULL,
                    [RESPONSIBLE2] [int] NULL,
                    [RESPONSIBLE3] [int] NULL,
                    [IS_PRODUCTION] [bit] NULL,
                    [COMPANY_ID] [int] NULL,
                    [WORKGROUP_ID] [int] NULL,
                    [EXPENSE_BRANCH_ID] [int] NULL,
                    [EXPENSE_DEPARTMENT_ID] [int] NULL,
                    [IS_GENERAL] [bit] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_EMP_IP] [nvarchar](50) NULL,
                    [IS_ACCOUNTING_BUDGET] [bit] NULL,
                    [ACTIVITY_ID] [int] NULL,
                 CONSTRAINT [PK_EXPENSE_CENTER_EXPENSE_ID] PRIMARY KEY CLUSTERED 
                (
                    [EXPENSE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_CENTER_ROW](
                    [EXPENSE_CENTER_ROW_ID] [int] IDENTITY(1,1) NOT NULL,
                    [EXPENSE_ID] [int] NULL,
                    [EXPENSE_ITEM_ID] [int] NULL,
                    [ACCOUNT_ID] [int] NULL,
                    [ACCOUNT_CODE] [nvarchar](150) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                CONSTRAINT [PK_EXPENSE_CENTER_ROW] PRIMARY KEY CLUSTERED 
                (
                    [EXPENSE_CENTER_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEM_PLAN_REQUESTS](
                    [EXPENSE_ID] [int] IDENTITY(1,1) NOT NULL,
                    [EMP_ID] [int] NULL,
                    [EXPENSE_DATE] [datetime] NULL,
                    [INVOICE_NO] [nvarchar](100) NULL,
                    [ACTION_ID] [int] NULL,
                    [EXPENSE_COST_TYPE] [int] NULL,
                    [PAPER_TYPE] [nvarchar](100) NULL,
                    [SYSTEM_RELATION] [nvarchar](1000) NULL,
                    [DETAIL] [nvarchar](max) NULL,
                    [TOTAL_AMOUNT] [float] NULL,
                    [NET_TOTAL_AMOUNT] [float] NULL,
                    [NET_KDV_AMOUNT] [float] NULL,
                    [SALES_PARTNER_ID] [int] NULL,
                    [SALES_COMPANY_ID] [int] NULL,
                    [SALES_CONSUMER_ID] [int] NULL,
                    [PAPER_NO] [nvarchar](50) NULL,
                    [PAYMETHOD_ID] [int] NULL,
                    [OTHER_MONEY_AMOUNT] [float] NULL,
                    [OTHER_MONEY_KDV] [float] NULL,
                    [OTHER_MONEY_NET_TOTAL] [float] NULL,
                    [OTHER_MONEY] [nvarchar](50) NULL,
                    [IS_CASH] [bit] NULL,
                    [EXPENSE_CASH_ID] [int] NULL,
                    [IS_BANK] [int] NULL,
                    [MEMBER_TYPE] [nvarchar](43) NULL,
                    [CONSUMER_ID] [int] NULL,
                    [PARTNER_ID] [int] NULL,
                    [IS_APPROVE] [bit] NULL,
                    [EXPENSE_STAGE] [int] NULL,
                    [VALID_EMP] [int] NULL,
                    [VALID_DATE] [datetime] NULL,
                    [BRANCH_ID] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [int] NULL,
                    [EXPENDITURE_REQUEST_NUMBER] [nvarchar](50) NULL,
                    [ACC_TYPE_ID] [int] NULL,
                    [DUE_DATE] [datetime] NULL,
                    [PROJECT_ID] [int] NULL,
                    [MONEY] [nvarchar](50) NULL,
                    [TREATED] [int] NULL,
                    [TREATMENT_ID] [int] NULL,
                    [DEPARTMENT_ID] [nvarchar](50) NULL,
                    [EXPENSE_HR_ALLOWANCE] [int] NULL,
                    [EXPENSE_TYPE] [int] NULL,
                    [ASSURANCE_ID] [int] NULL,
                    [RELATIVE_ID] [int] NULL,
                    [OUR_COMPANY_HEALTH_AMOUNT] [float] NULL,
                    [EMPLOYEE_HEALTH_AMOUNT] [float] NULL,
                    [PROCESS_CAT] [int] NULL,
                    [PROCESS_DATE] [datetime] NULL,
                    [COMPANY_ID] [int] NULL,
                    [INVOICE_DATE] [datetime] NULL,
                    [PAYMENT_INTERRUPTION_VALUE] [float] NULL,
                    [EXPENSE_ITEM_PLANS_ID] [int] NULL,
                    [RECEIVING_ID] [int] NULL,
                    [TREATMENT_AMOUNT] [float] NULL,
                    [COMPANY_AMOUNT_RATE] [float] NULL,
                    [TREATMENT_AMOUNT_RATE] [float] NULL,
                    [COMPANY_NAME] [nvarchar](250) NULL,
                    [ASSURANCE_TYPE_ID] [int] NULL,
                    [AMOUNT_1] [float] NULL,
                    [AMOUNT_2] [float] NULL,
                    [AMOUNT_3] [float] NULL,
                    [AMOUNT_KDV_1] [float] NULL,
                    [AMOUNT_KDV_2] [float] NULL,
                    [AMOUNT_KDV_3] [float] NULL,
                    [AMOUNT_4] [float] NULL,
                    [AMOUNT_KDV_4] [float] NULL,
                    [EXPENSE_ITEM_PLANS_PAPER_NO] nvarchar(100) NULL,
                    [HEALTH_AMOUNT_TAX_RATE] INT NULL,
                    [HEALTH_APPROVE] bit NULL,
                    [PAYMENT_DATE] [datetime] NULL,
                    [IS_PAYMENT] bit NULL,
                 CONSTRAINT [PK_EXPENSE_ITEM_PLAN_REQUESTS_EXPENSE_ID] PRIMARY KEY CLUSTERED 
                (
                    [EXPENSE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEM_PLAN_REQUESTS_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL
                ) ON [PRIMARY]
                

                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[HEALTH_EXPENSE](
                    [HEALTH_EXPENSE_ID] [int] IDENTITY(1,1) NOT NULL,
                    [EXPENSE_ID] [int] NULL,
                    [HEALTH_EXPENSE_CODE] [nvarchar](50) NULL,
                    [HEALTH_EXPENSE_AMOUNT] [float] NULL,
                    [HEALTH_EXPENSE_PRICE] [float] NULL,
                    [HEALTH_EXPENSE_TOTAL] [float] NULL,
                    [COMPLAINT_ID] [int] NULL,
                    [DRUG_ID] [int] NULL,
                    [HEALTH_EXPENSE_DETAIL] [nvarchar](max) NULL,
                    [MONEY] [nvarchar](50) NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [LIMB_ID] [int] NULL,
                    [EXPENSE_ITEM_PLAN_REQUESTS_ID] [int] NULL,
                    [LIMB_MEASUREMENT] [float] NULL,
                    [HEALTH_EXPENSE_LIMB] [int] NULL,
                    [LIST_PRICE] [float] NULL,
                    [PURCHASE_PRICE] [float] NULL,
                    [DISCOUNT_RATE] [float] NULL,
                CONSTRAINT [PK_HEALTH_EXPENSE] PRIMARY KEY CLUSTERED 
                (
                    [HEALTH_EXPENSE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEM_PLAN_REQUESTS_ROWS](
                    [EXP_ITEM_ROWS_ID1] [int] NULL,
                    [EXPENSE_ID1] [int] NULL,
                    [PROCESS_TYPE1] [int] NULL,
                    [PROCESS_STAGE1] [int] NULL,
                    [EXPENSE_DATE1] [datetime] NULL,
                    [EXPENSE_CENTER_ID1] [int] NULL,
                    [EXPENSE_ITEM_ID1] [int] NULL,
                    [EXPENSE_COST_TYPE1] [int] NULL,
                    [EXPENSE_EMPLOYEE1] [int] NULL,
                    [PROD_ORDER_ID1] [int] NULL,
                    [CAMP_ID1] [int] NULL,
                    [PYSCHICAL_ASSET_ID1] [int] NULL,
                    [PROJECT_ID1] [int] NULL,
                    [PAPER_TYPE1] [nvarchar](100) NULL,
                    [AMOUNT1] [float] NULL,
                    [AMOUNT_KDV1] [float] NULL,
                    [TOTAL_AMOUNT1] [float] NULL,
                    [TOTAL_AMOUNT2] [float] NULL,
                    [MONEY_CURRENCY_ID2] [nvarchar](43) NULL,
                    [MONEY_CURRENCY_ID2_RATE] [float] NULL,
                    [OTHER_MONEY_VALUE1] [float] NULL,
                    [MONEY_CURRENCY_ID1] [nvarchar](50) NULL,
                    [MONEY_CURRENCY_RATE] [float] NULL,
                    [RATE3] [int] NULL,
                    [SYSTEM_RELATION1] [nvarchar](1000) NULL,
                    [COMPANY_ID1] [int] NULL,
                    [COMPANY_PARTNER_ID1] [int] NULL,
                    [APPROVE_EMP_ID1] [int] NULL,
                    [ACTIVITY_TYPE1] [int] NULL,
                    [DETAIL1] [nvarchar](max) NULL,
                    [ACTION_ID1] [int] NULL,
                    [ORDER_ID1] [int] NULL,
                    [INVOICE_NO1] [nvarchar](100) NULL,
                    [STOCK_ID1] [int] NULL,
                    [IS_INCOME1] [bit] NULL,
                    [EXPENSE_EMPLOYEE_TYPE1] [nvarchar](43) NULL,
                    [MEMBER_TYPE1] [nvarchar](43) NULL,
                    [KDV_RATE1] [nvarchar](43) NULL,
                    [INVOICE_ID1] [int] NULL,
                    [SALE_PURCHASE1] [bit] NULL,
                    [RECORD_IP1] [nvarchar](40) NULL,
                    [RECORD_EMP1] [int] NULL,
                    [RECORD_DATE1] [datetime] NULL,
                    [UPDATE_DATE1] [datetime] NULL,
                    [UPDATE_EMP1] [int] NULL,
                    [UPDATE_IP1] [nvarchar](40) NULL,
                    [EXP_ITEM_ROWS_ID] [int] IDENTITY(1,1) NOT NULL,
                    [EXPENSE_ID] [int] NULL,
                    [PROCESS_TYPE] [int] NULL,
                    [PROCESS_STAGE] [int] NULL,
                    [EXPENSE_DATE] [datetime] NULL,
                    [EXPENSE_CENTER_ID] [int] NULL,
                    [EXPENSE_ITEM_ID] [int] NULL,
                    [EXPENSE_COST_TYPE] [int] NULL,
                    [EXPENSE_EMPLOYEE] [int] NULL,
                    [PROD_ORDER_ID] [int] NULL,
                    [CAMP_ID] [int] NULL,
                    [PYSCHICAL_ASSET_ID] [int] NULL,
                    [PROJECT_ID] [int] NULL,
                    [PAPER_TYPE] [nvarchar](100) NULL,
                    [AMOUNT] [float] NULL,
                    [AMOUNT_KDV] [float] NULL,
                    [TOTAL_AMOUNT] [float] NULL,
                    [OTHER_MONEY_VALUE] [float] NULL,
                    [MONEY_CURRENCY_ID] [nvarchar](43) NULL,
                    [SYSTEM_RELATION] [nvarchar](1000) NULL,
                    [COMPANY_ID] [int] NULL,
                    [COMPANY_PARTNER_ID] [int] NULL,
                    [APPROVE_EMP_ID] [int] NULL,
                    [ACTIVITY_TYPE] [int] NULL,
                    [RATE1] [float] NULL,
                    [RATE2] [float] NULL,
                    [DETAIL] [nvarchar](max) NULL,
                    [RATE] [int] NULL,
                    [ACTION_ID] [int] NULL,
                    [ORDER_ID] [int] NULL,
                    [INVOICE_NO] [nvarchar](100) NULL,
                    [STOCK_ID] [int] NULL,
                    [IS_INCOME] [bit] NULL,
                    [EXPENSE_EMPLOYEE_TYPE] [nvarchar](43) NULL,
                    [MEMBER_TYPE] [nvarchar](43) NULL,
                    [KDV_RATE] [nvarchar](43) NULL,
                    [INVOICE_ID] [int] NULL,
                    [SALE_PURCHASE] [bit] NULL,
                    [PRODUCT_ID] [int] NULL,
                    [PRODUCT_NAME] [nvarchar](500) NULL,
                    [WORK_ID] [int] NULL,
                    [OPP_ID] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [QUANTITY] [float] NULL,
                    [UNIT] [nvarchar](50) NULL,
                    [UNIT_ID] [int] NULL,
                    [ALLOWANCE_TYPE_ID] [int] NULL,
                    [ALLOWANCE_DAY] [int] NULL,
                 CONSTRAINT [PK_EXPENSE_ITEM_PLAN_REQUESTS_ROWS] PRIMARY KEY CLUSTERED 
                (
                    [EXP_ITEM_ROWS_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEM_PLANS](
                    [EXPENSE_ID] [int] IDENTITY(1,1) NOT NULL,
                    [ACTION_TYPE] [int] NULL,
                    [PROCESS_CAT] [int] NULL,
                    [EMP_ID] [int] NULL,
                    [EXPENSE_DATE] [datetime] NULL,
                    [EXPENSE_COST_TYPE] [int] NULL,
                    [PAPER_TYPE] [nvarchar](100) NULL,
                    [SYSTEM_RELATION] [nvarchar](250) NULL,
                    [DETAIL] [nvarchar](max) NULL,
                    [TOTAL_AMOUNT] [float] NULL,
                    [KDV_TOTAL] [float] NULL,
                    [TOTAL_AMOUNT_KDVLI] [float] NULL,
                    [SERIAL_NO] [nvarchar](50) NULL,
                    [PAPER_NO] [nvarchar](100) NULL,
                    [PAYMETHOD_ID] [int] NULL,
                    [OTHER_MONEY_AMOUNT] [float] NULL,
                    [OTHER_MONEY_KDV] [float] NULL,
                    [OTHER_MONEY_NET_TOTAL] [float] NULL,
                    [OTHER_MONEY] [nvarchar](50) NULL,
                    [IS_CASH] [bit] NULL,
                    [EXPENSE_CASH_ID] [int] NULL,
                    [IS_BANK] [int] NULL,
                    [REQUEST_ID] [int] NULL,
                    [CH_PARTNER_ID] [int] NULL,
                    [CH_COMPANY_ID] [int] NULL,
                    [CH_CONSUMER_ID] [int] NULL,
                    [WRK_ID] [nvarchar](43) NULL,
                    [CH_EMPLOYEE_ID] [int] NULL,
                    [BUDGET_PLAN_ID] [int] NULL,
                    [DUE_DATE] [datetime] NULL,
                    [DEPARTMENT_ID] [int] NULL,
                    [LOCATION_ID] [int] NULL,
                    [UPD_STATUS] [bit] NULL,
                    [OTHER_MONEY_OTV] [float] NULL,
                    [OTV_TOTAL] [float] NULL,
                    [TEVKIFAT] [bit] NULL DEFAULT ((0)),
                    [TEVKIFAT_ORAN] [float] NULL,
                    [CREDIT_CONTRACT_ID] [int] NULL,
                    [CREDIT_CONTRACT_ROW_ID] [int] NULL,
                    [CARI_ACTION_TYPE] [int] NULL,
                    [FIRST_PROCESS_CAT] [int] NULL,
                    [BRANCH_ID] [int] NULL,
                    [PROJECT_ID] [int] NULL,
                    [ROUND_MONEY] [float] NULL,
                    [IS_CREDITCARD] [int] NULL,
                    [STOPAJ] [float] NULL,
                    [STOPAJ_ORAN] [float] NULL DEFAULT ((0)),
                    [STOPAJ_RATE_ID] [int] NULL,
                    [ACC_DEPARTMENT_ID] [int] NULL,
                    [SERIAL_NUMBER] [nvarchar](50) NULL,
                    [ACC_TYPE_ID] [int] NULL,
                    [ACC_TYPE_ID_EXP] [int] NULL,
                    [SHIP_ADDRESS_ID] [int] NULL,
                    [SHIP_ADDRESS] [nvarchar](500) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [int] NULL,
                    [TAX_CODE] [nvarchar](20) NULL,
                    [UUID] [nvarchar](50) NULL,
                    [TEVKIFAT_ID] [int] NULL,
                    [PROFILE_ID] [nvarchar](50) NULL,
                    [IS_IPTAL] [bit] NULL DEFAULT ((0)),
                    [CANCEL_TYPE_ID] [int] NULL,
                    [SPECIAL_DEFINITION_ID] [int] NULL,
                    [EXPENSE_DATE_TIME] [datetime] NULL,
                    [BSMV_TOTAL] [nvarchar](250) NULL,
                    [OIV_TOTAL] [nvarchar](250) NULL,
                    [COMPANY_HEALTH_AMOUNT] [float] NULL,
                    [EMPLOYEE_HEALTH_AMOUNT] [bit] NULL,
                    [PROCESS_STAGE] [int] NULL,
                    [ASSURANCE_ID] [int] NULL,
                    [RELATIVE_ID] [int] NULL,
                    [IS_EARCHIVE] [bit] NULL,
                    [EXPENSE_ITEM_PLANS_ID] [int] NULL,
                    [SUBSCRIPTION_ID] [int] NULL,
                    [POSITION_CODE] [INT] NULL,
                    [PROCESS_DATE] [datetime] NULL,
                    [LAW_REQUEST_ID] [int] NULL,
                 CONSTRAINT [PK_EXPENSE_ITEM_PLANS_EXPENSE_ID] PRIMARY KEY CLUSTERED 
                (
                    [EXPENSE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEM_PLANS_INFO_PLUS](
                    [INFO_ID] [int] IDENTITY(1,1) NOT NULL,
                    [EXPENSE_ID] [int] NULL,
                    [PROPERTY1] [nvarchar](500) NULL,
                    [PROPERTY2] [nvarchar](500) NULL,
                    [PROPERTY3] [nvarchar](500) NULL,
                    [PROPERTY4] [nvarchar](500) NULL,
                    [PROPERTY5] [nvarchar](500) NULL,
                    [PROPERTY6] [nvarchar](500) NULL,
                    [PROPERTY7] [nvarchar](500) NULL,
                    [PROPERTY8] [nvarchar](500) NULL,
                    [PROPERTY9] [nvarchar](500) NULL,
                    [PROPERTY10] [nvarchar](500) NULL,
                    [PROPERTY11] [nvarchar](500) NULL,
                    [PROPERTY12] [nvarchar](500) NULL,
                    [PROPERTY13] [nvarchar](500) NULL,
                    [PROPERTY14] [nvarchar](500) NULL,
                    [PROPERTY15] [nvarchar](500) NULL,
                    [PROPERTY16] [nvarchar](500) NULL,
                    [PROPERTY17] [nvarchar](500) NULL,
                    [PROPERTY18] [nvarchar](500) NULL,
                    [PROPERTY19] [nvarchar](500) NULL,
                    [PROPERTY20] [nvarchar](500) NULL,
                    [PROPERTY21] [nvarchar](500) NULL,
                    [PROPERTY22] [nvarchar](500) NULL,
                    [PROPERTY23] [nvarchar](500) NULL,
                    [PROPERTY24] [nvarchar](500) NULL,
                    [PROPERTY25] [nvarchar](500) NULL,
                    [PROPERTY26] [nvarchar](500) NULL,
                    [PROPERTY27] [nvarchar](500) NULL,
                    [PROPERTY28] [nvarchar](500) NULL,
                    [PROPERTY29] [nvarchar](500) NULL,
                    [PROPERTY30] [nvarchar](500) NULL,
                    [PROPERTY31] [nvarchar](500) NULL,
                    [PROPERTY32] [nvarchar](500) NULL,
                    [PROPERTY33] [nvarchar](500) NULL,
                    [PROPERTY34] [nvarchar](500) NULL,
                    [PROPERTY35] [nvarchar](500) NULL,
                    [PROPERTY36] [nvarchar](500) NULL,
                    [PROPERTY37] [nvarchar](500) NULL,
                    [PROPERTY38] [nvarchar](500) NULL,
                    [PROPERTY39] [nvarchar](500) NULL,
                    [PROPERTY40] [nvarchar](500) NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                CONSTRAINT [PK_EXPENSE_ITEM_PLANS_INFO_PLUS] PRIMARY KEY CLUSTERED 
                (
                    [INFO_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEM_PLANS_INFO_PLUS_HISTORY](
                    [INFO_ID_HIST] [int] NULL,
                    [INFO_ID] [int] NULL,
                    [EXPENSE_ID] [int] NULL,
                    [PROPERTY1] [nvarchar](500) NULL,
                    [PROPERTY2] [nvarchar](500) NULL,
                    [PROPERTY3] [nvarchar](500) NULL,
                    [PROPERTY4] [nvarchar](500) NULL,
                    [PROPERTY5] [nvarchar](500) NULL,
                    [PROPERTY6] [nvarchar](500) NULL,
                    [PROPERTY7] [nvarchar](500) NULL,
                    [PROPERTY8] [nvarchar](500) NULL,
                    [PROPERTY9] [nvarchar](500) NULL,
                    [PROPERTY10] [nvarchar](500) NULL,
                    [PROPERTY11] [nvarchar](500) NULL,
                    [PROPERTY12] [nvarchar](500) NULL,
                    [PROPERTY13] [nvarchar](500) NULL,
                    [PROPERTY14] [nvarchar](500) NULL,
                    [PROPERTY15] [nvarchar](500) NULL,
                    [PROPERTY16] [nvarchar](500) NULL,
                    [PROPERTY17] [nvarchar](500) NULL,
                    [PROPERTY18] [nvarchar](500) NULL,
                    [PROPERTY19] [nvarchar](500) NULL,
                    [PROPERTY20] [nvarchar](500) NULL,
                    [PROPERTY21] [nvarchar](500) NULL,
                    [PROPERTY22] [nvarchar](500) NULL,
                    [PROPERTY23] [nvarchar](500) NULL,
                    [PROPERTY24] [nvarchar](500) NULL,
                    [PROPERTY25] [nvarchar](500) NULL,
                    [PROPERTY26] [nvarchar](500) NULL,
                    [PROPERTY27] [nvarchar](500) NULL,
                    [PROPERTY28] [nvarchar](500) NULL,
                    [PROPERTY29] [nvarchar](500) NULL,
                    [PROPERTY30] [nvarchar](500) NULL,
                    [PROPERTY31] [nvarchar](500) NULL,
                    [PROPERTY32] [nvarchar](500) NULL,
                    [PROPERTY33] [nvarchar](500) NULL,
                    [PROPERTY34] [nvarchar](500) NULL,
                    [PROPERTY35] [nvarchar](500) NULL,
                    [PROPERTY36] [nvarchar](500) NULL,
                    [PROPERTY37] [nvarchar](500) NULL,
                    [PROPERTY38] [nvarchar](500) NULL,
                    [PROPERTY39] [nvarchar](500) NULL,
                    [PROPERTY40] [nvarchar](500) NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEM_PLANS_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEMS](
                    [EXPENSE_ITEM_ID] [int] IDENTITY(1,1) NOT NULL,
                    [ACCOUNT_CODE] [nvarchar](50) NULL,
                    [EXPENSE_CATEGORY_ID] [int] NULL,
                    [EXPENSE_ITEM_DETAIL] [nvarchar](500) NULL,
                    [EXPENSE_ITEM_NAME] [nvarchar](250) NULL,
                    [INCOME_EXPENSE] [bit] NULL,
                    [IS_EXPENSE] [bit] NULL,
                    [IS_CONTROL] [bit] NULL,
                    [IS_ACTIVE] [bit] NULL,
                    [TAX_CODE] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [TAX_CODE_NAME] [nvarchar](100) NULL,
                    [EXPENSE_ITEM_CODE] [nvarchar](50) NULL,
                 CONSTRAINT [PK_EXPENSE_ITEMS_EXPENSE_ITEM_ID] PRIMARY KEY CLUSTERED 
                (
                    [EXPENSE_ITEM_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEMS_ROWS](
                    [EXP_ITEM_ROWS_ID] [int] IDENTITY(1,1) NOT NULL,
                    [EXPENSE_ID] [int] NULL,
                    [EXPENSE_DATE] [datetime] NULL,
                    [EXPENSE_CENTER_ID] [int] NULL,
                    [EXPENSE_ITEM_ID] [int] NULL,
                    [EXPENSE_COST_TYPE] [int] NULL,
                    [EXPENSE_EMPLOYEE] [int] NULL,
                    [PYSCHICAL_ASSET_ID] [int] NULL,
                    [PROJECT_ID] [int] NULL,
                    [PAPER_TYPE] [nvarchar](100) NULL,
                    [AMOUNT] [float] NULL,
                    [AMOUNT_KDV] [float] NULL,
                    [MONEY_CURRENCY_ID] [nvarchar](43) NULL,
                    [SYSTEM_RELATION] [nvarchar](250) NULL,
                    [TOTAL_AMOUNT] [float] NULL,
                    [COMPANY_ID] [int] NULL,
                    [COMPANY_PARTNER_ID] [int] NULL,
                    [ACTIVITY_TYPE] [int] NULL,
                    [DETAIL] [nvarchar](max) NULL,
                    [RATE] [float] NULL,
                    [ACTION_ID] [int] NULL,
                    [STOCK_ID] [int] NULL,
                    [IS_INCOME] [bit] NULL,
                    [MEMBER_TYPE] [nvarchar](43) NULL,
                    [KDV_RATE] [nvarchar](43) NULL,
                    [OTHER_MONEY_VALUE] [float] NULL,
                    [INVOICE_ID] [int] NULL,
                    [SALE_PURCHASE] [bit] NULL,
                    [IS_DETAILED] [bit] NULL,
                    [OTHER_MONEY_VALUE_2] [float] NULL,
                    [MONEY_CURRENCY_ID_2] [nvarchar](43) NULL,
                    [BUDGET_PLAN_ROW_ID] [int] NULL,
                    [STOCK_FIS_ID] [int] NULL,
                    [QUANTITY] [float] NULL,
                    [PRODUCT_ID] [int] NULL,
                    [SPECT_VAR_ID] [int] NULL,
                    [STOCK_ID_2] [int] NULL,
                    [PRODUCT_NAME] [nvarchar](500) NULL,
                    [UNIT] [nvarchar](50) NULL,
                    [UNIT_ID] [int] NULL,
                    [OTV_RATE] [float] NULL,
                    [AMOUNT_OTV] [float] NULL,
                    [SUBSCRIPTION_ID] [int] NULL,
                    [OTHER_MONEY_GROSS_TOTAL] [float] NULL,
                    [WORKGROUP_ID] [int] NULL,
                    [WRK_ROW_ID] [nvarchar](40) NULL,
                    [EXPENSE_ACCOUNT_CODE] [nvarchar](50) NULL,
                    [BRANCH_ID] [int] NULL,
                    [IS_INTEREST] [bit] NULL,
                    [WORK_ID] [int] NULL,
                    [OPP_ID] [int] NULL,
                    [ROW_PAPER_NO] [nvarchar](50) NULL,
                    [ACTION_TABLE] [nvarchar](50) NULL,
                    [RECORD_CONS] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [TAX_CODE] [nvarchar](50) NULL,
                    [BSMV_RATE] [float] NULL,
                    [AMOUNT_BSMV] [float] NULL,
                    [BSMV_CURRENCY] [float] NULL,
                    [OIV_RATE] [float] NULL,
                    [AMOUNT_OIV] [float] NULL,
                    [TEVKIFAT_RATE] [float] NULL,
                    [AMOUNT_TEVKIFAT] [float] NULL,
                    [DISCOUNT_TOTAL] [float] NULL,
                    [DISCOUNT_PRICE] [float] NULL,
                    [DISCOUNT_RATE] [nvarchar](43) NULL,                   
                    [REASON_NAME] [nvarchar](250) NULL,
                    [REASON_CODE] [nvarchar](10) NULL,
                    [RECEIPT_DATE] [datetime] NULL,
                    [IS_EXPENSING_OIV] [bit] NULL DEFAULT ((0)),
                    [IS_EXPENSING_OTV] [bit] NULL DEFAULT ((0)),
                    [PROCESS_CAT] [int] NULL,
                    [IS_INVENTORY_ASSET_VALUATION] [bit] NULL DEFAULT ((0)),
                    [INVENTORY_ID] [int] NULL,
                 CONSTRAINT [PK_EXPENSE_ITEMS_ROWS_EXP_ITEM_ROWS_ID] PRIMARY KEY CLUSTERED 
                (
                    [EXP_ITEM_ROWS_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]

                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVENTORY_VALUATION](
                    [INVENTORY_VALUATION_ID] [int] IDENTITY(1,1) NOT NULL,
                    [OLD_INVENTORY_ID] [int] NULL,
                    [NEW_INVENTORY_ID] [int] NULL,
                    [OLD_INVENTORY_MONEY] [float] NULL,
                    [NEW_INVENTORY_MONEY] [float] NULL,
                    [VALUATION_DATE] [datetime] NULL,
                    [VALUATION_METHOD] [int] NULL, 
                    [AMORTIZATION_TYPE] [int] NULL,
                    [AMORTIZATION_COUNT] [int] NULL,
                    [USEABLE_TIME] [int] NULL,
                    [PROCESS_CAT] [int] NULL,
                    [ACTION_TYPE] [int]NULL,
                    [PROCESS_STAGE ] [int] NULL,
                    [PAPER_NO] [nvarchar](100) NULL,
                    [VALUATION_EMP_ID] [int] NULL,
                    [VALUATION_DETAIL] [nvarchar](500) NULL,
                    [NEW_VALUE_MONEY] [float] NULL,
                    [NEW_VALUE_OTHER_MONEY] [float] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                CONSTRAINT [PK__WRK_EXTE__4CCFB490590FD432] PRIMARY KEY CLUSTERED 
                (
                    [INVENTORY_VALUATION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BUDGET_TRANSFER_DEMAND](
                    [DEMAND_ID] [int] IDENTITY(1,1) NOT NULL,
                    [BUDGET_ID] [int] NULL,
                    [DEMAND_EMP_ID] [int] NULL,
                    [DEMAND_DATE] [datetime] NULL,
                    [DEMAND_NO] [nvarchar](100) NULL,
                    [DEMAND_STAGE] [int] NULL,
                    [DETAIL] [nvarchar](max) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,	
                    [RESPONSIBLE_EMP] [int] NULL,
                    [REFERENCE] [int] [nvarchar](50) NULL,
                CONSTRAINT [PK_BUDGET_TRANSFER_DEMAND_DEMAND_ID] PRIMARY KEY CLUSTERED 
                (
                    [DEMAND_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_PLANS_TEMPLATES](
                    [TEMPLATE_ID] [int] IDENTITY(1,1) NOT NULL,
                    [TEMPLATE_NAME] [nvarchar](150) NULL,
                    [IS_ACTIVE] [int] NULL,
                    [IS_INCOME] [int] NULL,
                    [IS_DEPARTMENT] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                 CONSTRAINT [PK_EXPENSE_PLANS_TEMPLATES_TEMPLATE_ID] PRIMARY KEY CLUSTERED 
                (
                    [TEMPLATE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_PLANS_TEMPLATES_ROWS](
                    [TEMPLATE_ROW_ID] [int] IDENTITY(1,1) NOT NULL,
                    [TEMPLATE_ID] [int] NULL,
                    [RATE] [float] NULL,
                    [EXPENSE_ITEM_ID] [int] NULL,
                    [EXPENSE_CENTER_ID] [int] NULL,
                    [PROMOTION_ID] [int] NULL,
                    [COMPANY_ID] [int] NULL,
                    [COMPANY_PARTNER_ID] [int] NULL,
                    [ASSET_ID] [int] NULL,
                    [PROJECT_ID] [int] NULL,
                    [MEMBER_TYPE] [nvarchar](43) NULL,
                    [DEPARTMENT_ID] [int] NULL,
                    [WORKGROUP_ID] [int] NULL,
                    [SUBSCRIPTION_ID] [int] NULL,
                 CONSTRAINT [PK_EXPENSE_PLANS_TEMPLATES_ROWS_TEMPLATE_ROW_ID] PRIMARY KEY CLUSTERED 
                (
                    [TEMPLATE_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_EXPORTS](
                    [E_ID] [int] IDENTITY(1,1) NOT NULL,
                    [CASH_CODE] [nvarchar](50) NULL,
                    [IS_ACCOUNT] [bit] NULL,
                    [TARGET_SYSTEM] [int] NULL,
                    [PROCESS_TYPE] [int] NULL,
                    [PRODUCT_COUNT] [int] NULL,
                    [FILE_NAME] [nvarchar](50) NULL,
                    [FILE_SIZE] [float] NULL,
                    [PRODUCT_RECORD_DATE] [datetime] NULL,
                    [PRICE_RECORD_DATE] [datetime] NULL,
                    [STARTDATE] [datetime] NULL,
                    [FINISHDATE] [datetime] NULL,
                    [DEPARTMENT_ID] [int] NULL,
                    [DETAIL] [nvarchar](100) NULL,
                    [IS_IPTAL] [int] NULL,
                    [FILE_CONTENT] [nvarchar](max) NULL,
                    [DESTINATION_COMPANY_ID] [int] NULL,
                    [FILE_SERVER_ID] [int] NULL,
                    [IS_PHL] [bit] NULL,
                    [FILE_STAGE] [int] NULL,
                    [FILE_EXPORT_TYPE] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [ACTION_DATE] [datetime] NULL,
                    [IS_DBS] [bit] NULL,
                    [IS_SENT] [bit] NULL,
                    [IS_PRINTED] [bit] NULL,
                 CONSTRAINT [PK_FILE_EXPORTS_E_ID] PRIMARY KEY CLUSTERED 
                (
                    [E_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_IMPORT_BANK_POS_ROWS](
                    [FILE_IMPORT_BANK_POS_ROW_ID] [int] IDENTITY(1,1) NOT NULL,
                    [FILE_IMPORT_ID] [int] NULL,
                    [BANK_TYPE] [int] NULL,
                    [SELLER_CODE] [nvarchar](43) NULL,
                    [TERMINAL_NO] [nvarchar](43) NULL,
                    [VALOR_DATE] [datetime] NULL,
                    [PROCESS_DATE] [datetime] NULL,
                    [POS_PROCESS_TYPE] [nvarchar](43) NULL,
                    [GROSS_TOTAL] [float] NULL,
                    [NET_TOTAL] [float] NULL,
                    [NUMBER_OF_INSTALMENT] [int] NULL,
                    [COMMISSION] [float] NULL,
                    [CARI_TUTAR] [float] NULL,
                    [AWARD] [float] NULL,
                    [CC_REVENUE_ID] [int] NULL,
                    [CC_REVENUE_PERIOD_ID] [int] NULL,
                    [MONEY2_MULTIPLIER] [float] NULL,
                    [IS_CANCEL] [bit] NULL,
                 CONSTRAINT [PK_FILE_IMPORT_BANK_POS_ROWS_FILE_IMPORT_BANK_POS_ROW_ID] PRIMARY KEY CLUSTERED 
                (
                    [FILE_IMPORT_BANK_POS_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_IMPORTS](
                    [I_ID] [int] IDENTITY(1,1) NOT NULL,
                    [CASH_CODE] [nvarchar](50) NULL,
                    [SOURCE_SYSTEM] [int] NULL,
                    [PROCESS_TYPE] [int] NULL,
                    [PRODUCT_COUNT] [int] NULL,
                    [FILE_NAME] [nvarchar](50) NULL,
                    [FILE_SIZE] [float] NULL,
                    [PROBLEMS_COUNT] [int] NULL,
                    [STARTDATE] [datetime] NULL,
                    [FINISHDATE] [datetime] NULL,
                    [DEPARTMENT_ID] [int] NULL,
                    [DEPARTMENT_LOCATION] [int] NULL,
                    [FIS_NUMBER] [nvarchar](50) NULL,
                    [IS_MUHASEBE] [bit] NULL,
                    [INVOICE_ID] [int] NULL,
                    [IMPORTED] [bit] NULL DEFAULT ((0)),
                    [IMPORT_DETAIL] [nvarchar](250) NULL,
                    [FILE_CONTENT] [nvarchar](max) NULL,
                    [SERVER_DATE] [datetime] NULL,
                    [SERVER_ID] [nvarchar](200) NULL,
                    [SERVER_COMPANY] [nvarchar](50) NULL,
                    [PRICE_CATID] [int] NULL,
                    [DESTINATION_COMPANY] [nvarchar](150) NULL,
                    [PROBLEMS_FILE_NAME] [nvarchar](50) NULL,
                    [FILE_SERVER_ID] [int] NULL,
                    [XML_TEMPLATE_ID] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [IS_DBS] [bit] NULL,
                 CONSTRAINT [PK_FILE_IMPORTS_I_ID] PRIMARY KEY CLUSTERED 
                (
                    [I_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_IMPORTS_ROW](
                    [FILE_IMPORTS_ROW_ID] [int] IDENTITY(1,1) NOT NULL,
                    [FILE_IMPORT_ID] [int] NULL,
                    [PRODUCT_ID] [int] NULL,
                    [STOCK_ID] [int] NULL,
                    [STOCK_AMOUNT] [float] NULL,
                    [AMOUNT] [float] NULL,
                    [SPECT_MAIN_ID] [int] NULL,
                    [SHELF_NUMBER] [int] NULL,
                    [DELIVER_DATE] [datetime] NULL,
                    [BARCODE] [nvarchar](50) NULL,
                    [LOT_NO] [nvarchar](50) NULL,
                 CONSTRAINT [PK_FILE_IMPORTS_ROW_FILE_IMPORTS_ROW_ID] PRIMARY KEY CLUSTERED 
                (
                    [FILE_IMPORTS_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_IMPORTS_TOTAL](
                    [FILE_IMPORTS_TOTAL_ID] [int] IDENTITY(1,1) NOT NULL,
                    [FIS_ID] [int] NULL,
                    [FIS_PROCESS_TYPE] [int] NULL,
                    [DEPARTMENT_ID] [int] NULL,
                    [DEPARTMENT_LOCATION] [int] NULL,
                    [PROCESS_DATE] [datetime] NULL,
                    [STOCK_AMOUNT] [float] NULL,
                    [FILE_AMOUNT] [float] NULL,
                    [STOCK_ID] [int] NULL,
                    [PRODUCT_ID] [int] NULL,
                    [SPECT_MAIN_ID] [int] NULL,
                    [SHELF_NUMBER] [int] NULL,
                    [DELIVER_DATE] [datetime] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [LOT_NO] [nvarchar](50) NULL,
                 CONSTRAINT [PK_FILE_IMPORTS_TOTAL_FILE_IMPORTS_TOTAL_ID] PRIMARY KEY CLUSTERED 
                (
                    [FILE_IMPORTS_TOTAL_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_IMPORTS_TOTAL_SAYIMLAR](
                    [FILE_IMPORTS_TOTAL_SAYIM_ID] [int] IDENTITY(1,1) NOT NULL,
                    [DEPARTMENT_ID] [int] NOT NULL,
                    [DEPARTMENT_LOCATION] [int] NULL,
                    [PROCESS_DATE] [datetime] NOT NULL,
                    [IS_INITIALIZED] [bit] NULL,
                    [IS_TOTAL_STOCK_FIS] [bit] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                 CONSTRAINT [PK_FILE_IMPORTS_TOTAL_SAYIMLAR_FILE_IMPORTS_TOTAL_SAYIM_ID] PRIMARY KEY CLUSTERED 
                (
                    [FILE_IMPORTS_TOTAL_SAYIM_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FUND_FLOW_TABLE](
                    [FUND_FLOW_ID] [int] NULL,
                    [CODE] [nvarchar](43) NULL,
                    [NAME] [nvarchar](150) NULL,
                    [ACCOUNT_CODE] [nvarchar](50) NULL,
                    [SIGN] [nvarchar](43) NULL,
                    [BA] [bit] NULL,
                    [VIEW_AMOUNT_TYPE] [int] NULL,
                    [NAME_LANG_NO] [int] NULL
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_ALL_SHIP_TEMP_TABLE_TRANSFER](
                    [TRANSFER_ID] [int] IDENTITY(1,1) NOT NULL,
                    [SHIP_PERIOD] [int] NULL,
                    [SHIP_ID] [int] NULL,
                    [BELGE_NO] [nvarchar](50) NULL,
                    [ISLEM_TARIHI] [datetime] NULL,
                    [COMPANY_ID] [int] NULL,
                    [CONSUMER_ID] [int] NULL,
                    [PARTNER_ID] [int] NULL,
                    [SALE_EMP] [int] NULL,
                    [DELIVER_EMP] [nvarchar](50) NULL,
                    [DEPARTMENT_ID_2] [int] NULL,
                    [LOCATION] [int] NULL,
                    [BELGE_TURU] [nvarchar](100) NOT NULL,
                    [PROCESS_CAT] [int] NULL,
                    [PROJECT_ID] [int] NULL,
                    [SHIP_TYPE] [int] NULL,
                    [SUBSCRIPTION_ID] [int] NULL,
                    [STOCK_CODE] [nvarchar](150) NOT NULL,
                    [PRODUCT_ID] [int] NULL,
                    [STOCK_ID] [int] NULL,
                    [PRODUCT_NAME] [nvarchar](500) NULL,
                    [PAPER_AMOUNT] [float] NULL,
                    [COST_AMOUNT] [float] NULL,
                    [SPECT_MAIN_ID] [int] NULL,
                    [RowNum] [bigint] NULL,
                 CONSTRAINT [PK_GET_ALL_SHIP_TEMP_TABLE_TRANSFER] PRIMARY KEY CLUSTERED 
                (
                    [TRANSFER_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INCOME_TABLE](
                    [INCOME_ID] [int] IDENTITY(1,1) NOT NULL,
                    [CODE] [nvarchar](43) NULL,
                    [NAME] [nvarchar](150) NULL,
                    [ACCOUNT_CODE] [nvarchar](50) NULL,
                    [SIGN] [nvarchar](43) NULL,
                    [BA] [bit] NULL,
                    [VIEW_AMOUNT_TYPE] [int] NULL,
                    [IFRS_CODE] [nvarchar](50) NULL,
                    [NAME_LANG_NO] [int] NULL,
                 CONSTRAINT [PK_INCOME_TABLE_INCOME_ID] PRIMARY KEY CLUSTERED 
                (
                    [INCOME_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INFLATION](
                    [INFLATION_ID] [int] IDENTITY(1,1) NOT NULL,
                    [INFLATION_MONTH] [int] NULL,
                    [INFLATION_PERCENT] [float] NULL,
                    [ACCOUNT_CODE_B] [nvarchar](50) NULL,
                    [ACCOUNT_CODE_A] [nvarchar](50) NULL,
                    [AMOUNT] [float] NULL,
                    [ACTION_DATE] [datetime] NULL,
                    [RECORD_DATE] [datetime] NOT NULL,
                    [RECORD_EMP] [int] NOT NULL,
                    [RECORD_IP] [nvarchar](50) NOT NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                 CONSTRAINT [PK_INFLATION_INFLATION_ID] PRIMARY KEY CLUSTERED 
                (
                    [INFLATION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE](
                    [INVOICE_ID] [int] IDENTITY(1,1) NOT NULL,
                    [INVOICE_MULTI_ID] [int] NULL,
                    [WRK_ID] [nvarchar](43) NULL,
                    [PURCHASE_SALES] [bit] NULL,
                    [INVOICE_CAT] [int] NULL,
                    [INVOICE_DATE] [datetime] NULL,
                    [SHIP_DATE] [datetime] NULL,
                    [SERIAL_NUMBER] [nvarchar](50) NULL,
                    [SERIAL_NO] [nvarchar](50) NULL,
                    [INVOICE_NUMBER] [nvarchar](100) NULL,
                    [COMPANY_ID] [int] NULL,
                    [PARTNER_ID] [int] NULL,
                    [CONSUMER_ID] [int] NULL,
                    [EMPLOYEE_ID] [int] NULL,
                    [DEPARTMENT_LOCATION] [int] NULL,
                    [DEPARTMENT_ID] [int] NULL,
                    [GROSSTOTAL] [float] NULL,
                    [GROSSTOTAL_WITHOUT_ROUND] [float] NULL,
                    [NETTOTAL] [float] NULL,
                    [TAXTOTAL] [float] NULL,
                    [OTV_TOTAL] [float] NULL,
                    [SA_DISCOUNT] [float] NULL,
                    [PAY_METHOD] [int] NULL,
                    [DUE_DATE] [datetime] NULL,
                    [NOTE] [nvarchar](max) NULL,
                    [ORDER_ID] [int] NULL,
                    [OFFER_ID] [int] NULL,
                    [DELIVER_EMP] [nvarchar](50) NULL,
                    [SHIP_METHOD] [int] NULL,
                    [IS_PROCESSED] [bit] NULL DEFAULT ((0)),
                    [IS_CASH] [bit] NULL DEFAULT ((0)),
                    [IS_ACCOUNTED] [bit] NULL DEFAULT ((0)),
                    [CASH_ID] [int] NULL,
                    [KASA_ID] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [SALE_EMP] [int] NULL,
                    [SALE_PARTNER] [int] NULL,
                    [ZONE_ID] [int] NULL,
                    [PROJECT_ID] [int] NULL,
                    [UPD_STATUS] [bit] NULL DEFAULT ((1)),
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [OTHER_MONEY_VALUE] [float] NULL,
                    [PROCESS_CAT] [int] NOT NULL,
                    [IS_WITH_SHIP] [bit] NULL,
                    [STOPAJ] [float] NULL,
                    [STOPAJ_ORAN] [float] NULL,
                    [PRINT_COUNT] [int] NULL,
                    [IS_IPTAL] [bit] NULL DEFAULT ((0)),
                    [ROUND_MONEY] [float] NULL,
                    [IS_ORDERED] [bit] NULL,
                    [REF_NO] [nvarchar](2000) NULL,
                    [IS_COST] [bit] NULL,
                    [GENERAL_PROM_ID] [int] NULL,
                    [GENERAL_PROM_LIMIT] [int] NULL,
                    [GENERAL_PROM_DISCOUNT] [float] NULL,
                    [GENERAL_PROM_AMOUNT] [float] NULL,
                    [FREE_PROM_ID] [int] NULL,
                    [FREE_PROM_LIMIT] [int] NULL,
                    [FREE_PROM_COST] [float] NULL,
                    [FREE_PROM_AMOUNT] [int] NULL,
                    [FREE_PROM_STOCK_ID] [int] NULL,
                    [FREE_STOCK_PRICE] [float] NULL,
                    [FREE_STOCK_MONEY] [nvarchar](43) NULL,
                    [SHIP_ADDRESS] [nvarchar](500) NULL,
                    [SHIP_ADDRESS_ID] [int] NULL,
                    [IS_RETURN] [bit] NULL DEFAULT ((0)),
                    [TEVKIFAT] [bit] NULL DEFAULT ((0)),
                    [TEVKIFAT_ORAN] [float] NULL,
                    [CARD_PAYMETHOD_ID] [int] NULL,
                    [CARD_PAYMETHOD_RATE] [float] NULL,
                    [RESOURCE_ID] [int] NULL,
                    [IMS_CODE_ID] [int] NULL,
                    [CUSTOMER_VALUE_ID] [int] NULL,
                    [STOPAJ_RATE_ID] [int] NULL,
                    [COMMETHOD_ID] [int] NULL,
                    [IS_TAX_OF_OTV] [bit] NULL,
                    [CONSUMER_REFERENCE_CODE] [nvarchar](500) NULL,
                    [EXPENSE_CENTER_ID] [int] NULL,
                    [EXPENSE_ITEM_ID] [int] NULL,
                    [PARTNER_REFERENCE_CODE] [nvarchar](250) NULL,
                    [POS_CASH_ID] [int] NULL,
                    [SALES_CONSUMER_ID] [int] NULL,
                    [SALES_PARTNER_ID] [int] NULL,
                    [SALES_TEAM_ID] [int] NULL,
                    [ADD_FLAG] [bit] NULL,
                    [CARI_ACTION_TYPE] [int] NULL,
                    [IS_ACC_FLAG] [bit] NULL,
                    [CANCEL_TYPE_ID] [int] NULL,
                    [ASSETP_ID] [int] NULL,
                    [ACC_DEPARTMENT_ID] [int] NULL,
                    [PRINT_DATE] [datetime] NULL,
                    [SUBSCRIPTION_ID] [int] NULL,
                    [CITY_ID] [int] NULL,
                    [COUNTY_ID] [int] NULL,
                    [DELIVER_COMP_ID] [int] NULL,
                    [DELIVER_CONS_ID] [int] NULL,
                    [CONTRACT_ID] [int] NULL,
                    [PROGRESS_ID] [int] NULL,
                    [PROFILE_ID] [nvarchar](50) NULL,
                    [FROM_PROGRESS] [bit] NULL,
                    [ACC_TYPE_ID] [int] NULL,
                    [UUID] [nvarchar](50) NULL,
                    [HOBIM_ID] [int] NULL,
                    [IS_PDF] [bit] NULL,
                    [RECORD_CONS] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [TAX_CODE] [nvarchar](20) NULL,
                    [BANK_ACTION_ID] [int] NULL,
                    [BANK_PERIOD_ID] [int] NULL,
                    [TEVKIFAT_ID] [int] NULL,
                    [CREDITCARD_PAYMENT_ID] [int] NULL,
                    [SERVICE_ID] [int] NULL,
                    [IS_CREDIT] [int] NULL,
                    [RELATED_INVOICE_ID] [int] NULL,
                    [IS_RECEIVED_WEBSERVICE] [bit] NULL DEFAULT ((0)),
                    [IS_RATE_EXTRA_COST] [int] NULL,
                    [REALIZATION_DATE] [datetime] NULL,
                    [PROCESS_TIME] [datetime] NULL,
                    [BSMV_TOTAL] [float] NULL,
                    [OIV_TOTAL] [float] NULL,
                    [PROCESS_STAGE] [int] NULL,
                    [VAT_EXCEPTION_ID] [int] NULL,
                    [IS_EXPORT_REGISTRATION] [bit] NULL,
                    [IS_EXPORT_PRODUCT] [bit] NULL,
                    [IS_EARCHIVE] [bit] NULL,
                    [PROCESS_DATE] [datetime] NULL,
                    [BANK_ID] [int] NULL,
                    [IS_BANK] [bit] NULL,
                    [IS_CREDIT_CARD] [bit] NULL,
                    [IS_SUCCESS_CANCEL] [bit] NULL,
                    [PAYMENT_COMPANY_ID] [int] NULL,
                    [IS_CREDITCARD] [int] NULL,
                 CONSTRAINT [PK_INVOICE_INVOICE_ID] PRIMARY KEY CLUSTERED 
                (
                    [INVOICE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]

                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_HISTORY](
                    [INVOICE_HISTORY_ID] [int] IDENTITY(1,1) NOT NULL,
                    [INVOICE_ID] [int] NOT NULL,
                    [INVOICE_MULTI_ID] [int] NULL,
                    [WRK_ID] [nvarchar](43) NULL,
                    [PURCHASE_SALES] [bit] NULL,
                    [INVOICE_CAT] [int] NULL,
                    [INVOICE_DATE] [datetime] NULL,
                    [SHIP_DATE] [datetime] NULL,
                    [SERIAL_NUMBER] [nvarchar](50) NULL,
                    [SERIAL_NO] [nvarchar](50) NULL,
                    [INVOICE_NUMBER] [nvarchar](100) NULL,
                    [COMPANY_ID] [int] NULL,
                    [PARTNER_ID] [int] NULL,
                    [CONSUMER_ID] [int] NULL,
                    [EMPLOYEE_ID] [int] NULL,
                    [DEPARTMENT_LOCATION] [int] NULL,
                    [DEPARTMENT_ID] [int] NULL,
                    [GROSSTOTAL] [float] NULL,
                    [GROSSTOTAL_WITHOUT_ROUND] [float] NULL,
                    [NETTOTAL] [float] NULL,
                    [TAXTOTAL] [float] NULL,
                    [OTV_TOTAL] [float] NULL,
                    [SA_DISCOUNT] [float] NULL,
                    [PAY_METHOD] [int] NULL,
                    [DUE_DATE] [datetime] NULL,
                    [NOTE] [nvarchar](max) NULL,
                    [ORDER_ID] [int] NULL,
                    [OFFER_ID] [int] NULL,
                    [DELIVER_EMP] [nvarchar](50) NULL,
                    [SHIP_METHOD] [int] NULL,
                    [IS_PROCESSED] [bit] NULL,
                    [IS_CASH] [bit] NULL,
                    [IS_ACCOUNTED] [bit] NULL,
                    [CASH_ID] [int] NULL,
                    [KASA_ID] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [SALE_EMP] [int] NULL,
                    [SALE_PARTNER] [int] NULL,
                    [ZONE_ID] [int] NULL,
                    [PROJECT_ID] [int] NULL,
                    [UPD_STATUS] [bit] NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [OTHER_MONEY_VALUE] [float] NULL,
                    [PROCESS_CAT] [int] NOT NULL,
                    [IS_WITH_SHIP] [bit] NULL,
                    [STOPAJ] [float] NULL,
                    [STOPAJ_ORAN] [float] NULL,
                    [PRINT_COUNT] [int] NULL,
                    [IS_IPTAL] [bit] NULL,
                    [ROUND_MONEY] [float] NULL,
                    [IS_ORDERED] [bit] NULL,
                    [REF_NO] [nvarchar](2000) NULL,
                    [IS_COST] [bit] NULL,
                    [GENERAL_PROM_ID] [int] NULL,
                    [GENERAL_PROM_LIMIT] [int] NULL,
                    [GENERAL_PROM_DISCOUNT] [float] NULL,
                    [GENERAL_PROM_AMOUNT] [float] NULL,
                    [FREE_PROM_ID] [int] NULL,
                    [FREE_PROM_LIMIT] [int] NULL,
                    [FREE_PROM_COST] [float] NULL,
                    [FREE_PROM_AMOUNT] [int] NULL,
                    [FREE_PROM_STOCK_ID] [int] NULL,
                    [FREE_STOCK_PRICE] [float] NULL,
                    [FREE_STOCK_MONEY] [nvarchar](43) NULL,
                    [SHIP_ADDRESS] [nvarchar](500) NULL,
                    [SHIP_ADDRESS_ID] [int] NULL,
                    [IS_RETURN] [bit] NULL,
                    [TEVKIFAT] [bit] NULL,
                    [TEVKIFAT_ORAN] [float] NULL,
                    [CARD_PAYMETHOD_ID] [int] NULL,
                    [CARD_PAYMETHOD_RATE] [float] NULL,
                    [RESOURCE_ID] [int] NULL,
                    [IMS_CODE_ID] [int] NULL,
                    [CUSTOMER_VALUE_ID] [int] NULL,
                    [STOPAJ_RATE_ID] [int] NULL,
                    [COMMETHOD_ID] [int] NULL,
                    [IS_TAX_OF_OTV] [bit] NULL,
                    [CONSUMER_REFERENCE_CODE] [nvarchar](500) NULL,
                    [EXPENSE_CENTER_ID] [int] NULL,
                    [EXPENSE_ITEM_ID] [int] NULL,
                    [PARTNER_REFERENCE_CODE] [nvarchar](250) NULL,
                    [POS_CASH_ID] [int] NULL,
                    [SALES_CONSUMER_ID] [int] NULL,
                    [SALES_PARTNER_ID] [int] NULL,
                    [SALES_TEAM_ID] [int] NULL,
                    [ADD_FLAG] [bit] NULL,
                    [CARI_ACTION_TYPE] [int] NULL,
                    [IS_ACC_FLAG] [bit] NULL,
                    [CANCEL_TYPE_ID] [int] NULL,
                    [ASSETP_ID] [int] NULL,
                    [ACC_DEPARTMENT_ID] [int] NULL,
                    [PRINT_DATE] [datetime] NULL,
                    [SUBSCRIPTION_ID] [int] NULL,
                    [CITY_ID] [int] NULL,
                    [COUNTY_ID] [int] NULL,
                    [DELIVER_COMP_ID] [int] NULL,
                    [DELIVER_CONS_ID] [int] NULL,
                    [CONTRACT_ID] [int] NULL,
                    [PROGRESS_ID] [int] NULL,
                    [PROFILE_ID] [nvarchar](50) NULL,
                    [FROM_PROGRESS] [bit] NULL,
                    [ACC_TYPE_ID] [int] NULL,
                    [UUID] [nvarchar](50) NULL,
                    [HOBIM_ID] [int] NULL,
                    [IS_PDF] [bit] NULL,
                    [RECORD_CONS] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [TAX_CODE] [nvarchar](20) NULL,
                    [BANK_ACTION_ID] [int] NULL,
                    [BANK_PERIOD_ID] [int] NULL,
                    [TEVKIFAT_ID] [int] NULL,
                    [CREDITCARD_PAYMENT_ID] [int] NULL,
                    [SERVICE_ID] [int] NULL,
                    [IS_CREDIT] [int] NULL,
                    [RELATED_INVOICE_ID] [int] NULL,
                    [IS_RECEIVED_WEBSERVICE] [bit] NULL,
                    [IS_RATE_EXTRA_COST] [int] NULL,
                    [REALIZATION_DATE] [datetime] NULL,
                    [PROCESS_TIME] [datetime] NULL,
                    [BSMV_TOTAL] [float] NULL,
                    [OIV_TOTAL] [float] NULL,
                    [PROCESS_STAGE] [int] NULL,
                    [IS_EXPORT_REGISTRATION] [bit] NULL,
                    [IS_EXPORT_PRODUCT] [bit] NULL,
                    [VAT_EXCEPTION_ID] [int] NULL,
                    [PROCESS_DATE] [datetime] NULL,
                    [BANK_ID] [int] NULL,
                CONSTRAINT [PK_INVOICE_HISTORY_INVOICE_HISTORY_ID] PRIMARY KEY CLUSTERED 
                (
                    [INVOICE_HISTORY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]

                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GENEL_VIRMAN](
                    [VIRMAN_ID] [int] IDENTITY(1,1) NOT NULL,
                    [VIRMAN_NO] [nvarchar](50) NOT NULL,
                    [VIRMAN_DETAIL] [nvarchar](max) NULL,
                    [VIRMAN_DATE] [date] NOT NULL,
                    [VIRMAN_EMP] [int] NULL,
                    [OTHER_MONEY] [nvarchar](50) NULL,
                    [RECORD_DATE] [date] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [PROCESS_CAT] [int] NOT NULL,
                    [PROCESS_TYPE] [int] NOT NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_DATE] [date] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [PROCESS_STAGE] [int] NULL
                ) ON [PRIMARY]

                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VIRMAN_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL,
                    [ACTION_MONEY_ID] [int] IDENTITY(1,1) NOT NULL
                ) ON [PRIMARY]

                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VIRMAN_ROWS](
                    [VIRMAN_ROW_ID] [int] IDENTITY(1,1) NOT NULL,
                    [VIRMAN_ID] [int] NOT NULL,
                    [BA] [bit] NOT NULL,
                    [BANK_ID] [int] NULL,
                    [CASH_ID] [int] NULL,
                    [COMPANY_ID] [int] NULL,
                    [EMPLOYEE_ID] [int] NULL,
                    [CH_ACCOUNT_CODE] [nvarchar](50) NULL,
                    [ACTION_VALUE] [float] NULL,
                    [ACTION_CURRENCY_ID] [nvarchar](50) NULL,
                    [ACTION_DATE] [date] NULL,
                    [ACTION_DETAIL] [nvarchar](max) NULL,
                    [OTHER_CASH_ACT_VALUE] [float] NULL,
                    [OTHER_MONEY] [nvarchar](50) NULL,
                    [PROJECT_ID] [int] NULL,
                    [ACCOUNT_CODE] [nvarchar](50) NULL,
                    [CENTER_ID] [int] NULL,
                    [CENTER_NAME] [nvarchar](50) NULL,
                    [ITEM_ID] [int] NULL,
                    [ITEM_NAME] [nvarchar](50) NULL,
                    [QUANTITY] [float] NULL,
                    [ACC_TYPE_ID] [int] NULL,
                    [CONSUMER_ID] [int] NULL
                ) ON [PRIMARY]

                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_LETTER]
                (
                    [CARI_LETTER_ID] [int] IDENTITY(1,1) NOT NULL,
                    [OUR_COMPANY_ID] [int] NULL,
                    [PERIOD_ID] [int] NULL,
                    [START_DATE] [datetime] NULL,
                    [FINISH_DATE] [datetime] NULL,
                    [KEYWORD] [nvarchar](MAX) NULL,
                    [SEARCH_ORDER_ID] [int] NULL,
                    [SEARCH_TYPE_ID] [int] NULL,
                    [IS_ZERO] [bit] NULL,
                    [IS_ACTION] [bit] NULL,
                    [IS_OPEN] [bit] NULL,
                    [BABS_AMOUNT] [float] NULL,
                    [IS_CH] [bit] NULL,
                    [IS_CR] [bit] NULL,
                    [IS_BA] [bit] NULL,
                    [IS_BS] [bit] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](40) NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](40) NULL
                ) ON [PRIMARY]


                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_LETTER_ROW]
                (
                    [CARI_LETTER_ID] [int] NULL,
                    [CARI_LETTER_ROW_ID] [int] IDENTITY(1,1) NOT NULL,
                    [UNIQUE_ID] [nvarchar](500) NULL,
                    [COMPANY_ID] [int] NULL,
                    [START_DATE] [datetime] NULL,
                    [FINISH_DATE] [datetime] NULL,
                    [IS_CH_AMOUNT] [float] NULL,
                    [IS_CR_AMOUNT] [float] NULL,
                    [IS_BA_TOTAL] [int] NULL,
                    [IS_BA_AMOUNT] [float] NULL,
                    [IS_BS_TOTAL] [int] NULL,
                    [IS_BS_AMOUNT] [float] NULL,
                    [CH_EMAIL] [nvarchar](500) NULL,
                    [AS_EMAIL] [nvarchar](500) NULL,
                    [IS_SEND] [int] NULL,
                    [IS_SEND_DATE] [datetime] NULL,
                    [IS_SEND_IP] [nvarchar](40) NULL,
                    [ACCEPT_USER] [int] NULL,
                    [ACCEPT_DATE] [datetime] NULL,
                    [ACCEPT_NAME] [nvarchar](500) NULL,
                    [ACCEPT_DETAIL] [nvarchar](MAX) NULL,
                    [ACCEPT_TYPE] [int] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](40) NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](40) NULL,
                    [IS_BS_ACCEPT] [int] NULL,
                    [ACCEPT_TOTAL] [int] NULL,
                    [ACCEPT_AMOUNT] [float] NULL,
                    [ACCOUNT_CODE] [nvarchar](500) NULL,
                    [ACCOUNT_AMOUNT] [float] NULL,
                    [ACCEPT_STATUS] [int] NULL,
                    [ACCEPT_IP] [nvarchar](40) NULL,
                    [CARI_STATUS] [int] NULL,
                    [AMOUNT_OTHER] [float] NULL,
                    [OTHER_MONEY] [nvarchar](50) NULL
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_CASH_POS](
                    [INVOICE_CASH_ID] [int] IDENTITY(1,1) NOT NULL,
                    [INVOICE_ID] [int] NOT NULL,
                    [CASH_ID] [int] NULL,
                    [KASA_ID] [int] NULL,
                    [POS_ID] [int] NULL,
                    [POS_ACTION_ID] [int] NULL,
                    [POS_PERIOD_ID] [int] NULL,
                 CONSTRAINT [PK_INVOICE_CASH_POS_INVOICE_CASH_ID] PRIMARY KEY CLUSTERED 
                (
                    [INVOICE_CASH_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_CONTRACT_COMPARISON](
                    [MAIN_INVOICE_ID] [int] NULL,
                    [MAIN_INVOICE_ROW_ID] [int] NULL,
                    [MAIN_INVOICE_DATE] [datetime] NULL,
                    [MAIN_INVOICE_NUMBER] [nvarchar](50) NULL,
                    [COMPANY_ID] [int] NULL,
                    [DIFF_INVOICE_ID] [int] NULL,
                    [MAIN_PRODUCT_ID] [int] NULL,
                    [MAIN_STOCK_ID] [int] NULL,
                    [DIFF_AMOUNT] [float] NULL,
                    [PRODUCT_ID] [int] NULL,
                    [IS_DIFF_PRICE] [bit] NULL,
                    [IS_DIFF_DISCOUNT] [bit] NULL,
                    [CONTRACT_COMPARISON_ROW_ID] [int] IDENTITY(1,1) NOT NULL,
                    [IS_AMOUNT] [bit] NULL,
                    [TAX] [float] NULL,
                    [COST_ID] [int] NULL,
                    [COST_DATE] [datetime] NULL,
                    [AMOUNT] [float] NULL,
                    [DIFF_RATE] [float] NULL,
                    [DIFF_AMOUNT_OTHER] [float] NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [DIFF_TYPE] [int] NULL,
                    [DEPARTMENT_ID] [int] NULL,
                    [LOCATION_ID] [int] NULL,
                    [INVOICE_TYPE] [bit] NULL,
                    [CONSUMER_ID] [int] NULL,
                    [DUE_DIFF_ID] [int] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [WRK_ROW_RELATION_ID] [nvarchar](250) NULL,
                    [STAGE_ID] [bit] NULL,
                    [NOTE] [nvarchar](50) NULL,
                 CONSTRAINT [PK_INVOICE_CONTRACT_COMPARISON_CONTRACT_COMPARISON_ROW_ID] PRIMARY KEY CLUSTERED 
                (
                    [CONTRACT_COMPARISON_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_CONTROL](
                    [INVOICE_CONTROL_ID] [int] IDENTITY(1,1) NOT NULL,
                    [INVOICE_ID] [int] NULL,
                    [INVOICE_NUMBER] [nvarchar](50) NULL,
                    [CONTROL_INVOICE_ID] [int] NULL,
                    [PROCESS_TYPE] [int] NULL,
                    [CONSUMER_ID] [int] NULL,
                    [COMPANY_ID] [int] NULL,
                    [PURCHASE_SALES] [int] NULL,
                    [IS_CONTROL] [bit] NULL,
                    [IS_PROCESSED] [bit] NULL,
                    [IS_BILLED] [bit] NULL,
                    [IS_ORDERED] [bit] NULL,
                    [RETURN_PRODUCT] [int] NULL,
                    [RETURN_DATE] [datetime] NULL,
                    [RETURN_MONEY_VALUE] [float] NULL,
                    [MONEY] [nvarchar](43) NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [OTHER_MONEY_VALUE] [float] NULL,
                    [VALID_EMP] [int] NULL,
                    [PERIOD_ID] [int] NULL,
                    [COST_ID] [int] NULL,
                    [PERIOD_TYPE_ID] [int] NULL,
                    [ACTION_TYPE_ID] [int] NULL,
                    [DUE_DIFF_ID] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                 CONSTRAINT [PK_INVOICE_CONTROL_INVOICE_CONTROL_ID] PRIMARY KEY CLUSTERED 
                (
                    [INVOICE_CONTROL_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_CONTROL_CONTRACT_ACTIONS](
                    [CONTRACT_ACTION_ID] [int] IDENTITY(1,1) NOT NULL,
                    [INVOICE_CONTROL_ID] [int] NULL,
                    [ACTION_ID] [int] NULL,
                 CONSTRAINT [PK_INVOICE_CONTROL_CONTRACT_ACTIONS] PRIMARY KEY CLUSTERED 
                (
                    [CONTRACT_ACTION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_COST](
                    [INVOICE_COST_ID] [int] IDENTITY(1,1) NOT NULL,
                    [INVOICE_ID] [int] NULL,
                    [INVOICE_NUMBER] [nvarchar](50) NULL,
                    [DETAIL] [nvarchar](max) NULL,
                    [INVOICE_COST] [float] NULL,
                    [INVOICE_COST_MONEY] [nvarchar](43) NULL,
                    [INVOICE_OTHER_COST] [float] NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [FOREIGN_MONEY] [nvarchar](43) NULL,
                    [FOREIGN_MONEY_COST] [float] NULL,
                    [QUANTITY] [float] NULL,
                    [PURCHASE_SALES] [bit] NULL,
                    [ROW_PAPER_NO] [nvarchar](50) NULL,
                    [DOCUMENT_TYPE_ID] [int] NULL,
                    [EXPENSE_ITEM_ID] [int] NULL,
                    [SHIP_ID] [int] NULL,
                    [SHIP_NUMBER] [nvarchar](50) NULL,
                    [DISTRIBUTE_TYPE] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [ACCOUNT_CODE] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [PROCESS_CAT] [int] NULL,
                    [PROCESS_TYPE] [int] NULL,
                    [TAX_TYPE] [int] NULL,
                    [COMPANY_ID] [int] NULL,
                    [EMPLOYEE_ID] [int] NULL,
                    [CONSUMER_ID] [int] NULL,
                 CONSTRAINT [PK_INVOICE_COST_INVOICE_COST_ID] PRIMARY KEY CLUSTERED 
                (
                    [INVOICE_COST_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_COST_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] IDENTITY(1,1) NOT NULL,
                    [INVOICE_ID] [int] NULL,
                    [SHIP_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL,
                 CONSTRAINT [PK_INVOICE_COST_MONEY_ACTION_ID] PRIMARY KEY CLUSTERED 
                (
                    [ACTION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_GROUP_COMP_INVOICE](
                    [INVOICE_ID] [int] NULL,
                    [PERIOD_ID] [int] NULL,
                    [REACTION_INVOICE_ID] [int] NULL
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_INFO_PLUS](
                    [INFO_ID] [int] IDENTITY(1,1) NOT NULL,
                    [INVOICE_ID] [int] NULL,
                    [PROPERTY1] [nvarchar](500) NULL,
                    [PROPERTY2] [nvarchar](500) NULL,
                    [PROPERTY3] [nvarchar](500) NULL,
                    [PROPERTY4] [nvarchar](500) NULL,
                    [PROPERTY5] [nvarchar](500) NULL,
                    [PROPERTY6] [nvarchar](500) NULL,
                    [PROPERTY7] [nvarchar](500) NULL,
                    [PROPERTY8] [nvarchar](500) NULL,
                    [PROPERTY9] [nvarchar](500) NULL,
                    [PROPERTY10] [nvarchar](500) NULL,
                    [PROPERTY11] [nvarchar](500) NULL,
                    [PROPERTY12] [nvarchar](500) NULL,
                    [PROPERTY13] [nvarchar](500) NULL,
                    [PROPERTY14] [nvarchar](500) NULL,
                    [PROPERTY15] [nvarchar](500) NULL,
                    [PROPERTY16] [nvarchar](500) NULL,
                    [PROPERTY17] [nvarchar](500) NULL,
                    [PROPERTY18] [nvarchar](500) NULL,
                    [PROPERTY19] [nvarchar](500) NULL,
                    [PROPERTY20] [nvarchar](500) NULL,
                    [PROPERTY21] [nvarchar](500) NULL,
                    [PROPERTY22] [nvarchar](500) NULL,
                    [PROPERTY23] [nvarchar](500) NULL,
                    [PROPERTY24] [nvarchar](500) NULL,
                    [PROPERTY25] [nvarchar](500) NULL,
                    [PROPERTY26] [nvarchar](500) NULL,
                    [PROPERTY27] [nvarchar](500) NULL,
                    [PROPERTY28] [nvarchar](500) NULL,
                    [PROPERTY29] [nvarchar](500) NULL,
                    [PROPERTY30] [nvarchar](500) NULL,
                    [PROPERTY31] [nvarchar](500) NULL,
                    [PROPERTY32] [nvarchar](500) NULL,
                    [PROPERTY33] [nvarchar](500) NULL,
                    [PROPERTY34] [nvarchar](500) NULL,
                    [PROPERTY35] [nvarchar](500) NULL,
                    [PROPERTY36] [nvarchar](500) NULL,
                    [PROPERTY37] [nvarchar](500) NULL,
                    [PROPERTY38] [nvarchar](500) NULL,
                    [PROPERTY39] [nvarchar](500) NULL,
                    [PROPERTY40] [nvarchar](500) NULL,
                    [COOKIE_NAME] [nvarchar](250) NULL,
                    [RECORD_GUEST] [bit] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                 CONSTRAINT [PK_INVOICE_INFO_PLUS_INFO_ID] PRIMARY KEY CLUSTERED 
                (
                    [INFO_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_INFO_PLUS_HISTORY](
                    [INFO_ID_HIST] [int] IDENTITY(1,1) NOT NULL,
                    [INFO_ID] [int] NOT NULL,
                    [INVOICE_ID] [int] NULL,
                    [PROPERTY1] [nvarchar](500) NULL,
                    [PROPERTY2] [nvarchar](500) NULL,
                    [PROPERTY3] [nvarchar](500) NULL,
                    [PROPERTY4] [nvarchar](500) NULL,
                    [PROPERTY5] [nvarchar](500) NULL,
                    [PROPERTY6] [nvarchar](500) NULL,
                    [PROPERTY7] [nvarchar](500) NULL,
                    [PROPERTY8] [nvarchar](500) NULL,
                    [PROPERTY9] [nvarchar](500) NULL,
                    [PROPERTY10] [nvarchar](500) NULL,
                    [PROPERTY11] [nvarchar](500) NULL,
                    [PROPERTY12] [nvarchar](500) NULL,
                    [PROPERTY13] [nvarchar](500) NULL,
                    [PROPERTY14] [nvarchar](500) NULL,
                    [PROPERTY15] [nvarchar](500) NULL,
                    [PROPERTY16] [nvarchar](500) NULL,
                    [PROPERTY17] [nvarchar](500) NULL,
                    [PROPERTY18] [nvarchar](500) NULL,
                    [PROPERTY19] [nvarchar](500) NULL,
                    [PROPERTY20] [nvarchar](500) NULL,
                    [PROPERTY21] [nvarchar](500) NULL,
                    [PROPERTY22] [nvarchar](500) NULL,
                    [PROPERTY23] [nvarchar](500) NULL,
                    [PROPERTY24] [nvarchar](500) NULL,
                    [PROPERTY25] [nvarchar](500) NULL,
                    [PROPERTY26] [nvarchar](500) NULL,
                    [PROPERTY27] [nvarchar](500) NULL,
                    [PROPERTY28] [nvarchar](500) NULL,
                    [PROPERTY29] [nvarchar](500) NULL,
                    [PROPERTY30] [nvarchar](500) NULL,
                    [PROPERTY31] [nvarchar](500) NULL,
                    [PROPERTY32] [nvarchar](500) NULL,
                    [PROPERTY33] [nvarchar](500) NULL,
                    [PROPERTY34] [nvarchar](500) NULL,
                    [PROPERTY35] [nvarchar](500) NULL,
                    [PROPERTY36] [nvarchar](500) NULL,
                    [PROPERTY37] [nvarchar](500) NULL,
                    [PROPERTY38] [nvarchar](500) NULL,
                    [PROPERTY39] [nvarchar](500) NULL,
                    [PROPERTY40] [nvarchar](500) NULL,
                    [COOKIE_NAME] [nvarchar](250) NULL,
                    [RECORD_GUEST] [bit] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                 CONSTRAINT [PK_INVOICE_INFO_PLUS_HISTORY_INFO_ID_HIST] PRIMARY KEY CLUSTERED 
                (
                    [INFO_ID_HIST] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL,
                    [ACTION_MONEY_ID] [int] IDENTITY(1,1) NOT NULL,
                CONSTRAINT [PK_INVOICE_MONEY] PRIMARY KEY CLUSTERED 
                (
                    [ACTION_MONEY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_MULTI](
                    [INVOICE_MULTI_ID] [int] IDENTITY(1,1) NOT NULL,
                    [WRK_ID] [nvarchar](43) NULL,
                    [START_DATE] [datetime] NULL,
                    [FINISH_DATE] [datetime] NULL,
                    [INVOICE_DATE] [datetime] NOT NULL,
                    [PROCESS_CAT] [int] NULL,
                    [DEPARTMENT_ID] [int] NULL,
                    [PAY_METHOD] [int] NULL,
                    [CARD_PAYMETHOD] [int] NULL,
                    [IS_GROUP_INVOICE] [bit] NULL DEFAULT ((0)),
                    [IS_FROM_REPORT] [bit] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [HOBIM_ID] [int] NULL,
                    [IS_EINVOICE] [bit] NULL DEFAULT ((0)),
                 CONSTRAINT [PK_INVOICE_MULTI_INVOICE_MULTI_ID] PRIMARY KEY CLUSTERED 
                (
                    [INVOICE_MULTI_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_MULTILEVEL_PAYMENT](
                    [INV_PAYMENT_ID] [int] IDENTITY(1,1) NOT NULL,
                    [PROCESS_TYPE] [int] NULL,
                    [PROCESS_CAT_ID] [int] NULL,
                    [PAY_AMOUNT] [float] NULL,
                    [STOPPAGE_AMOUNT] [float] NULL,
                    [ACTION_DATE] [datetime] NULL,
                    [PAYMENT_DATE] [datetime] NULL,
                    [CAMPAIGN_ID] [int] NULL,
                    [STOPPAGE_RATE_ID] [int] NULL,
                    [EXPENSE_CENTER_ID] [int] NULL,
                    [EXPENSE_ITEM_ID] [int] NULL,
                    [ACCOUNT_ID] [int] NULL,
                    [PREMIUM_TYPE] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [int] NULL,
                 CONSTRAINT [PK_INVOICE_MULTILEVEL_PAYMENT_INV_PAYMENT_ID] PRIMARY KEY CLUSTERED 
                (
                    [INV_PAYMENT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_MULTILEVEL_PAYMENT_ROWS](
                    [INV_PAYMENT_ROW_ID] [int] IDENTITY(1,1) NOT NULL,
                    [INV_PAYMENT_ID] [int] NULL,
                    [INV_PREMIUM_ID] [int] NULL,
                    [CONSUMER_ID] [int] NULL,
                    [PAY_AMOUNT] [float] NULL,
                    [STOPPAGE_AMOUNT] [float] NULL,
                    [CARI_ACTION_ID] [int] NULL,
                    [BANK_ORDER_ID] [int] NULL,
                 CONSTRAINT [PK_INVOICE_MULTILEVEL_PAYMENT_ROWS_INV_PAYMENT_ROW_ID] PRIMARY KEY CLUSTERED 
                (
                    [INV_PAYMENT_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_MULTILEVEL_PREMIUM](
                    [INVOICE_MULTILEVEL_PREMIUM_ID] [int] IDENTITY(1,1) NOT NULL,
                    [INVOICE_ID] [int] NULL,
                    [CONSUMER_ID] [int] NULL,
                    [CAMPAIGN_ID] [int] NULL,
                    [CONSUMER_REFERENCE_CODE] [nvarchar](250) NULL,
                    [PREMIUM_LINE] [int] NULL,
                    [PREMIUM_RATE] [float] NULL,
                    [PREMIUM_SYSTEM_TOTAL] [float] NULL,
                    [PREMIUM_SYSTEM_MONEY] [nvarchar](43) NULL,
                    [INVOICE_TOTAL] [float] NULL,
                    [PREMIUM_DATE] [datetime] NULL,
                    [PREMIUM_STATUS] [bit] NULL,
                    [REF_CONSUMER_ID] [int] NULL,
                    [PREMIUM_TYPE] [int] NULL,
                 CONSTRAINT [PK_INVOICE_MULTILEVEL_PREMIUM_INVOICE_MULTILEVEL_PREMIUM_ID] PRIMARY KEY CLUSTERED 
                (
                    [INVOICE_MULTILEVEL_PREMIUM_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_MULTILEVEL_SALES](
                    [INVOICE_MULTILEVEL_SALE_ID] [int] IDENTITY(1,1) NOT NULL,
                    [INVOICE_ID] [int] NULL,
                    [INVOICE_CAT] [int] NULL,
                    [REF_CONSUMER_ID] [int] NULL,
                    [CONSUMER_ID] [int] NULL,
                    [GROSSTOTAL] [float] NULL,
                    [NETTOTAL] [float] NULL,
                    [SALE_STAGE] [int] NULL,
                    [INVOICE_DATE] [datetime] NULL,
                    [INV_GROSSTOTAL] [float] NULL,
                    [INV_NETTOTAL] [float] NULL,
                 CONSTRAINT [PK_INVOICE_MULTILEVEL_SALES_INVOICE_MULTILEVEL_SALE_ID] PRIMARY KEY CLUSTERED 
                (
                    [INVOICE_MULTILEVEL_SALE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_PURSUIT_PLUS](
                    [INVOICE_PLUS_ID] [int] IDENTITY(1,1) NOT NULL,
                    [INVOICE_ID] [int] NULL,
                    [PLUS_DATE] [datetime] NULL,
                    [COMMETHOD_ID] [int] NULL,
                    [EMPLOYEE_ID] [int] NULL,
                    [PLUS_CONTENT] [nvarchar](max) NULL,
                    [ORDER_ZONE] [int] NULL,
                    [MAIL_SENDER] [nvarchar](250) NULL,
                    [PLUS_SUBJECT] [nvarchar](100) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                 CONSTRAINT [PK_INVOICE_PURSUIT_PLUS_INVOICE_PLUS_ID] PRIMARY KEY CLUSTERED 
                (
                    [INVOICE_PLUS_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_ROW](
                    [INVOICE_ID] [int] NOT NULL,
                    [INVOICE_ROW_ID] [int] IDENTITY(1,1) NOT NULL,
                    [PURCHASE_SALES] [bit] NULL,
                    [STOCK_ID] [int] NULL,
                    [DESCRIPTION] [nvarchar](100) NULL,
                    [AMOUNT] [float] NULL,
                    [PRICE] [float] NULL,
                    [PRICE_OTHER] [float] NULL,
                    [UNIT] [nvarchar](50) NULL,
                    [UNIT_ID] [int] NULL,
                    [COST_ID] [int] NULL,
                    [COST_PRICE] [float] NULL,
                    [MARGIN] [float] NULL,
                    [EXTRA_COST] [float] NULL,
                    [DISCOUNTTOTAL] [float] NULL,
                    [GROSSTOTAL] [float] NULL,
                    [NETTOTAL] [float] NULL,
                    [TAXTOTAL] [float] NULL,
                    [ORDER_ID] [int] NULL,
                    [PAY_METHOD] [int] NULL,
                    [DUE_DATE] [int] NULL,
                    [PROM_ID] [int] NULL,
                    [NAME_PRODUCT] [nvarchar](500) NULL,
                    [PRODUCT_ID] [int] NULL,
                    [TAX] [float] NULL,
                    [DISCOUNT1] [float] NULL,
                    [DISCOUNT2] [float] NULL,
                    [DISCOUNT3] [float] NULL,
                    [DISCOUNT4] [float] NULL,
                    [DISCOUNT5] [float] NULL,
                    [DISCOUNT6] [float] NULL DEFAULT ((0)),
                    [DISCOUNT7] [float] NULL DEFAULT ((0)),
                    [DISCOUNT8] [float] NULL DEFAULT ((0)),
                    [DISCOUNT9] [float] NULL DEFAULT ((0)),
                    [DISCOUNT10] [float] NULL DEFAULT ((0)),
                    [DELIVER_DATE] [datetime] NULL,
                    [DELIVER_DEPT] [int] NULL,
                    [DELIVER_LOC] [int] NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [OTHER_MONEY_VALUE] [float] NULL,
                    [OTHER_MONEY_GROSS_TOTAL] [float] NULL,
                    [SPECT_VAR_ID] [int] NULL,
                    [SPECT_VAR_NAME] [nvarchar](500) NULL,
                    [LOT_NO] [nvarchar](100) NULL,
                    [DARA] [float] NULL,
                    [SHIP_ID] [int] NULL,
                    [DARALI] [float] NULL,
                    [PROM_COMISSION] [float] NULL,
                    [PROM_COST] [float] NULL,
                    [DISCOUNT_COST] [float] NULL,
                    [IS_PROMOTION] [bit] NULL,
                    [PROM_STOCK_ID] [int] NULL,
                    [IS_COMMISSION] [bit] NULL,
                    [UNIQUE_RELATION_ID] [nvarchar](100) NULL,
                    [PRODUCT_NAME2] [nvarchar](650) NULL,
                    [AMOUNT2] [float] NULL,
                    [UNIT2] [nvarchar](50) NULL,
                    [EXTRA_PRICE] [float] NULL,
                    [SHELF_NUMBER] [int] NULL,
                    [PRODUCT_MANUFACT_CODE] [nvarchar](50) NULL,
                    [INVENTORY_ID] [int] NULL,
                    [EXTRA_PRICE_TOTAL] [float] NULL,
                    [OTV_ORAN] [float] NULL,
                    [OTVTOTAL] [float] NULL,
                    [SHIP_PERIOD_ID] [int] NULL DEFAULT ((17)),
                    [BASKET_EXTRA_INFO_ID] [int] NULL,
                    [SELECT_INFO_EXTRA] [int] NULL,
                    [DETAIL_INFO_EXTRA] [nvarchar](500) NULL,
                    [PROM_RELATION_ID] [nvarchar](100) NULL,
                    [BASKET_EMPLOYEE_ID] [int] NULL,
                    [LIST_PRICE] [float] NULL,
                    [NUMBER_OF_INSTALLMENT] [int] NULL,
                    [KARMA_PRODUCT_ID] [int] NULL,
                    [EXTRA_PRICE_OTHER_TOTAL] [float] NULL,
                    [PRICE_CAT] [int] NULL,
                    [EK_TUTAR_PRICE] [float] NULL,
                    [CATALOG_ID] [int] NULL,
                    [WRK_ROW_ID] [nvarchar](40) NULL,
                    [WRK_ROW_RELATION_ID] [nvarchar](40) NULL,
                    [RELATED_ACTION_ID] [int] NULL,
                    [RELATED_ACTION_TABLE] [nvarchar](43) NULL,
                    [DEPTH_VALUE] [float] NULL,
                    [WIDTH_VALUE] [float] NULL,
                    [HEIGHT_VALUE] [float] NULL,
                    [ROW_PROJECT_ID] [int] NULL,
                    [ROW_PAYMETHOD_ID] [int] NULL,
                    [PBS_ID] [int] NULL,
                    [ROW_WORK_ID] [int] NULL,
                    [ROW_EXP_CENTER_ID] [int] NULL,
                    [ROW_EXP_ITEM_ID] [int] NULL,
                    [ROW_ACC_CODE] [nvarchar](50) NULL,
                    [REASON_NAME] [nvarchar](250) NULL,
                    [REASON_CODE] [nvarchar](10) NULL,
                    [DELIVERY_CONDITION] [nvarchar](50) NULL,
                    [CONTAINER_TYPE] [nvarchar](50) NULL,
                    [CONTAINER_NUMBER] [nvarchar](50) NULL,
                    [CONTAINER_QUANTITY] [nvarchar](50) NULL,
                    [DELIVERY_COUNTRY] [nvarchar](50) NULL,
                    [DELIVERY_CITY] [nvarchar](50) NULL,
                    [DELIVERY_COUNTY] [nvarchar](50) NULL,
                    [DELIVERY_TYPE] [nvarchar](50) NULL,
                    [GTIP_NUMBER] [nvarchar](50) NULL,
                    [ACTIVITY_TYPE_ID] [int] NULL,
                    [SUBSCRIPTION_ID] [int] NULL,
                    [ASSETP_ID] [int] NULL,
                    [BSMV_RATE] [float] NULL,
                    [BSMV_AMOUNT] [float] NULL,
                    [BSMV_CURRENCY] [float] NULL,
                    [OIV_RATE] [float] NULL,
                    [OIV_AMOUNT] [float] NULL,
                    [TEVKIFAT_RATE] [float] NULL,
                    [TEVKIFAT_AMOUNT] [float] NULL,
                    [TEVKIFAT_ID] [int] NULL,
                    [OTV_TYPE] [float] NULL,
                    [OTV_DISCOUNT] [float] NULL,
                    [IS_SUCCESS] [bit] NULL,
                    [WEIGHT] [float] NULL,
                    [SPECIFIC_WEIGHT] [float] NULL,
                    [VOLUME] [float] NULL,
                CONSTRAINT [PK_INVOICE_ROW_INVOICE_ROW_ID] PRIMARY KEY CLUSTERED 
                (
                    [INVOICE_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                CREATE TABLE [INVOICE_ROW_HISTORY](
                    [INVOICE_ROW_HISTORY_ID] [int] IDENTITY(1,1) NOT NULL,
                    [INVOICE_HISTORY_ID] [int] NOT NULL,
                    [INVOICE_ID] [int] NOT NULL,
                    [INVOICE_ROW_ID] [int] NOT NULL,
                    [PURCHASE_SALES] [bit] NULL,
                    [STOCK_ID] [int] NULL,
                    [DESCRIPTION] [nvarchar](100) NULL,
                    [AMOUNT] [float] NULL,
                    [PRICE] [float] NULL,
                    [PRICE_OTHER] [float] NULL,
                    [UNIT] [nvarchar](50) NULL,
                    [UNIT_ID] [int] NULL,
                    [COST_ID] [int] NULL,
                    [COST_PRICE] [float] NULL,
                    [MARGIN] [float] NULL,
                    [EXTRA_COST] [float] NULL,
                    [DISCOUNTTOTAL] [float] NULL,
                    [GROSSTOTAL] [float] NULL,
                    [NETTOTAL] [float] NULL,
                    [TAXTOTAL] [float] NULL,
                    [ORDER_ID] [int] NULL,
                    [PAY_METHOD] [int] NULL,
                    [DUE_DATE] [int] NULL,
                    [PROM_ID] [int] NULL,
                    [NAME_PRODUCT] [nvarchar](500) NULL,
                    [PRODUCT_ID] [int] NULL,
                    [TAX] [float] NULL,
                    [DISCOUNT1] [float] NULL,
                    [DISCOUNT2] [float] NULL,
                    [DISCOUNT3] [float] NULL,
                    [DISCOUNT4] [float] NULL,
                    [DISCOUNT5] [float] NULL,
                    [DISCOUNT6] [float] NULL,
                    [DISCOUNT7] [float] NULL,
                    [DISCOUNT8] [float] NULL,
                    [DISCOUNT9] [float] NULL,
                    [DISCOUNT10] [float] NULL,
                    [DELIVER_DATE] [datetime] NULL,
                    [DELIVER_DEPT] [int] NULL,
                    [DELIVER_LOC] [int] NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [OTHER_MONEY_VALUE] [float] NULL,
                    [OTHER_MONEY_GROSS_TOTAL] [float] NULL,
                    [SPECT_VAR_ID] [int] NULL,
                    [SPECT_VAR_NAME] [nvarchar](500) NULL,
                    [LOT_NO] [nvarchar](100) NULL,
                    [DARA] [float] NULL,
                    [SHIP_ID] [int] NULL,
                    [DARALI] [float] NULL,
                    [PROM_COMISSION] [float] NULL,
                    [PROM_COST] [float] NULL,
                    [DISCOUNT_COST] [float] NULL,
                    [IS_PROMOTION] [bit] NULL,
                    [PROM_STOCK_ID] [int] NULL,
                    [IS_COMMISSION] [bit] NULL,
                    [UNIQUE_RELATION_ID] [nvarchar](100) NULL,
                    [PRODUCT_NAME2] [nvarchar](650) NULL,
                    [AMOUNT2] [float] NULL,
                    [UNIT2] [nvarchar](50) NULL,
                    [EXTRA_PRICE] [float] NULL,
                    [SHELF_NUMBER] [int] NULL,
                    [PRODUCT_MANUFACT_CODE] [nvarchar](250) NULL,
                    [INVENTORY_ID] [int] NULL,
                    [EXTRA_PRICE_TOTAL] [float] NULL,
                    [OTV_ORAN] [float] NULL,
                    [OTVTOTAL] [float] NULL,
                    [SHIP_PERIOD_ID] [int] NULL,
                    [BASKET_EXTRA_INFO_ID] [int] NULL,
                    [SELECT_INFO_EXTRA] [int] NULL,
                    [DETAIL_INFO_EXTRA] [nvarchar](500) NULL,
                    [PROM_RELATION_ID] [nvarchar](100) NULL,
                    [BASKET_EMPLOYEE_ID] [int] NULL,
                    [LIST_PRICE] [float] NULL,
                    [NUMBER_OF_INSTALLMENT] [int] NULL,
                    [KARMA_PRODUCT_ID] [int] NULL,
                    [EXTRA_PRICE_OTHER_TOTAL] [float] NULL,
                    [PRICE_CAT] [int] NULL,
                    [EK_TUTAR_PRICE] [float] NULL,
                    [CATALOG_ID] [int] NULL,
                    [WRK_ROW_ID] [nvarchar](40) NULL,
                    [WRK_ROW_RELATION_ID] [nvarchar](40) NULL,
                    [RELATED_ACTION_ID] [int] NULL,
                    [RELATED_ACTION_TABLE] [nvarchar](43) NULL,
                    [DEPTH_VALUE] [float] NULL,
                    [WIDTH_VALUE] [float] NULL,
                    [HEIGHT_VALUE] [float] NULL,
                    [ROW_PROJECT_ID] [int] NULL,
                    [ROW_PAYMETHOD_ID] [int] NULL,
                    [PBS_ID] [int] NULL,
                    [ROW_WORK_ID] [int] NULL,
                    [ROW_EXP_CENTER_ID] [int] NULL,
                    [ROW_EXP_ITEM_ID] [int] NULL,
                    [ROW_ACC_CODE] [nvarchar](50) NULL,
                    [REASON_NAME] [nvarchar](250) NULL,
                    [REASON_CODE] [nvarchar](10) NULL,
                    [DELIVERY_CONDITION] [nvarchar](50) NULL,
                    [CONTAINER_TYPE] [nvarchar](50) NULL,
                    [CONTAINER_NUMBER] [nvarchar](50) NULL,
                    [CONTAINER_QUANTITY] [nvarchar](50) NULL,
                    [DELIVERY_COUNTRY] [nvarchar](50) NULL,
                    [DELIVERY_CITY] [nvarchar](50) NULL,
                    [DELIVERY_COUNTY] [nvarchar](50) NULL,
                    [DELIVERY_TYPE] [nvarchar](50) NULL,
                    [GTIP_NUMBER] [nvarchar](50) NULL,
                    [ACTIVITY_TYPE_ID] [int] NULL,
                    [SUBSCRIPTION_ID] [int] NULL,
                    [ASSETP_ID] [int] NULL,
                    [BSMV_RATE] [float] NULL,
                    [BSMV_AMOUNT] [float] NULL,
                    [BSMV_CURRENCY] [float] NULL,
                    [OIV_RATE] [float] NULL,
                    [OIV_AMOUNT] [float] NULL,
                    [TEVKIFAT_RATE] [float] NULL,
                    [TEVKIFAT_AMOUNT] [float] NULL,
                    [TEVKIFAT_ID] [int] NULL,
                CONSTRAINT [PK_INVOICE_ROW_HISTORY_INVOICE_ROW_HISTORY_ID] PRIMARY KEY CLUSTERED 
                (
                    [INVOICE_ROW_HISTORY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]

                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_ROW_POS](
                    [INVOICE_ID] [int] NOT NULL,
                    [INVOICE_ROW_ID] [int] IDENTITY(1,1) NOT NULL,
                    [PRODUCT_ID] [int] NOT NULL,
                    [STOCK_ID] [int] NOT NULL,
                    [BARCODE] [nvarchar](50) NULL,
                    [INVOICE_DATE] [datetime] NULL,
                    [AMOUNT] [float] NOT NULL,
                    [PRICE] [float] NULL,
                    [DISCOUNTTOTAL] [float] NULL,
                    [GROSSTOTAL] [float] NULL,
                    [NETTOTAL] [float] NULL,
                    [TAXTOTAL] [float] NULL,
                    [PAY_METHOD] [int] NULL,
                    [UNIT] [nvarchar](43) NOT NULL,
                    [PROM_ID] [int] NULL,
                    [PROM_DISCOUNT] [float] NULL,
                    [PROM_FREE_PRODUCT] [int] NULL,
                    [PROM_GIFT_HEAD] [nvarchar](50) NULL,
                    [PROM_POINT] [int] NULL,
                    [PROM_TERM_PRIM] [int] NULL,
                    [MULTIPLIER] [float] NOT NULL,
                    [TAX] [float] NULL,
                    [DISCOUNT1] [float] NULL,
                    [DISCOUNT2] [float] NULL,
                    [DISCOUNT3] [float] NULL,
                    [DISCOUNT4] [float] NULL,
                    [DISCOUNT5] [float] NULL,
                    [CREDITCARD_NO] [nvarchar](50) NULL,
                    [BRANCH_FIS_NO] [nvarchar](50) NULL,
                    [BRANCH_CON_ID] [nvarchar](43) NULL,
                    [IS_KARMA] [bit] NULL,
                    [ROW_TYPE] [int] NULL,
                    [IS_PROM] [bit] NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [OTHER_MONEY_GROSS_TOTAL] [float] NULL,
                    [OTHER_MONEY_VALUE] [float] NULL,
                    [PRICE_OTHER] [float] NULL,
                    [UNIT_ID] [int] NULL,
                    [SPECT_VAR_ID] [int] NULL,
                    [SPECT_VAR_NAME] [nvarchar](500) NULL,
                    [DISCOUNT6] [float] NULL,
                    [DISCOUNT7] [float] NULL,
                    [DISCOUNT8] [float] NULL,
                    [DISCOUNT9] [float] NULL,
                    [DISCOUNT10] [float] NULL,
                 CONSTRAINT [PK_INVOICE_ROW_POS_INVOICE_ROW_ID] PRIMARY KEY CLUSTERED 
                (
                    [INVOICE_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_ROW_POS_PROBLEM](
                    [INVOICE_ID] [int] NOT NULL,
                    [INVOICE_ROW_ID] [int] IDENTITY(1,1) NOT NULL,
                    [BARCODE] [nvarchar](50) NULL,
                    [STOCK_CODE] [nvarchar](50) NULL,
                    [INVOICE_DATE] [datetime] NULL,
                    [AMOUNT] [int] NULL,
                    [PRICE] [float] NULL,
                    [DISCOUNTTOTAL] [float] NULL,
                    [GROSSTOTAL] [float] NULL,
                    [NETTOTAL] [float] NULL,
                    [TAXTOTAL] [float] NULL,
                    [TAX] [float] NULL,
                    [CREDITCARD_NO] [nvarchar](50) NULL,
                    [BRANCH_FIS_NO] [nvarchar](50) NULL,
                    [BRANCH_CON_ID] [nvarchar](43) NULL,
                    [ROW_TYPE] [int] NULL,
                    [IS_PROM] [bit] NULL,
                 CONSTRAINT [PK_INVOICE_ROW_POS_PROBLEM_INVOICE_ROW_ID] PRIMARY KEY CLUSTERED 
                (
                    [INVOICE_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_SHIPS](
                    [INVOICE_SHIP_ID] [int] IDENTITY(1,1) NOT NULL,
                    [INVOICE_ID] [int] NULL,
                    [INVOICE_NUMBER] [nvarchar](100) NULL,
                    [SHIP_ID] [int] NULL,
                    [SHIP_NUMBER] [nvarchar](100) NULL,
                    [IS_WITH_SHIP] [bit] NULL,
                    [IMPORT_INVOICE_ID] [int] NULL,
                    [IMPORT_PERIOD_ID] [int] NULL,
                    [SHIP_PERIOD_ID] [int] NULL,
                 CONSTRAINT [PK_INVOICE_SHIPS_INVOICE_SHIP_ID] PRIMARY KEY CLUSTERED 
                (
                    [INVOICE_SHIP_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_STATISTICAL](
                    [STATISTICAL_ID] [int] IDENTITY(1,1) NOT NULL,
                    [INVOICE_ID] [int] NULL,
                    [TOTAL_NUMBER_RECEIPT] [float] NULL,
                    [VALID_NUMBER_RECEIPT] [float] NULL,
                    [CANCEL_NUMBER_RECEIPT] [float] NULL,
                    [TOTAL_NUMBER_SALES_RECEIPT] [float] NULL,
                    [CANCEL_NUMBER_SALES_RECEIPT] [float] NULL,
                    [TOTAL_CANCELLATION] [float] NULL,
                    [TOTAL_BONUS] [float] NULL,
                    [TOTAL_DISCOUNT] [float] NULL,
                    [TOTAL_DEPOSIT] [float] NULL,
                    [TOTAL_DISCOUNT2] [float] NULL,
                    [CANCEL_INVOICE_TOTAL] [float] NULL,
                    [NOT_FINANCIAL_INVOICE_TOTAL] [float] NULL,
                    [TOTAL_NUMBER_INVOICE] [float] NULL,
                    [VALID_NUMBER_INVOICE] [float] NULL,
                    [CANCEL_NUMBER_INVOICE] [float] NULL,
                    [TOTAL_INVOICE] [float] NULL,
                    [TOTAL_KDV_INVOICE] [float] NULL,
                    [TOTAL_CANCEL_INVOICE] [float] NULL,
                    [TOTAL_EXPENSE_NUMBER_RECEIPT] [float] NULL,
                    [VALID_EXPENSE_NUMBER_RECEIPT] [float] NULL,
                    [CANCEL_EXPENSE_NUMBER_RECEIPT] [float] NULL,
                    [TOTAL_EXPENSE] [float] NULL,
                    [TOTAL_KDV_EXPENSE] [float] NULL,
                    [TOTAL_CANCEL_EXPENSE] [float] NULL,
                    [TOTAL_NUMBER_DIPLOMATIC_RECEIPT] [float] NULL,
                    [VALID_NUMBER_DIPLOMATIC_RECEIPT] [float] NULL,
                    [CANCEL_NUMBER_DIPLOMATIC_RECEIPT] [float] NULL,
                    [TOTAL_DIPLOMATIC] [float] NULL,
                    [TOTAL_CANCEL_DIPLOMATIC] [float] NULL,
                    [TOTAL_ERROR_NUMBER_MEMORY] [float] NULL,
                 CONSTRAINT [PK_INVOICE_STATISTICAL_STATISTICAL_ID] PRIMARY KEY CLUSTERED 
                (
                    [STATISTICAL_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_TAXES](
                    [INVOICE_TAX_ID] [int] IDENTITY(1,1) NOT NULL,
                    [INVOICE_ID] [int] NULL,
                    [TAX] [int] NULL,
                    [TEVKIFAT_TUTAR] [float] NULL,
                    [BEYAN_TUTAR] [float] NULL,
                    [EXPENSE_ID] [int] NULL,
                 CONSTRAINT [PK_INVOICE_TAXES_INVOICE_TAX_ID] PRIMARY KEY CLUSTERED 
                (
                    [INVOICE_TAX_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[NETBOOK_DOCUMENTS](
                    [ID] [int] IDENTITY(1,1) NOT NULL,
                    [NETBOOK_ID] [int] NULL,
                    [UNIQUE_FILE_NAME] [nvarchar](250) NULL,
                    [START_DATE] [datetime] NULL,
                    [FINISH_DATE] [datetime] NULL,
                    [FILE_NAME] [nvarchar](250) NULL,
                    [FILE_PATH] [nvarchar](250) NULL,
                    [WARRANT_FILE_PATH] [nvarchar](250) NULL,
                    [GIB_WARRANT_FILE_PATH] [nvarchar](250) NULL,
                    [TYPE] [nvarchar](50) NULL,
                    [STATUS_CODE] [int] NULL,
                    [STATUS_MESSAGE] [nvarchar](100) NULL,
                    [UNIQUEID] [nvarchar](50) NULL,
                    [INTEGRATION_ID] [int] NULL,
                    [INTEGRATION_DOCUMENT_ID] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                CONSTRAINT [PK_NETBOOK_DOCUMENTS] PRIMARY KEY CLUSTERED 
                (
                    [ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[NETBOOKS](
                    [NETBOOK_ID] [int] IDENTITY(1,1) NOT NULL,
                    [UNIQUE_FILE_NAME] [nvarchar](250) NULL,
                    [STATUS] [int] NULL,
                    [DETAIL] [nvarchar](250) NULL,
                    [START_DATE] [datetime] NULL,
                    [FINISH_DATE] [datetime] NULL,
                    [BILL_START_NUMBER] [int] NULL,
                    [BILL_FINISH_NUMBER] [int] NULL,
                    [BILL_START_ROW_NUMBER] [int] NULL,
                    [BILL_FINISH_ROW_NUMBER] [int] NULL,
                    [INTEGRATION_ID] [int] NULL,
                    [ERROR_DETAIL] [nvarchar](max) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [CUSTOMER_ID] [nvarchar](250) NULL,
                CONSTRAINT [PK_NETBOOKS] PRIMARY KEY CLUSTERED 
                (
                    [NETBOOK_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[PAYROLL](
                    [ACTION_ID] [int] IDENTITY(1,1) NOT NULL,
                    [COMPANY_ID] [int] NULL,
                    [PAYROLL_NO] [nvarchar](43) NULL,
                    [PAYROLL_TYPE] [int] NOT NULL,
                    [PAYROLL_AVG_DUEDATE] [datetime] NULL,
                    [PAYROLL_TOTAL_VALUE] [float] NULL,
                    [CURRENCY_ID] [nvarchar](43) NULL,
                    [PAYROLL_RECORD_DATE] [datetime] NULL,
                    [PAYROLL_AVG_AGE] [int] NULL,
                    [NUMBER_OF_CHEQUE] [int] NULL,
                    [PAYROLL_CASH_ID] [int] NULL,
                    [PAYROLL_ACCOUNT_ID] [int] NULL,
                    [PAYROLL_REVENUE_DATE] [datetime] NULL,
                    [PAYROLL_REV_MEMBER] [int] NULL,
                    [REVENUE_COLLECTOR_ID] [int] NULL,
                    [PROCESS_CAT] [int] NULL,
                    [MASRAF] [float] NULL,
                    [UPD_STATUS] [bit] NULL,
                    [PAYROLL_OTHER_MONEY] [nvarchar](43) NULL,
                    [PAYROLL_OTHER_MONEY_VALUE] [float] NULL,
                    [MASRAF_CURRENCY] [nvarchar](43) NULL,
                    [CONSUMER_ID] [int] NULL,
                    [CHEQUE_BASED_ACC_CARI] [bit] NULL DEFAULT ((0)),
                    [PROJECT_ID] [int] NULL,
                    [EMPLOYEE_ID] [int] NULL,
                    [ACTION_DETAIL] [nvarchar](250) NULL,
                    [BRANCH_ID] [int] NULL,
                    [TRANSFER_CASH_ID] [int] NULL,
                    [ASSETP_ID] [int] NULL,
                    [PAYMENT_ORDER_ID] [int] NULL,
                    [SPECIAL_DEFINITION_ID] [int] NULL,
                    [CREDIT_LIMIT] [int] NULL,
                    [ACC_TYPE_ID] [int] NULL,
                    [CONTRACT_ID] [int] NULL,
                    [EXP_CENTER_ID] [int] NULL,
                    [EXP_ITEM_ID] [int] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                 CONSTRAINT [PK_PAYROLL_ACTION_ID] PRIMARY KEY CLUSTERED 
                (
                    [ACTION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[PAYROLL_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL,
                    [ACTION_MONEY_ID] [int] IDENTITY(1,1) NOT NULL,
                CONSTRAINT [PK_PAYROLL_MONEY] PRIMARY KEY CLUSTERED 
                (
                    [ACTION_MONEY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[PRE_CONSIGNMENT_SHIP](
                    [CONSIGNMENT_ID] [int] IDENTITY(1,1) NOT NULL,
                    [PERIOD_ID] [int] NULL,
                    [SHIP_ID] [int] NULL,
                    [SHIP_NUMBER] [nvarchar](50) NULL,
                    [SHIP_DATE] [datetime] NULL,
                    [SHIP_TYPE] [int] NULL,
                    [PROCESS_CAT] [int] NULL,
                    [COMPANY_ID] [int] NULL,
                    [PARTNER_ID] [int] NULL,
                    [CONSUMER_ID] [int] NULL,
                    [STOCK_ID] [int] NULL,
                    [PRODUCT_ID] [int] NULL,
                    [SPECT_MAIN_ID] [int] NULL,
                    [PROJECT_ID] [int] NULL,
                    [SUBSCRIPTION_ID] [int] NULL,
                    [AMOUNT] [float] NULL,
                    [INV_AMOUNT] [float] NULL,
                    [SHIP_AMOUNT] [float] NULL,
                    [REMAIN_AMOUNT] [float] NULL,
                    [COST_VALUE] [float] NULL,
                    [INVOICE_NUMBER_LIST] [nvarchar](1000) NULL,
                    [SHIP_NUMBER_LIST] [nvarchar](1000) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](40) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [DEPARTMENT_ID] [int] NULL,
                    [LOCATION_ID] [int] NULL,
                    [SHIP_COST] [float] NULL,
                    [INV_COST] [float] NULL,
                 CONSTRAINT [PK_PRE_CONSIGNMENT_SHIP_CONSIGNMENT_ID] PRIMARY KEY CLUSTERED 
                (
                    [CONSIGNMENT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[PRODUCT_COST_INVOICE](
                    [PRODUCT_COST_INVOICE_ID] [int] IDENTITY(1,1) NOT NULL,
                    [INVOICE_ID] [int] NULL,
                    [PRODUCT_ID] [int] NULL,
                    [STOCK_ID] [int] NULL,
                    [SPECT_MAIN_ID] [int] NULL,
                    [COST_DATE] [datetime] NULL,
                    [COST_TYPE_ID] [int] NULL,
                    [PRICE_PROTECTION_TYPE] [int] NULL,
                    [PRICE_PROTECTION] [float] NULL,
                    [PRICE_PROTECTION_MONEY] [nvarchar](43) NULL,
                    [AMOUNT] [float] NULL,
                    [TOTAL_PRICE_PROTECTION] [float] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [DEPARTMENT_ID] [int] NULL,
                    [AMOUNT_CONSIGMENT] [float] NULL,
                 CONSTRAINT [PK_PRODUCT_COST_INVOICE_PRODUCT_COST_INVOICE_ID] PRIMARY KEY CLUSTERED 
                (
                    [PRODUCT_COST_INVOICE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[PRODUCT_COST_REFERENCE](
                    [COST_REFERENCE_ID] [int] IDENTITY(1,1) NOT NULL,
                    [PRODUCT_COST_ID] [int] NOT NULL,
                    [ACTION_ID] [int] NOT NULL,
                    [ACTION_TYPE] [int] NULL,
                    [AMOUNT] [int] NOT NULL,
                 CONSTRAINT [PK_PRODUCT_COST_REFERENCE] PRIMARY KEY CLUSTERED 
                (
                    [COST_REFERENCE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[PRODUCTION_COST_ROWS](
                    [PRODUCTION_COST_ID] [int] IDENTITY(1,1) NOT NULL,
                    [PRODUCT_ID] [int] NULL,
                    [PRODUCT_NAME] [nvarchar](500) NULL,
                    [DEBT_ACCOUNT_CODE] [nvarchar](50) NULL,
                    [CLAIM_ACCOUNT_CODE] [nvarchar](50) NULL,
                    [CLAIM_ACCOUNT_CODE_LABOR] [nvarchar](50) NULL,
                    [AMOUNT] [float] NULL,
                    [TYPE] [int] NULL,
                    [START_DATE] [datetime] NULL,
                    [FINISH_DATE] [datetime] NULL,
                    CONSTRAINT [PK_PRODUCTION_COST_ROWS] PRIMARY KEY CLUSTERED 
                    (
                        [PRODUCTION_COST_ID] ASC
                    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                    ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[REESCOUNT](
                    [REESCOUNT_ID] [int] IDENTITY(1,1) NOT NULL,
                    [REESCOUNT_RATE] [int] NULL,
                    [DUE_DATE] [datetime] NULL,
                    [ACTION_DATE] [datetime] NULL,
                    [BA] [bit] NULL,
                    [PROCESS_CAT] [int] NULL,
                    [TOTAL_VALUE] [float] NULL,
                    [TOTAL_REESCOUNT_VALUE] [float] NULL,
                    [AVE_DUE_DATE] [datetime] NULL,
                    [EXP_CENTER_ID] [int] NULL,
                    [EXP_ITEM_ID] [int] NULL,
                    [REESCOUNT_ACC_CODE] [nvarchar](100) NULL,
                    [CHEQ_VOUCHER_ACC_CODE] [nvarchar](100) NULL,
                    [DETAIL] [nvarchar](max) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [int] NULL,    
                 CONSTRAINT [PK_REESCOUNT] PRIMARY KEY CLUSTERED 
                (
                    [REESCOUNT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[REESCOUNT_ROWS](
                    [REESCOUNT_ROW_ID] [int] IDENTITY(1,1) NOT NULL,
                    [REESCOUNT_ID] [int] NOT NULL,
                    [VOUCHER_ID] [int] NULL,
                    [CHEQUE_ID] [int] NULL,
                    [NET_VALUE] [float] NULL,
                    [REESCOUNT_VALUE] [float] NULL,
                    [CURRENCY_ID] [nvarchar](43) NULL,
                    [CHEQ_VOUCHER_DUE_DATE] [datetime] NULL,
                    [DUEDATE_DIFF] [int] NULL,
                 CONSTRAINT [PK_REESCOUNT_ROWS_1] PRIMARY KEY CLUSTERED 
                (
                    [REESCOUNT_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SAYIM_SATIRLAR](
                    [SATIR_ID] [int] IDENTITY(1,1) NOT NULL,
                    [SAYIM_ID] [int] NULL,
                    [PRODUCT_ID] [int] NULL,
                    [STOCK_ID] [int] NULL,
                    [MIKTAR] [float] NULL,
                    [STANDART_ALIS] [float] NULL,
                    [BARCODE] [nvarchar](50) NULL,
                    [PRODUCT_NAME] [nvarchar](500) NULL,
                    [STOCK_PROPERTY] [nvarchar](128) NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [MONEY_RATE] [float] NULL,
                    [SHELF_NUMBER] [int] NULL,
                    [DELIVER_DATE] [datetime] NULL,
                    [SPECT_MAIN_ID] [int] NULL,
                    [SPECT_MAIN_NAME] [nvarchar](500) NULL,
                    [FINANCE_DATE] [datetime] NULL,
                    [PHYSICAL_AGE] [float] NULL,
                    [COST_PRICE] [float] NULL,
                    [EXTRA_COST] [float] NULL,
                    [LOT_NO] [nvarchar](50) NULL,
                 CONSTRAINT [PK_SAYIM_SATIRLAR_SATIR_ID] PRIMARY KEY CLUSTERED 
                (
                    [SATIR_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SAYIMLAR](
                    [GIRIS_ID] [int] IDENTITY(1,1) NOT NULL,
                    [FILE_NAME] [nvarchar](50) NULL,
                    [BRANCH_ID] [int] NULL,
                    [DESCRIPTION] [nvarchar](50) NULL,
                    [DEPARTMENT_IN] [int] NULL,
                    [FIS_ID] [int] NULL,
                    [LOCATION_IN] [int] NULL,
                    [TOPLAM_MALIYET] [float] NULL,
                    [FILE_SERVER_ID] [int] NULL,
                    [DELIMITERS] [nvarchar](43) NULL,
                    [EXTRA_COLUMNS] [nvarchar](250) NULL,
                    [STOCK_IDENTITY_TYPE] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [FIS_PROCESS_TYPE] [int] NULL,
                 CONSTRAINT [PK_SAYIMLAR_GIRIS_ID] PRIMARY KEY CLUSTERED 
                (
                    [GIRIS_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SETUP_BALANCE_SHEET_LIST](
                    [ACCOUNT_CODE] [bit] NULL,
	                [ACCOUNT_CODE_NO] [bit] NULL
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SETUP_FUND_TABLE_LIST](
                    [ID] [int] NULL,
	                [DISPLAYS] [nvarchar](50) NULL
                ) ON [PRIMARY]


                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[PRODUCT_EXTRA_COST_DETAIL](
                    [ID] [int] IDENTITY(1,1) NOT NULL,
                    [ACCOUNT_ID] [nvarchar](50) NULL,
                    [EXPENSE_ID] [int] NULL,
                    [EXPENSE_SHIFT] [float] NULL,
                    [AMOUNT] [float] NULL,
                    [STATION_ID] [int] NULL,
                    [PRODUCT_ID] [int] NULL,
                    [MONEY] [nvarchar](50) NULL,
                    [P_ORDER_ID] [int] NULL,
            CONSTRAINT [PK_PRODUCT_EXTRA_COST_DETAIL] PRIMARY KEY CLUSTERED 
            (
                [ID] ASC
            )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
            ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SETUP_STOPPAGE_RATES](
                    [STOPPAGE_RATE_ID] [int] IDENTITY(1,1) NOT NULL,
                    [STOPPAGE_RATE] [float] NULL,
                    [STOPPAGE_ACCOUNT_CODE] [nvarchar](43) NULL,
                    [TAX_CODE] [nvarchar](50) NULL,
                    [DETAIL] [nvarchar](250) NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [TAX_CODE_NAME] [nvarchar](100) NULL,
                    [EXP_SALES_CODE] [nvarchar](50) NULL,
                    [EXP_PURCHASE_CODE] [nvarchar](50) NULL,
                    [INWARD_PROCESS_CODE] [nvarchar](50) NULL,
                    [SETUP_BANK_TYPE_ID] [nvarchar](50) NULL,
                 CONSTRAINT [PK_SETUP_STOPPAGE_RATES_STOPPAGE_RATE_ID] PRIMARY KEY CLUSTERED 
                (
                    [STOPPAGE_RATE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SETUP_TAX](
                    [TAX_ID] [int] IDENTITY(1,1) NOT NULL,
                    [TAX] [float] NOT NULL,
                    [DETAIL] [nvarchar](150) NULL,
                    [SALE_CODE] [nvarchar](50) NULL,
                    [PURCHASE_CODE] [nvarchar](50) NULL,
                    [SALE_CODE_IADE] [nvarchar](50) NULL,
                    [PURCHASE_CODE_IADE] [nvarchar](50) NULL,
                    [INVENTORY_SALE_CODE] [nvarchar](50) NULL,
                    [INVENTORY_PURCHASE_CODE] [nvarchar](50) NULL,
                    [PURCHASE_PRICE_DIFF_CODE] [nvarchar](50) NULL,
                    [SALE_PRICE_DIFF_CODE] [nvarchar](50) NULL,
                    [TAX_CODE] [nvarchar](50) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [TAX_CODE_NAME] [nvarchar](100) NULL,
                    [DIRECT_EXPENSE_CODE] [nvarchar](50) NULL,
                    [INWARD_PROCESS_CODE] [nvarchar](50) NULL,
                    [EXP_PURCHASE_CODE] [nvarchar](50) NULL,
                    [EXP_SALES_CODE] [nvarchar](50) NULL,
                    [EXPENSE_ITEM_ID] [int] NULL,
                 CONSTRAINT [PK_SETUP_TAX_TAX_ID] PRIMARY KEY CLUSTERED 
                (
                    [TAX_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP](
                    [SHIP_ID] [int] IDENTITY(1,1) NOT NULL,
                    [WRK_ID] [nvarchar](43) NULL,
                    [PURCHASE_SALES] [bit] NULL,
                    [SERIAL_NUMBER] [nvarchar](50) NULL,
                    [SHIP_NUMBER] [nvarchar](50) NULL,
                    [SHIP_TYPE] [int] NULL,
                    [SHIP_METHOD] [int] NULL,
                    [SHIP_DATE] [datetime] NULL,
                    [SHIP_STATUS] [int] NULL DEFAULT ((1)),
                    [SHIP_ADDRESS_ID] [int] NULL,
                    [IS_WITH_SHIP] [bit] NULL,
                    [COMPANY_ID] [int] NULL,
                    [PARTNER_ID] [int] NULL,
                    [CONSUMER_ID] [int] NULL,
                    [EMPLOYEE_ID] [int] NULL,
                    [DELIVER_DATE] [datetime] NULL,
                    [LOCATION] [int] NULL,
                    [DELIVER_STORE_ID] [int] NULL,
                    [DELIVER_EMP] [nvarchar](50) NULL,
                    [DEPARTMENT_IN] [int] NULL,
                    [LOCATION_IN] [int] NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [OTHER_MONEY_VALUE] [float] NULL,
                    [DISCOUNTTOTAL] [float] NULL,
                    [GROSSTOTAL] [float] NULL,
                    [NETTOTAL] [float] NULL,
                    [TAXTOTAL] [float] NULL,
                    [OTV_TOTAL] [float] NULL,
                    [ADDRESS] [nvarchar](500) NULL,
                    [PAYMETHOD_ID] [int] NULL,
                    [ORDER_ID] [int] NULL,
                    [PROJECT_ID] [int] NULL,
                    [PROCESS_CAT] [int] NULL,
                    [DISPATCH_SHIP_ID] [int] NULL,
                    [IS_EXPORTED] [bit] NULL,
                    [IS_DELIVERED] [bit] NULL,
                    [CITY_ID] [int] NULL,
                    [COUNTY_ID] [int] NULL,
                    [DUE_DATE] [datetime] NULL,
                    [SA_DISCOUNT] [float] NULL,
                    [REF_NO] [nvarchar](2000) NULL,
                    [GENERAL_PROM_ID] [int] NULL,
                    [GENERAL_PROM_LIMIT] [int] NULL,
                    [GENERAL_PROM_AMOUNT] [float] NULL,
                    [GENERAL_PROM_DISCOUNT] [float] NULL,
                    [FREE_PROM_ID] [int] NULL,
                    [FREE_PROM_LIMIT] [int] NULL,
                    [FREE_PROM_COST] [float] NULL,
                    [FREE_PROM_AMOUNT] [int] NULL,
                    [FREE_PROM_STOCK_ID] [int] NULL,
                    [FREE_STOCK_PRICE] [float] NULL,
                    [FREE_STOCK_MONEY] [nvarchar](43) NULL,
                    [PROD_ORDER_NUMBER] [int] NULL,
                    [PROD_ORDER_RESULT_NUMBER] [int] NULL,
                    [CARD_PAYMETHOD_ID] [int] NULL,
                    [CARD_PAYMETHOD_RATE] [float] NULL,
                    [SHIP_DETAIL] [nvarchar](max) NULL,
                    [SALE_EMP] [int] NULL,
                    [IS_SHIP_IPTAL] [bit] NULL DEFAULT ((0)),
                    [DELIVER_EMP_ID] [int] NULL,
                    [COMMETHOD_ID] [int] NULL,
                    [DELIVER_PAR_ID] [int] NULL,
                    [IS_DISPATCH] [bit] NULL DEFAULT ((0)),
                    [WORK_ID] [int] NULL,
                    [DELIVER_COMP_ID] [int] NULL,
                    [DELIVER_CONS_ID] [int] NULL,
                    [SUBSCRIPTION_ID] [int] NULL,
                    [PROJECT_ID_IN] [int] NULL,
                    [CARGO_STATUS] [bit] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [METAL_ORDER_ID] [int] NULL,
                    [IS_SEND_WEBSERVICE] [bit] NULL,
                    [IS_FROM_RETURN] [bit] NULL,
                    [SERVICE_ID] [int] NULL,
                    [IS_RECEIVED_WEBSERVICE] [bit] NULL,
                    [PROCESS_STAGE] [int] NULL,
					[PRINT_DATE] [datetime] NULL,
					[PRINT_COUNT] [int] NULL,
                 CONSTRAINT [PK_SHIP_SHIP_ID] PRIMARY KEY CLUSTERED 
                (
                    [SHIP_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_HISTORY](
                    [SHIP_HISTORY_ID] [int] IDENTITY(1,1) NOT NULL,
                    [SHIP_ID] [int] NULL,
                    [WRK_ID] [nvarchar](43) NULL,
                    [PURCHASE_SALES] [bit] NULL,
                    [SHIP_NUMBER] [nvarchar](50) NULL,
                    [SHIP_TYPE] [int] NULL,
                    [SHIP_METHOD] [int] NULL,
                    [SHIP_DATE] [datetime] NULL,
                    [SHIP_STATUS] [int] NULL DEFAULT ((1)),
                    [IS_WITH_SHIP] [bit] NULL,
                    [COMPANY_ID] [int] NULL,
                    [PARTNER_ID] [int] NULL,
                    [CONSUMER_ID] [int] NULL,
                    [DELIVER_DATE] [datetime] NULL,
                    [LOCATION] [int] NULL,
                    [DELIVER_STORE_ID] [int] NULL,
                    [DELIVER_EMP] [nvarchar](50) NULL,
                    [DEPARTMENT_IN] [int] NULL,
                    [LOCATION_IN] [int] NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [OTHER_MONEY_VALUE] [float] NULL,
                    [DISCOUNTTOTAL] [float] NULL,
                    [GROSSTOTAL] [float] NULL,
                    [NETTOTAL] [float] NULL,
                    [TAXTOTAL] [float] NULL,
                    [OTV_TOTAL] [float] NULL,
                    [ADDRESS] [nvarchar](500) NULL,
                    [PAYMETHOD_ID] [int] NULL,
                    [ORDER_ID] [int] NULL,
                    [PROJECT_ID] [int] NULL,
                    [PROCESS_CAT] [int] NULL,
                    [DISPATCH_SHIP_ID] [int] NULL,
                    [IS_EXPORTED] [bit] NULL,
                    [IS_DELIVERED] [bit] NULL,
                    [CITY_ID] [int] NULL,
                    [COUNTY_ID] [int] NULL,
                    [DUE_DATE] [datetime] NULL,
                    [SA_DISCOUNT] [float] NULL,
                    [REF_NO] [nvarchar](2000) NULL,
                    [GENERAL_PROM_ID] [int] NULL,
                    [GENERAL_PROM_LIMIT] [int] NULL,
                    [GENERAL_PROM_AMOUNT] [float] NULL,
                    [GENERAL_PROM_DISCOUNT] [float] NULL,
                    [FREE_PROM_ID] [int] NULL,
                    [FREE_PROM_LIMIT] [int] NULL,
                    [FREE_PROM_COST] [float] NULL,
                    [FREE_PROM_AMOUNT] [int] NULL,
                    [FREE_PROM_STOCK_ID] [int] NULL,
                    [FREE_STOCK_PRICE] [float] NULL,
                    [FREE_STOCK_MONEY] [nvarchar](43) NULL,
                    [PROD_ORDER_NUMBER] [int] NULL,
                    [PROD_ORDER_RESULT_NUMBER] [int] NULL,
                    [CARD_PAYMETHOD_ID] [int] NULL,
                    [CARD_PAYMETHOD_RATE] [float] NULL,
                    [SHIP_DETAIL] [nvarchar](max) NULL,
                    [SALE_EMP] [int] NULL,
                    [IS_SHIP_IPTAL] [bit] NULL DEFAULT ((0)),
                    [DELIVER_EMP_ID] [int] NULL,
                    [COMMETHOD_ID] [int] NULL,
                    [DELIVER_PAR_ID] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                 CONSTRAINT [PK_SHIP_HISTORY_SHIP_HISTORY_ID] PRIMARY KEY CLUSTERED 
                (
                    [SHIP_HISTORY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_INFO_PLUS](
                    [INFO_ID] [int] IDENTITY(1,1) NOT NULL,
                    [SHIP_ID] [int] NULL,
                    [PROPERTY1] [nvarchar](500) NULL,
                    [PROPERTY2] [nvarchar](500) NULL,
                    [PROPERTY3] [nvarchar](500) NULL,
                    [PROPERTY4] [nvarchar](500) NULL,
                    [PROPERTY5] [nvarchar](500) NULL,
                    [PROPERTY6] [nvarchar](500) NULL,
                    [PROPERTY7] [nvarchar](500) NULL,
                    [PROPERTY8] [nvarchar](500) NULL,
                    [PROPERTY9] [nvarchar](500) NULL,
                    [PROPERTY10] [nvarchar](500) NULL,
                    [PROPERTY11] [nvarchar](500) NULL,
                    [PROPERTY12] [nvarchar](500) NULL,
                    [PROPERTY13] [nvarchar](500) NULL,
                    [PROPERTY14] [nvarchar](500) NULL,
                    [PROPERTY15] [nvarchar](500) NULL,
                    [PROPERTY16] [nvarchar](500) NULL,
                    [PROPERTY17] [nvarchar](500) NULL,
                    [PROPERTY18] [nvarchar](500) NULL,
                    [PROPERTY19] [nvarchar](500) NULL,
                    [PROPERTY20] [nvarchar](500) NULL,
                    [PROPERTY21] [nvarchar](500) NULL,
                    [PROPERTY22] [nvarchar](500) NULL,
                    [PROPERTY23] [nvarchar](500) NULL,
                    [PROPERTY24] [nvarchar](500) NULL,
                    [PROPERTY25] [nvarchar](500) NULL,
                    [PROPERTY26] [nvarchar](500) NULL,
                    [PROPERTY27] [nvarchar](500) NULL,
                    [PROPERTY28] [nvarchar](500) NULL,
                    [PROPERTY29] [nvarchar](500) NULL,
                    [PROPERTY30] [nvarchar](500) NULL,
                    [PROPERTY31] [nvarchar](500) NULL,
                    [PROPERTY32] [nvarchar](500) NULL,
                    [PROPERTY33] [nvarchar](500) NULL,
                    [PROPERTY34] [nvarchar](500) NULL,
                    [PROPERTY35] [nvarchar](500) NULL,
                    [PROPERTY36] [nvarchar](500) NULL,
                    [PROPERTY37] [nvarchar](500) NULL,
                    [PROPERTY38] [nvarchar](500) NULL,
                    [PROPERTY39] [nvarchar](500) NULL,
                    [PROPERTY40] [nvarchar](500) NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                 CONSTRAINT [PK_SHIP_INFO_PLUS_INFO_ID] PRIMARY KEY CLUSTERED 
                (
                    [INFO_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_INFO_PLUS_HISTORY](
                    [INFO_ID_HIST] [int] IDENTITY(1,1) NOT NULL,
                    [INFO_ID] [int] NOT NULL,
                    [SHIP_ID] [int] NULL,
                    [PROPERTY1] [nvarchar](500) NULL,
                    [PROPERTY2] [nvarchar](500) NULL,
                    [PROPERTY3] [nvarchar](500) NULL,
                    [PROPERTY4] [nvarchar](500) NULL,
                    [PROPERTY5] [nvarchar](500) NULL,
                    [PROPERTY6] [nvarchar](500) NULL,
                    [PROPERTY7] [nvarchar](500) NULL,
                    [PROPERTY8] [nvarchar](500) NULL,
                    [PROPERTY9] [nvarchar](500) NULL,
                    [PROPERTY10] [nvarchar](500) NULL,
                    [PROPERTY11] [nvarchar](500) NULL,
                    [PROPERTY12] [nvarchar](500) NULL,
                    [PROPERTY13] [nvarchar](500) NULL,
                    [PROPERTY14] [nvarchar](500) NULL,
                    [PROPERTY15] [nvarchar](500) NULL,
                    [PROPERTY16] [nvarchar](500) NULL,
                    [PROPERTY17] [nvarchar](500) NULL,
                    [PROPERTY18] [nvarchar](500) NULL,
                    [PROPERTY19] [nvarchar](500) NULL,
                    [PROPERTY20] [nvarchar](500) NULL,
                    [PROPERTY21] [nvarchar](500) NULL,
                    [PROPERTY22] [nvarchar](500) NULL,
                    [PROPERTY23] [nvarchar](500) NULL,
                    [PROPERTY24] [nvarchar](500) NULL,
                    [PROPERTY25] [nvarchar](500) NULL,
                    [PROPERTY26] [nvarchar](500) NULL,
                    [PROPERTY27] [nvarchar](500) NULL,
                    [PROPERTY28] [nvarchar](500) NULL,
                    [PROPERTY29] [nvarchar](500) NULL,
                    [PROPERTY30] [nvarchar](500) NULL,
                    [PROPERTY31] [nvarchar](500) NULL,
                    [PROPERTY32] [nvarchar](500) NULL,
                    [PROPERTY33] [nvarchar](500) NULL,
                    [PROPERTY34] [nvarchar](500) NULL,
                    [PROPERTY35] [nvarchar](500) NULL,
                    [PROPERTY36] [nvarchar](500) NULL,
                    [PROPERTY37] [nvarchar](500) NULL,
                    [PROPERTY38] [nvarchar](500) NULL,
                    [PROPERTY39] [nvarchar](500) NULL,
                    [PROPERTY40] [nvarchar](500) NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                 CONSTRAINT [PK_SHIP_INFO_PLUS_HISTORY_INFO_ID_HIST] PRIMARY KEY CLUSTERED 
                (
                    [INFO_ID_HIST] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_INTERNAL](
                    [DISPATCH_SHIP_ID] [int] IDENTITY(1,1) NOT NULL,
                    [SHIP_METHOD] [int] NULL,
                    [PROCESS_STAGE] [int] NULL,
                    [SHIP_DATE] [datetime] NULL,
                    [DELIVER_DATE] [datetime] NULL,
                    [LOCATION_OUT] [int] NULL,
                    [DEPARTMENT_OUT] [int] NULL,
                    [DELIVER_EMP] [int] NULL,
                    [DEPARTMENT_IN] [int] NULL,
                    [LOCATION_IN] [int] NULL,
                    [MONEY] [nvarchar](50) NULL,
                    [RATE1] [float] NULL,
                    [RATE2] [float] NULL,
                    [DISCOUNTTOTAL] [float] NULL,
                    [GROSSTOTAL] [float] NULL,
                    [NETTOTAL] [float] NULL,
                    [TAXTOTAL] [float] NULL,
                    [DETAIL] [nvarchar](250) NULL,
                    [CODE] [nvarchar](50) NULL,
                    [PAPER_NO] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                 CONSTRAINT [PK_SHIP_INTERNAL_DISPATCH_SHIP_ID] PRIMARY KEY CLUSTERED 
                (
                    [DISPATCH_SHIP_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_INTERNAL_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL,
                    [ACTION_MONEY_ID] [int] IDENTITY(1,1) NOT NULL,
                CONSTRAINT [PK_SHIP_INTERNAL_MONEY] PRIMARY KEY CLUSTERED 
                (
                    [ACTION_MONEY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_INTERNAL_ROW](
                    [SHIP_ROW_ID] [int] IDENTITY(1,1) NOT NULL,
                    [DISPATCH_SHIP_ID] [int] NULL,
                    [PRODUCT_ID] [int] NULL,
                    [PRICE] [float] NULL,
                    [PRICE_OTHER] [float] NULL,
                    [AMOUNT] [float] NULL,
                    [UNIT] [nvarchar](43) NULL,
                    [UNIT_ID] [int] NULL,
                    [DISCOUNT] [float] NULL,
                    [TAX] [float] NULL,
                    [PAYMETHOD_ID] [int] NULL,
                    [STOCK_ID] [int] NULL,
                    [NAME_PRODUCT] [nvarchar](500) NULL,
                    [SHIP_DATE] [datetime] NULL,
                    [SPECT_VAR_ID] [int] NULL,
                    [SPECT_VAR_NAME] [nvarchar](500) NULL,
                    [DISCOUNT2] [float] NULL,
                    [DISCOUNT3] [float] NULL,
                    [DISCOUNT4] [float] NULL,
                    [DISCOUNT5] [float] NULL,
                    [DISCOUNT6] [float] NULL,
                    [DISCOUNT7] [float] NULL,
                    [DISCOUNT8] [float] NULL,
                    [DISCOUNT9] [float] NULL,
                    [DISCOUNT10] [float] NULL,
                    [DELIVER_DATE] [datetime] NULL,
                    [DELIVER_DEPT] [int] NULL,
                    [DELIVER_LOC] [int] NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [OTHER_MONEY_VALUE] [float] NULL,
                    [OTHER_MONEY_GROSS_TOTAL] [float] NULL,
                    [LOT_NO] [nvarchar](100) NULL,
                    [PRODUCT_MANUFACT_CODE] [nvarchar](50) NULL,
                    [WRK_ROW_ID] [nvarchar](40) NULL,
                    [WRK_ROW_RELATION_ID] [nvarchar](40) NULL,
                    [ROW_PROJECT_ID] [int] NULL,
                    [PRODUCT_NAME2] [nvarchar](500) NULL,
                    [BASKET_EXTRA_INFO_ID] [int] NULL,
                    [SELECT_INFO_EXTRA] [int] NULL,
                    [DETAIL_INFO_EXTRA] [nvarchar](500) NULL,
                    [AMOUNT2] [float] NULL,
                    [UNIT2] [nvarchar](50) NULL,
                 CONSTRAINT [PK_SHIP_INTERNAL_ROW_SHIP_ROW_ID] PRIMARY KEY CLUSTERED 
                (
                    [SHIP_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL,
                    [ACTION_MONEY_ID] [int] IDENTITY(1,1) NOT NULL,
                CONSTRAINT [PK_SHIP_MONEY] PRIMARY KEY CLUSTERED 
                (
                    [ACTION_MONEY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_PACKAGE_LIST](
                    [SHIP_PACKAGE_ID] [int] IDENTITY(1,1) NOT NULL,
                    [SHIP_ID] [int] NOT NULL,
                    [STOCK_ID] [int] NULL,
                    [AMOUNT] [int] NULL,
                    [CONTROL_AMOUNT] [int] NULL,
                 CONSTRAINT [PK_SHIP_PACKAGE_LIST_SHIP_PACKAGE_ID] PRIMARY KEY CLUSTERED 
                (
                    [SHIP_PACKAGE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_PACKAGE_LIST_HISTORY](
                    [SHIP_PACKAGE_HISTORY_ID] [int] IDENTITY(1,1) NOT NULL,
                    [SHIP_ID] [int] NOT NULL,
                    [STOCK_ID] [int] NULL,
                    [AMOUNT] [int] NULL,
                    [CONTROL_AMOUNT] [int] NULL,
                    [CONTROL_ID] [int] NULL,
                    [RECORD_EMP] [nvarchar](50) NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_DATE] [datetime] NULL,
                 CONSTRAINT [PK_SHIP_PACKAGE_LIST_HISTORY_SHIP_PACKAGE_HISTORY_ID] PRIMARY KEY CLUSTERED 
                (
                    [SHIP_PACKAGE_HISTORY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT](
                    [SHIP_RESULT_ID] [int] IDENTITY(1,1) NOT NULL,
                    [SHIP_METHOD_TYPE] [int] NULL,
                    [SERVICE_COMPANY_ID] [int] NULL,
                    [SERVICE_MEMBER_ID] [int] NULL,
                    [ASSETP_ID] [int] NULL,
                    [DELIVER_EMP] [int] NULL,
                    [PLATE] [nvarchar](50) NULL,
                    [NOTE] [nvarchar](max) NULL,
                    [MAIN_SHIP_FIS_NO] [nvarchar](50) NULL,
                    [SHIP_FIS_NO] [nvarchar](50) NULL,
                    [DELIVER_PAPER_NO] [nvarchar](43) NULL,
                    [REFERENCE_NO] [nvarchar](43) NULL,
                    [OUT_DATE] [datetime] NULL,
                    [DELIVERY_DATE] [datetime] NULL,
                    [DELIVER_POS] [int] NULL,
                    [DEPARTMENT_ID] [int] NULL,
                    [SHIP_STAGE] [int] NULL,
                    [COST_VALUE] [float] NULL,
                    [COST_VALUE_MONEY] [nvarchar](43) NULL,
                    [COST_VALUE2] [float] NULL,
                    [COST_VALUE2_MONEY] [nvarchar](43) NULL,
                    [CALCULATE_TYPE] [int] NULL,
                    [COMPANY_ID] [int] NULL,
                    [PARTNER_ID] [int] NULL,
                    [CONSUMER_ID] [int] NULL,
                    [IS_TYPE] [int] NULL,
                    [SENDING_ADDRESS] [nvarchar](300) NULL,
                    [SENDING_POSTCODE] [nvarchar](43) NULL,
                    [SENDING_SEMT] [nvarchar](43) NULL,
                    [SENDING_COUNTY_ID] [int] NULL,
                    [SENDING_CITY_ID] [int] NULL,
                    [SENDING_COUNTRY_ID] [int] NULL,
                    [LOCATION_ID] [int] NULL,
                    [EQUIPMENT_PLANNING_ID] [int] NULL,
                    [IS_ORDER_TERMS] [bit] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [INSURANCE_COMP_ID] [int] NULL,
                    [INSURANCE_COMP_PART] [int] NULL,
                    [DUTY_COMP_ID] [int] NULL,
                    [DUTY_COMP_PARTNER] [int] NULL,
                    [WAREHOUSE_ENTRY_DATE] [datetime] NULL,
                    [ASSETP] [nvarchar](50) NULL,
                    [DELIVER_EMP_NAME] [nvarchar](150) NULL,
                    [PROJECT_ID] [int] NULL,
                    [OTHER_MONEY_VALUE] [float] NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [DELIVER_EMP_TC] [nvarchar](11) NULL,
                    [PLATE2] [nvarchar](25) NULL,
                    [SERVICE_CONSUMER_MEMBER_ID] [int] NULL,
                    [SERVICE_CONSUMER_ID] [int] NULL,
                 CONSTRAINT [PK_SHIP_RESULT_SHIP_RESULT_ID] PRIMARY KEY CLUSTERED 
                (
                    [SHIP_RESULT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT_PACKAGE](
                    [SHIP_RESULT_PACKAGE_ID] [int] IDENTITY(1,1) NOT NULL,
                    [SHIP_ID] [int] NULL,
                    [PACKAGE_PIECE] [float] NULL,
                    [PACKAGE_TYPE] [int] NULL,
                    [PACKAGE_DIMENTION] [nvarchar](200) NULL,
                    [PACKAGE_WEIGHT] [float] NULL,
                    [TOTAL_PRICE] [float] NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [BARCODE] [nvarchar](200) NULL,
                    [PACK_EMP_ID] [int] NULL,
                    [SHIP_NO] [int] NULL,
                    [PACKET_AMOUNT] [float] NULL,
                    [CONTAINER_AMOUNT] [float] NULL,
                    [GROSSTOTAL] [float] NULL,
                    [PACKAGE_WEIGHT_NET] [float] NULL,
                 CONSTRAINT [PK_SHIP_RESULT_PACKAGE_SHIP_RESULT_PACKAGE_ID] PRIMARY KEY CLUSTERED 
                (
                    [SHIP_RESULT_PACKAGE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT_PACKAGE_PRODUCT](
                    [SHIP_RESULT_PACKAGE_PRODUCT_ID] [int] IDENTITY(1,1) NOT NULL,
                    [SHIP_RESULT_PACKAGE_ID] [int] NULL,
                    [STOCK_ID] [int] NULL,
                    [SHIP_ID] [int] NULL,
                    [AMOUNT] [float] NULL,
                    [NET_WEIGHT] [float] NULL,
                    [GROSS_WEIGHT] [float] NULL,
                    [CONTAINER_AMOUNT] [float] NULL,
                    [UNIT] [nvarchar](50) NULL,
                    [PRODUCTION_YEAR] [nvarchar](10) NULL,
                    [MANIFACTURE_IN] [nvarchar](100) NULL,
                    [DEMAND_NUMBER] [nvarchar](100) NULL,
                    [PACKAGE_AMOUNT] [int] NULL,
                    [PACKAGE_TYPE_ID] [int] NULL,
                 CONSTRAINT [PK_SHIP_RESULT_PACKAGE_PRODUCT] PRIMARY KEY CLUSTERED 
                (
                    [SHIP_RESULT_PACKAGE_PRODUCT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT_ROW](
                    [SHIP_RESULT_ROW_ID] [int] IDENTITY(1,1) NOT NULL,
                    [SHIP_RESULT_ID] [int] NULL,
                    [SHIP_ID] [int] NULL,
                    [SHIP_NUMBER] [nvarchar](50) NULL,
                    [SHIP_DATE] [datetime] NULL,
                    [DELIVER_COMP] [nvarchar](200) NULL,
                    [DELIVER_TYPE] [nvarchar](200) NULL,
                    [DELIVER_ADRESS] [nvarchar](max) NULL,
                    [ORDER_ID] [int] NULL,
                    [ORDER_ROW_ID] [int] NULL,
                    [ORDER_ROW_AMOUNT] [float] NULL,
                    [ORDER_NUMBER] [nvarchar](50) NULL,
                    [SHIP_RESULT_ROW_AMOUNT] [float] NULL,
                    [WRK_ROW_ID] [nvarchar](40) NULL,
                    [WRK_ROW_RELATION_ID] [nvarchar](40) NULL,
                    [IS_PROBLEM] [bit] NULL,
                    [OLD_ORDER_ROW_CURRENCY] [int] NULL,
                    [INVOICE_ID] [int] NULL,
                    [SHIP_PERIOD_ID] [int] NULL,
                 CONSTRAINT [PK_SHIP_RESULT_ROW_SHIP_RESULT_ROW_ID] PRIMARY KEY CLUSTERED 
                (
                    [SHIP_RESULT_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT_ROW_COMPLETE](
                    [SHIP_RESULT_ROW_COMPLETE_ID] [int] IDENTITY(1,1) NOT NULL,
                    [SHIP_RESULT_ID] [int] NULL,
                    [PROBLEM_RESULT_ID] [bit] NULL,
                    [ERROR_CASE_ID] [int] NULL,
                    [PROBLEM_CASE_ID] [int] NULL,
                    [PROBLEM_DETAIL] [nvarchar](500) NULL,
                    [IS_GIVE_SERVICE] [bit] NULL,
                    [WRK_ROW_ID] [nvarchar](40) NULL,
                    [WRK_ROW_RELATION_ID] [nvarchar](40) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                 CONSTRAINT [PK_SHIP_RESULT_ROW_COMPLETE_SHIP_RESULT_ROW_COMPLETE_ID] PRIMARY KEY CLUSTERED 
                (
                    [SHIP_RESULT_ROW_COMPLETE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT_ROW_COMPONENT](
                    [SHIP_RESULT_ROW_COMPONENT_ID] [int] IDENTITY(1,1) NOT NULL,
                    [SHIP_RESULT_ROW_ID] [int] NULL,
                    [SHIP_RESULT_ID] [int] NULL,
                    [COMPONENT_PRODUCT_ID] [int] NULL,
                    [COMPONENT_PRODUCT_NAME] [nvarchar](500) NULL,
                    [COMPONENT_STOCK_ID] [int] NULL,
                    [COMPONENT_SPECT_ID] [int] NULL,
                    [COMPONENT_SPECT_ROW_ID] [int] NULL,
                    [COMPONENT_AMOUNT] [float] NULL,
                    [ORDER_ROW_ID] [int] NULL,
                    [ORDER_ROW_PRODUCT_ID] [int] NULL,
                    [SHIP_RESULT_ROW_AMOUNT] [float] NULL,
                    [LINE_NUMBER] [int] NULL,
                    [WRK_ROW_RELATION_ID] [nvarchar](40) NULL,
                 CONSTRAINT [PK_SHIP_RESULT_ROW_COMPONENT_SHIP_RESULT_ROW_COMPONENT_ID] PRIMARY KEY CLUSTERED 
                (
                    [SHIP_RESULT_ROW_COMPONENT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_ROW](
                    [SHIP_ROW_ID] [int] IDENTITY(1,1) NOT NULL,
                    [SHIP_ID] [int] NULL,
                    [PURCHASE_SALES] [bit] NULL,
                    [SHIP_STATUS] [int] NULL DEFAULT ((1)),
                    [PRODUCT_ID] [int] NULL,
                    [PRICE] [float] NULL,
                    [PRICE_OTHER] [float] NULL,
                    [AMOUNT] [float] NULL,
                    [UNIT] [nvarchar](43) NULL,
                    [UNIT_ID] [int] NULL,
                    [TAX] [float] NULL,
                    [PAYMETHOD_ID] [int] NULL,
                    [ORDER_ROW] [int] NULL,
                    [CATALOG_ID] [int] NULL,
                    [STOCK_ID] [int] NULL,
                    [NAME_PRODUCT] [nvarchar](500) NULL,
                    [SHIP_DATE] [datetime] NULL,
                    [SPECT_VAR_ID] [int] NULL,
                    [SPECT_VAR_NAME] [nvarchar](500) NULL,
                    [COST_ID] [int] NULL,
                    [COST_PRICE] [float] NULL,
                    [MARGIN] [float] NULL,
                    [EXTRA_COST] [float] NULL,
                    [DISCOUNT] [float] NULL DEFAULT ((0)),
                    [DISCOUNT2] [float] NULL DEFAULT ((0)),
                    [DISCOUNT3] [float] NULL DEFAULT ((0)),
                    [DISCOUNT4] [float] NULL DEFAULT ((0)),
                    [DISCOUNT5] [float] NULL DEFAULT ((0)),
                    [DISCOUNT6] [float] NULL DEFAULT ((0)),
                    [DISCOUNT7] [float] NULL DEFAULT ((0)),
                    [DISCOUNT8] [float] NULL DEFAULT ((0)),
                    [DISCOUNT9] [float] NULL DEFAULT ((0)),
                    [DISCOUNT10] [float] NULL DEFAULT ((0)),
                    [DISCOUNTTOTAL] [float] NULL,
                    [GROSSTOTAL] [float] NULL,
                    [NETTOTAL] [float] NULL,
                    [TAXTOTAL] [float] NULL,
                    [DELIVER_DATE] [datetime] NULL,
                    [DELIVER_DEPT] [int] NULL,
                    [DELIVER_LOC] [int] NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [OTHER_MONEY_VALUE] [float] NULL,
                    [OTHER_MONEY_GROSS_TOTAL] [float] NULL,
                    [LOT_NO] [nvarchar](100) NULL,
                    [DARALI] [float] NULL,
                    [DARA] [float] NULL,
                    [ROW_ORDER_ID] [int] NULL,
                    [PROM_COMISSION] [float] NULL,
                    [PROM_COST] [float] NULL,
                    [DISCOUNT_COST] [float] NULL,
                    [IS_PROMOTION] [bit] NULL,
                    [PROM_ID] [int] NULL,
                    [PROM_STOCK_ID] [int] NULL,
                    [IMPORT_INVOICE_ID] [int] NULL,
                    [IMPORT_PERIOD_ID] [int] NULL,
                    [IS_COMMISSION] [bit] NULL DEFAULT ((0)),
                    [UNIQUE_RELATION_ID] [nvarchar](100) NULL,
                    [PRODUCT_NAME2] [nvarchar](600) NULL,
                    [AMOUNT2] [float] NULL,
                    [UNIT2] [nvarchar](50) NULL,
                    [EXTRA_PRICE] [float] NULL,
                    [SHELF_NUMBER] [int] NULL,
                    [PRODUCT_MANUFACT_CODE] [nvarchar](100) NULL,
                    [EXTRA_PRICE_TOTAL] [float] NULL,
                    [OTV_ORAN] [float] NULL,
                    [OTVTOTAL] [float] NULL,
                    [BASKET_EXTRA_INFO_ID] [int] NULL,
                    [SELECT_INFO_EXTRA] [int] NULL,
                    [DETAIL_INFO_EXTRA] [nvarchar](500) NULL,
                    [PROM_RELATION_ID] [nvarchar](100) NULL,
                    [RELATED_SHIP_ID] [int] NULL,
                    [RELATED_SHIP_PERIOD] [int] NULL,
                    [BASKET_EMPLOYEE_ID] [int] NULL,
                    [LIST_PRICE] [float] NULL,
                    [NUMBER_OF_INSTALLMENT] [int] NULL,
                    [DUE_DATE] [int] NULL,
                    [EXTRA_PRICE_OTHER_TOTAL] [float] NULL,
                    [PRICE_CAT] [int] NULL,
                    [KARMA_PRODUCT_ID] [int] NULL,
                    [SERVICE_ID] [int] NULL,
                    [EK_TUTAR_PRICE] [float] NULL,
                    [ROW_INTERNALDEMAND_ID] [int] NULL,
                    [WRK_ROW_ID] [nvarchar](40) NULL,
                    [WRK_ROW_RELATION_ID] [nvarchar](40) NULL,
                    [RELATED_ACTION_ID] [int] NULL,
                    [RELATED_ACTION_TABLE] [nvarchar](43) NULL,
                    [DEPTH_VALUE] [float] NULL,
                    [WIDTH_VALUE] [float] NULL,
                    [HEIGHT_VALUE] [float] NULL,
                    [ROW_PROJECT_ID] [int] NULL,
                    [TO_SHELF_NUMBER] [int] NULL,
                    [ROW_PAYMETHOD_ID] [int] NULL,
                    [ROW_WORK_ID] [int] NULL,
                    [EXPENSE_CENTER_ID] [int] NULL,
                    [EXPENSE_ITEM_ID] [int] NULL,
                    [ACTIVITY_TYPE_ID] [int] NULL,
                    [ACC_CODE] [nvarchar](100) NULL,
                    [SUBSCRIPTION_ID] [int] NULL,
                    [ASSETP_ID] [int] NULL,
                    [BSMV_RATE] [float] NULL,
                    [BSMV_AMOUNT] [float] NULL,
                    [BSMV_CURRENCY] [float] NULL,
                    [OIV_RATE] [float] NULL,
                    [OIV_AMOUNT] [float] NULL,
                    [TEVKIFAT_RATE] [float] NULL,
                    [TEVKIFAT_AMOUNT] [float] NULL,
                    [REASON_CODE] [int] NULL,
                    [REASON_NAME] [nvarchar](250) NULL,
                    [GTIP_NUMBER] [nvarchar](250) NULL,
                    [WEIGHT] [float] NULL,
                    [SPECIFIC_WEIGHT] [float] NULL,
                    [VOLUME] [float] NULL,
                 CONSTRAINT [PK_SHIP_ROW_SHIP_ROW_ID] PRIMARY KEY CLUSTERED 
                (
                    [SHIP_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_ROW_HISTORY](
                    [SHIP_ROW_HISTORY_ID] [int] IDENTITY(1,1) NOT NULL,
                    [SHIP_HISTORY_ID] [int] NULL,
                    [SHIP_ROW_ID] [int] NULL,
                    [SHIP_ID] [int] NULL,
                    [PURCHASE_SALES] [bit] NULL,
                    [SHIP_STATUS] [int] NULL DEFAULT ((1)),
                    [PRODUCT_ID] [int] NULL,
                    [PRICE] [float] NULL,
                    [PRICE_OTHER] [float] NULL,
                    [AMOUNT] [float] NULL,
                    [UNIT] [nvarchar](43) NULL,
                    [UNIT_ID] [int] NULL,
                    [TAX] [float] NULL,
                    [PAYMETHOD_ID] [int] NULL,
                    [ORDER_ROW] [int] NULL,
                    [CATALOG_ID] [int] NULL,
                    [STOCK_ID] [int] NULL,
                    [NAME_PRODUCT] [nvarchar](500) NULL,
                    [SHIP_DATE] [datetime] NULL,
                    [SPECT_VAR_ID] [int] NULL,
                    [SPECT_VAR_NAME] [nvarchar](500) NULL,
                    [COST_ID] [int] NULL,
                    [COST_PRICE] [float] NULL,
                    [MARGIN] [float] NULL,
                    [EXTRA_COST] [float] NULL,
                    [DISCOUNT] [float] NULL DEFAULT ((0)),
                    [DISCOUNT2] [float] NULL DEFAULT ((0)),
                    [DISCOUNT3] [float] NULL DEFAULT ((0)),
                    [DISCOUNT4] [float] NULL DEFAULT ((0)),
                    [DISCOUNT5] [float] NULL DEFAULT ((0)),
                    [DISCOUNT6] [float] NULL DEFAULT ((0)),
                    [DISCOUNT7] [float] NULL DEFAULT ((0)),
                    [DISCOUNT8] [float] NULL DEFAULT ((0)),
                    [DISCOUNT9] [float] NULL DEFAULT ((0)),
                    [DISCOUNT10] [float] NULL DEFAULT ((0)),
                    [DISCOUNTTOTAL] [float] NULL,
                    [GROSSTOTAL] [float] NULL,
                    [NETTOTAL] [float] NULL,
                    [TAXTOTAL] [float] NULL,
                    [DELIVER_DATE] [datetime] NULL,
                    [DELIVER_DEPT] [int] NULL,
                    [DELIVER_LOC] [int] NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [OTHER_MONEY_VALUE] [float] NULL,
                    [OTHER_MONEY_GROSS_TOTAL] [float] NULL,
                    [LOT_NO] [nvarchar](100) NULL,
                    [DARALI] [float] NULL,
                    [DARA] [float] NULL,
                    [ROW_ORDER_ID] [int] NULL,
                    [PROM_COMISSION] [float] NULL,
                    [PROM_COST] [float] NULL,
                    [DISCOUNT_COST] [float] NULL,
                    [IS_PROMOTION] [bit] NULL,
                    [PROM_ID] [int] NULL,
                    [PROM_STOCK_ID] [int] NULL,
                    [IMPORT_INVOICE_ID] [int] NULL,
                    [IMPORT_PERIOD_ID] [int] NULL,
                    [IS_COMMISSION] [bit] NULL DEFAULT ((0)),
                    [UNIQUE_RELATION_ID] [nvarchar](100) NULL,
                    [PRODUCT_NAME2] [nvarchar](500) NULL,
                    [EXTRA_PRICE_OTHER_TOTAL] [float] NULL,
                    [AMOUNT2] [float] NULL,
                    [UNIT2] [nvarchar](50) NULL,
                    [EXTRA_PRICE] [float] NULL,
                    [SHELF_NUMBER] [int] NULL,
                    [PRODUCT_MANUFACT_CODE] [nvarchar](100) NULL,
                    [EXTRA_PRICE_TOTAL] [float] NULL,
                    [OTV_ORAN] [float] NULL,
                    [OTVTOTAL] [float] NULL,
                    [BASKET_EXTRA_INFO_ID] [int] NULL,
                    [SELECT_INFO_EXTRA] [int] NULL,
                    [DETAIL_INFO_EXTRA] [nvarchar](500) NULL,
                    [PROM_RELATION_ID] [nvarchar](100) NULL,
                    [RELATED_SHIP_ID] [int] NULL,
                    [RELATED_SHIP_PERIOD] [int] NULL,
                    [BASKET_EMPLOYEE_ID] [int] NULL,
                    [LIST_PRICE] [float] NULL,
                    [NUMBER_OF_INSTALLMENT] [int] NULL,
                    [DUE_DATE] [int] NULL,
                    [PRICE_CAT] [int] NULL,
                    [KARMA_PRODUCT_ID] [int] NULL,
                    [SERVICE_ID] [int] NULL,
                    [EK_TUTAR_PRICE] [float] NULL,
                    [ROW_INTERNALDEMAND_ID] [int] NULL,
                    [DEPTH_VALUE] [float] NULL,
                    [WIDTH_VALUE] [float] NULL,
                    [HEIGHT_VALUE] [float] NULL,
                    [ROW_PROJECT_ID] [int] NULL,
                    [WRK_ROW_ID] [nvarchar](40) NULL,
                    [WRK_ROW_RELATION_ID] [nvarchar](40) NULL,
                 CONSTRAINT [PK_SHIP_ROW_HISTORY_SHIP_ROW_HISTORY_ID] PRIMARY KEY CLUSTERED 
                (
                    [SHIP_ROW_HISTORY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_ROW_RELATION](
                    [SHIP_ROW_RELATION_ID] [int] IDENTITY(1,1) NOT NULL,
                    [PRODUCT_ID] [int] NULL,
                    [STOCK_ID] [int] NULL,
                    [SPECT_VAR_ID] [int] NULL,
                    [SHELF_NUMBER] [int] NULL,
                    [AMOUNT] [float] NULL,
                    [SHIP_ID] [int] NULL,
                    [SHIP_PERIOD] [int] NULL,
                    [TO_SHIP_ID] [int] NULL,
                    [TO_SHIP_TYPE] [int] NULL,
                    [TO_INVOICE_ID] [int] NULL,
                    [TO_INVOICE_CAT] [int] NULL,
                    [SHIP_WRK_ROW_ID] [nvarchar](50) NULL,
                 CONSTRAINT [PK_SHIP_ROW_RELATION_SHIP_ROW_RELATION_ID] PRIMARY KEY CLUSTERED 
                (
                    [SHIP_ROW_RELATION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_TO_SHIP](
                    [SHIP_TO_SHIP_ID] [int] IDENTITY(1,1) NOT NULL,
                    [TO_SHIP_ID] [int] NULL,
                    [TO_SHIP_TYPE] [int] NULL,
                    [FROM_SHIP_ID] [int] NULL,
                    [FROM_SHIP_PERIOD] [int] NULL,
                 CONSTRAINT [PK_SHIP_TO_SHIP_SHIP_TO_SHIP_ID] PRIMARY KEY CLUSTERED 
                (
                    [SHIP_TO_SHIP_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_EXCHANGE](
                    [STOCK_EXCHANGE_ID] [int] IDENTITY(1,1) NOT NULL,
                    [PROCESS_TYPE] [int] NULL,
                    [PROCESS_CAT] [int] NULL,
                    [PROCESS_DATE] [datetime] NULL,
                    [STOCK_ID] [int] NULL,
                    [PRODUCT_ID] [int] NULL,
                    [SPECT_ID] [int] NULL,
                    [SPECT_MAIN_ID] [int] NULL,
                    [DEPARTMENT_ID] [int] NULL,
                    [LOCATION_ID] [int] NULL,
                    [EXCHANGE_NUMBER] [nvarchar](50) NULL,
                    [EXIT_DEPARTMENT_ID] [int] NULL,
                    [EXIT_LOCATION_ID] [int] NULL,
                    [EXIT_STOCK_ID] [int] NULL,
                    [EXIT_PRODUCT_ID] [int] NULL,
                    [EXIT_SPECT_ID] [int] NULL,
                    [EXIT_SPECT_MAIN_ID] [int] NULL,
                    [EXIT_AMOUNT] [float] NULL,
                    [EXIT_UNIT] [nvarchar](43) NULL,
                    [EXIT_UNIT_ID] [int] NULL,
                    [EXIT_UNIT2] [nvarchar](50) NULL,
                    [UNIT] [nvarchar](43) NULL,
                    [UNIT_ID] [int] NULL,
                    [UNIT2] [nvarchar](50) NULL,
                    [AMOUNT] [float] NULL,
                    [STOCK_EXCHANGE_TYPE] [bit] NULL,
                    [EXIT_SHELF_NUMBER] [int] NULL,
                    [SHELF_NUMBER] [int] NULL,
                    [DETAIL] [nvarchar](250) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPD_STATUS] [bit] NULL,
                    [EXIT_LOT_NO] [nvarchar](100) NULL,
                    [LOT_NO] [nvarchar](100) NULL,
                    [WRK_ROW_ID] [nvarchar](40) NULL,
                    [PROCESS_STAGE] [int] NULL,
                    [AMOUNT2] [float] NULL,
                    [EXIT_AMOUNT2] [float] NULL,
                 CONSTRAINT [PK_STOCK_EXCHANGE_STOCK_EXCHANGE_ID] PRIMARY KEY CLUSTERED 
                (
                    [STOCK_EXCHANGE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_FIS](
                    [FIS_ID] [int] IDENTITY(1,1) NOT NULL,
                    [FIS_TYPE] [int] NULL,
                    [FIS_NUMBER] [nvarchar](50) NULL,
                    [LOCATION_OUT] [int] NULL,
                    [DEPARTMENT_OUT] [int] NULL,
                    [SHIP_METHOD] [int] NULL,
                    [LOCATION_IN] [int] NULL,
                    [DEPARTMENT_IN] [int] NULL,
                    [EMPLOYEE_ID] [int] NULL,
                    [FIS_DATE] [datetime] NULL,
                    [DELIVER_DATE] [datetime] NULL,
                    [PROD_ORDER_NUMBER] [int] NULL,
                    [PROD_ORDER_RESULT_NUMBER] [int] NULL,
                    [PROJECT_ID] [int] NULL,
                    [PROCESS_CAT] [int] NULL,
                    [REF_NO] [nvarchar](2000) NULL,
                    [IS_PRODUCTION] [bit] NULL DEFAULT ((0)),
                    [FIS_DETAIL] [nvarchar](max) NULL,
                    [SUBSCRIPTION_ID] [int] NULL,
                    [IS_STOCK_TRANSFER] [int] NULL,
                    [IS_COST] [bit] NULL,
                    [RELATED_SHIP_ID] [int] NULL,
                    [COMPANY_ID] [int] NULL,
                    [PARTNER_ID] [int] NULL,
                    [CONSUMER_ID] [int] NULL,
                    [PROJECT_ID_IN] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [WORK_ID] [int] NULL,
                    [SERVICE_ID] [int] NULL,
                    [IS_RELATED_PROJECT] [bit] NULL,
                    [RELATED_INVOICE_ID] [int] NULL,
                    [PROCESS_STAGE] [int] NULL,
                 CONSTRAINT [PK_STOCK_FIS_FIS_ID] PRIMARY KEY CLUSTERED 
                (
                    [FIS_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_FIS_INFO_PLUS](
                    [INFO_ID] [int] IDENTITY(1,1) NOT NULL,
                    [FIS_ID] [int] NULL,
                    [PROPERTY1] [nvarchar](500) NULL,
                    [PROPERTY2] [nvarchar](500) NULL,
                    [PROPERTY3] [nvarchar](500) NULL,
                    [PROPERTY4] [nvarchar](500) NULL,
                    [PROPERTY5] [nvarchar](500) NULL,
                    [PROPERTY6] [nvarchar](500) NULL,
                    [PROPERTY7] [nvarchar](500) NULL,
                    [PROPERTY8] [nvarchar](500) NULL,
                    [PROPERTY9] [nvarchar](500) NULL,
                    [PROPERTY10] [nvarchar](500) NULL,
                    [PROPERTY11] [nvarchar](500) NULL,
                    [PROPERTY12] [nvarchar](500) NULL,
                    [PROPERTY13] [nvarchar](500) NULL,
                    [PROPERTY14] [nvarchar](500) NULL,
                    [PROPERTY15] [nvarchar](500) NULL,
                    [PROPERTY16] [nvarchar](500) NULL,
                    [PROPERTY17] [nvarchar](500) NULL,
                    [PROPERTY18] [nvarchar](500) NULL,
                    [PROPERTY19] [nvarchar](500) NULL,
                    [PROPERTY20] [nvarchar](500) NULL,
                    [PROPERTY21] [nvarchar](500) NULL,
                    [PROPERTY22] [nvarchar](500) NULL,
                    [PROPERTY23] [nvarchar](500) NULL,
                    [PROPERTY24] [nvarchar](500) NULL,
                    [PROPERTY25] [nvarchar](500) NULL,
                    [PROPERTY26] [nvarchar](500) NULL,
                    [PROPERTY27] [nvarchar](500) NULL,
                    [PROPERTY28] [nvarchar](500) NULL,
                    [PROPERTY29] [nvarchar](500) NULL,
                    [PROPERTY30] [nvarchar](500) NULL,
                    [PROPERTY31] [nvarchar](500) NULL,
                    [PROPERTY32] [nvarchar](500) NULL,
                    [PROPERTY33] [nvarchar](500) NULL,
                    [PROPERTY34] [nvarchar](500) NULL,
                    [PROPERTY35] [nvarchar](500) NULL,
                    [PROPERTY36] [nvarchar](500) NULL,
                    [PROPERTY37] [nvarchar](500) NULL,
                    [PROPERTY38] [nvarchar](500) NULL,
                    [PROPERTY39] [nvarchar](500) NULL,
                    [PROPERTY40] [nvarchar](500) NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                 CONSTRAINT [PK_STOCK_FIS_INFO_PLUS] PRIMARY KEY CLUSTERED 
                (
                    [INFO_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_FIS_INFO_PLUS_HISTORY](
                    [INFO_ID_HIST] [int] IDENTITY(1,1) NOT NULL,
                    [INFO_ID] [int] NULL,
                    [FIS_ID] [int] NULL,
                    [PROPERTY1] [nvarchar](500) NULL,
                    [PROPERTY2] [nvarchar](500) NULL,
                    [PROPERTY3] [nvarchar](500) NULL,
                    [PROPERTY4] [nvarchar](500) NULL,
                    [PROPERTY5] [nvarchar](500) NULL,
                    [PROPERTY6] [nvarchar](500) NULL,
                    [PROPERTY7] [nvarchar](500) NULL,
                    [PROPERTY8] [nvarchar](500) NULL,
                    [PROPERTY9] [nvarchar](500) NULL,
                    [PROPERTY10] [nvarchar](500) NULL,
                    [PROPERTY11] [nvarchar](500) NULL,
                    [PROPERTY12] [nvarchar](500) NULL,
                    [PROPERTY13] [nvarchar](500) NULL,
                    [PROPERTY14] [nvarchar](500) NULL,
                    [PROPERTY15] [nvarchar](500) NULL,
                    [PROPERTY16] [nvarchar](500) NULL,
                    [PROPERTY17] [nvarchar](500) NULL,
                    [PROPERTY18] [nvarchar](500) NULL,
                    [PROPERTY19] [nvarchar](500) NULL,
                    [PROPERTY20] [nvarchar](500) NULL,
                    [PROPERTY21] [nvarchar](500) NULL,
                    [PROPERTY22] [nvarchar](500) NULL,
                    [PROPERTY23] [nvarchar](500) NULL,
                    [PROPERTY24] [nvarchar](500) NULL,
                    [PROPERTY25] [nvarchar](500) NULL,
                    [PROPERTY26] [nvarchar](500) NULL,
                    [PROPERTY27] [nvarchar](500) NULL,
                    [PROPERTY28] [nvarchar](500) NULL,
                    [PROPERTY29] [nvarchar](500) NULL,
                    [PROPERTY30] [nvarchar](500) NULL,
                    [PROPERTY31] [nvarchar](500) NULL,
                    [PROPERTY32] [nvarchar](500) NULL,
                    [PROPERTY33] [nvarchar](500) NULL,
                    [PROPERTY34] [nvarchar](500) NULL,
                    [PROPERTY35] [nvarchar](500) NULL,
                    [PROPERTY36] [nvarchar](500) NULL,
                    [PROPERTY37] [nvarchar](500) NULL,
                    [PROPERTY38] [nvarchar](500) NULL,
                    [PROPERTY39] [nvarchar](500) NULL,
                    [PROPERTY40] [nvarchar](500) NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                 CONSTRAINT [PK_STOCK_FIS_INFO_PLUS_HISTORY] PRIMARY KEY CLUSTERED 
                (
                    [INFO_ID_HIST] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_FIS_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL,
                    [ACTION_MONEY_ID] [int] IDENTITY(1,1) NOT NULL,
                CONSTRAINT [PK_STOCK_FIS_MONEY] PRIMARY KEY CLUSTERED 
                (
                    [ACTION_MONEY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_FIS_ROW](
                    [STOCK_FIS_ROW_ID] [int] IDENTITY(1,1) NOT NULL,
                    [FIS_ID] [int] NULL,
                    [FIS_NUMBER] [nvarchar](50) NULL,
                    [TOTAL] [float] NULL,
                    [TOTAL_TAX] [float] NULL,
                    [NET_TOTAL] [float] NULL,
                    [STOCK_ID] [int] NULL,
                    [AMOUNT] [float] NULL,
                    [UNIT] [nvarchar](43) NULL,
                    [UNIT_ID] [int] NULL,
                    [PRICE] [float] NULL,
                    [TAX] [float] NULL,
                    [DISCOUNT1] [float] NULL,
                    [DISCOUNT2] [float] NULL,
                    [DISCOUNT3] [float] NULL,
                    [DISCOUNT4] [float] NULL,
                    [DISCOUNT5] [float] NULL,
                    [SPECT_VAR_ID] [int] NULL,
                    [SPECT_VAR_NAME] [nvarchar](500) NULL,
                    [LOT_NO] [nvarchar](100) NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [PRICE_OTHER] [float] NULL,
                    [COST_PRICE] [float] NULL,
                    [EXTRA_COST] [float] NULL,
                    [DUE_DATE] [float] NULL,
                    [UNIQUE_RELATION_ID] [nvarchar](100) NULL,
                    [PRODUCT_NAME2] [nvarchar](500) NULL,
                    [AMOUNT2] [float] NULL,
                    [UNIT2] [nvarchar](50) NULL,
                    [EXTRA_PRICE] [float] NULL,
                    [SHELF_NUMBER] [int] NULL,
                    [PRODUCT_MANUFACT_CODE] [nvarchar](100) NULL,
                    [EXTRA_PRICE_TOTAL] [float] NULL,
                    [INVENTORY_ID] [int] NULL,
                    [COST_ID] [int] NULL,
                    [DISCOUNT_COST] [float] NULL,
                    [DELIVER_DATE] [datetime] NULL,
                    [EXTRA_PRICE_OTHER_TOTAL] [float] NULL,
                    [RESERVE_DATE] [datetime] NULL,
                    [ROW_INTERNALDEMAND_ID] [int] NULL,
                    [SPEC_MAIN_ID] [int] NULL,
                    [WRK_ROW_ID] [nvarchar](40) NULL,
                    [WRK_ROW_RELATION_ID] [nvarchar](40) NULL,
                    [TO_SHELF_NUMBER] [int] NULL,
                    [DEPTH_VALUE] [float] NULL,
                    [WIDTH_VALUE] [float] NULL,
                    [HEIGHT_VALUE] [float] NULL,
                    [ROW_PROJECT_ID] [int] NULL,
                    [PBS_ID] [int] NULL,
                    [BASKET_EXTRA_INFO_ID] [int] NULL,
                    [SELECT_INFO_EXTRA] [int] NULL,
                    [DETAIL_INFO_EXTRA] [nvarchar](500) NULL,
                    [ROW_WORK_ID] [int] NULL,
                    [BASKET_EMPLOYEE_ID] [int] NULL,
                    [EXPENSE_CENTER_ID] [int] NULL,
                    [EXPENSE_ITEM_ID] [int] NULL,
                    [ACTIVITY_TYPE_ID] [int] NULL,
                    [ACC_CODE] [nvarchar](100) NULL,
                 CONSTRAINT [PK_STOCK_FIS_ROW_STOCK_FIS_ROW_ID] PRIMARY KEY CLUSTERED 
                (
                    [STOCK_FIS_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_PROFIL_CUMULATIVE_PRODUCTS](
                    [PROCESS_ROW_ID] [int] IDENTITY(1,1) NOT NULL,
                    [PRODUCT_ID] [int] NULL,
                    [STOCK_ID] [int] NULL,
                    [IS_PROCESS_COMPLETED] [bit] NULL,
                 CONSTRAINT [PK_STOCK_PROFIL_CUMULATIVE_PRODUCTS_PROCESS_ROW_ID] PRIMARY KEY CLUSTERED 
                (
                    [PROCESS_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_AMOUNT](
                    [STOCK_AMOUNT_ID] [int] IDENTITY(1,1) NOT NULL,
                    [PRODUCT_ID] [int] NULL,
                    [STOCK_ID] [int] NULL,
                    [SPEC_ID] [int] NULL,
                    [DEPARTMENT_ID] [int] NULL,
                    [LOCATION_ID] [int] NULL,
                    [REAL_STOCK] [float] NULL,
                    [SALEABLE_STOCK] [float] NULL,
                    [PURCHASE_RESERVED_IN] [float] NULL,
                    [SALES_RESERVED_OUT] [float] NULL,
                    [PRODUCTION_RESERVED_IN] [float] NULL,
                    [PRODUCTION_RESERVED_OUT] [float] NULL,
                    [INTERNAL_DEMAND] [float] NULL,
                 CONSTRAINT [PK_STOCKS_AMOUNT_STOCK_AMOUNT_ID] PRIMARY KEY CLUSTERED 
                (
                    [STOCK_AMOUNT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_ROW](
                    [STOCKS_ROW_ID] [int] IDENTITY(1,1) NOT NULL,
                    [STOCK_ID] [int] NULL,
                    [PRODUCT_ID] [int] NULL,
                    [UPD_ID] [int] NULL,
                    [PROCESS_TYPE] [int] NULL,
                    [STOCK_IN] [float] NULL DEFAULT ((0)),
                    [STOCK_OUT] [float] NULL DEFAULT ((0)),
                    [STORE] [int] NULL,
                    [STORE_LOCATION] [int] NULL,
                    [PROCESS_DATE] [datetime] NULL,
                    [SPECT_VAR_ID] [int] NULL,
                    [IS_ONCONSIGNMENT] [bit] NULL,
                    [LOT_NO] [nvarchar](100) NULL,
                    [SHELF_NUMBER] [int] NULL,
                    [PRODUCT_MANUFACT_CODE] [nvarchar](100) NULL,
                    [DELIVER_DATE] [datetime] NULL,
                    [AMOUNT2] [float] NULL,
                    [UNIT2] [nvarchar](50) NULL,
                    [ROW_ID] [int] NULL,
                    [WRK_ROW_ID] [nvarchar](50) NULL,
                    [DEPTH_VALUE] [float] NULL,
                    [WIDTH_VALUE] [float] NULL,
                    [HEIGHT_VALUE] [float] NULL,
                    [PROCESS_TIME] [datetime] NULL,
                 CONSTRAINT [PK_STOCKS_ROW_STOCKS_ROW_ID] PRIMARY KEY CLUSTERED 
                (
                    [STOCKS_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_ROW_CLOSED](
                    [STOCKS_ROW_CLOSED_ID] [int] NOT NULL,
                    [STOCK_ID] [int] NULL,
                    [PRODUCT_ID] [int] NULL,
                    [SPECT_MAIN_ID] [int] NULL,
                    [AMOUNT] [float] NULL,
                    [COST_PRICE] [float] NULL,
                    [MONEY_TYPE] [nvarchar](40) NULL,
                    [STORE] [int] NULL,
                    [STORE_LOCATION] [int] NULL,
                    [UPD_ID_IN] [int] NULL,
                    [PROCESS_TYPE_IN] [int] NULL,
                    [PROCESS_DATE_IN] [datetime] NULL,
                    [UPD_ID_OUT] [int] NULL,
                    [PROCESS_TYPE_OUT] [int] NULL,
                    [PROCESS_DATE_OUT] [datetime] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [COST_EXTRA_PRICE] [float] NULL,
                    [LAST_TOTAL_AMOUNT] [float] NULL,
                    [LAST_COST_PRICE] [float] NULL,
                    [LAST_TOTAL_PRICE] [float] NULL
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_ROW_RESERVED](
                    [STOCKS_RESERVED_ID] [int] IDENTITY(1,1) NOT NULL,
                    [STOCK_ID] [int] NULL,
                    [PRODUCT_ID] [int] NULL,
                    [STOCK_IN_RESERVED] [float] NULL,
                    [STOCK_OUT_RESERVED] [float] NULL,
                    [STORE] [int] NULL,
                    [STORE_LOCATION] [int] NULL,
                    [SPECT_VAR_ID] [int] NULL,
                    [ORDER_ID] [int] NULL,
                    [SHELF_NUMBER] [nvarchar](43) NULL,
                    [PRODUCT_MANUFACT_CODE] [nvarchar](50) NULL,
                 CONSTRAINT [PK_STOCKS_ROW_RESERVED_STOCKS_RESERVED_ID] PRIMARY KEY CLUSTERED 
                (
                    [STOCKS_RESERVED_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_ROW_UPD](
                    [STOCKS_UPD_ID] [int] IDENTITY(1,1) NOT NULL,
                    [ACTION_ID] [int] NULL,
                    [PROCESS_TYPE] [int] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                 CONSTRAINT [PK_STOCKS_ROW_UPD_STOCKS_UPD_ID] PRIMARY KEY CLUSTERED 
                (
                    [STOCKS_UPD_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STORE_EXPENSE](
                    [STORE_EXPENSE_ID] [int] IDENTITY(1,1) NOT NULL,
                    [EXPENSE_TYPE_ID] [int] NULL,
                    [DETAIL] [nvarchar](max) NULL,
                    [EXPENSE_MONEY] [float] NULL,
                    [MONEY_ID] [nvarchar](43) NULL,
                    [BRANCH_ID] [int] NULL,
                    [STORE_REPORT_DATE] [datetime] NULL,
                    [STORE_REPORT_ID] [int] NULL,
                    [CASH_ACTION_ID] [int] NULL,
                    [TAX] [float] NULL,
                    [TAX_TOTAL] [float] NULL,
                    [TOTAL] [float] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                 CONSTRAINT [PK_STORE_EXPENSE_STORE_EXPENSE_ID] PRIMARY KEY CLUSTERED 
                (
                    [STORE_EXPENSE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STORE_INCOME](
                    [STORE_INCOME_ID] [int] IDENTITY(1,1) NOT NULL,
                    [INCOME_TYPE_ID] [int] NULL,
                    [DETAIL] [nvarchar](max) NULL,
                    [INCOME_MONEY] [float] NOT NULL,
                    [MONEY_ID] [nvarchar](50) NOT NULL,
                    [BRANCH_ID] [int] NULL,
                    [STORE_REPORT_DATE] [datetime] NULL,
                    [STORE_REPORT_ID] [int] NULL,
                    [CASH_ACTION_ID] [int] NULL,
                    [TAX] [nvarchar](50) NULL,
                    [TAX_TOTAL] [float] NOT NULL,
                    [TOTAL] [float] NOT NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                 CONSTRAINT [PK_STORE_INCOME_STORE_INCOME_ID] PRIMARY KEY CLUSTERED 
                (
                    [STORE_INCOME_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STORE_POS_BANK](
                    [STORE_BANK_POS_ID] [int] IDENTITY(1,1) NOT NULL,
                    [BANK_ID] [int] NULL,
                    [SALES_CREDIT] [float] NULL,
                    [SALES_TAKSIT] [float] NULL,
                    [SALES_CREDIT_MONEY_ID] [nvarchar](43) NULL,
                    [SALES_TAKSIT_MONEY_ID] [nvarchar](43) NULL,
                    [BRANCH_ID] [int] NULL,
                    [STORE_REPORT_DATE] [datetime] NULL,
                    [STORE_REPORT_ID] [int] NULL,
                    [PUANLI_PESIN] [float] NULL,
                    [PUANLI] [float] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_DATE] [datetime] NULL,
                 CONSTRAINT [PK_STORE_POS_BANK_STORE_BANK_POS_ID] PRIMARY KEY CLUSTERED 
                (
                    [STORE_BANK_POS_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STORE_POS_BANK_DETAIL](
                    [STORE_BANK_POS_ID] [int] IDENTITY(1,1) NOT NULL,
                    [BANK_ID] [int] NULL,
                    [SALES_CREDIT] [float] NULL,
                    [SALES_TAKSIT] [float] NULL,
                    [SALES_CREDIT_MONEY_ID] [nvarchar](43) NULL,
                    [SALES_TAKSIT_MONEY_ID] [nvarchar](43) NULL,
                    [BRANCH_ID] [int] NULL,
                    [STORE_REPORT_DATE] [datetime] NULL,
                    [STORE_REPORT_ID] [int] NULL,
                    [PUANLI_PESIN] [float] NULL,
                    [PUANLI] [float] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_DATE] [datetime] NULL,
                 CONSTRAINT [PK_STORE_POS_BANK_DETAIL_STORE_BANK_POS_ID] PRIMARY KEY CLUSTERED 
                (
                    [STORE_BANK_POS_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STORE_POS_CASH](
                    [POS_ID] [int] IDENTITY(1,1) NOT NULL,
                    [SALES_CASH] [float] NULL,
                    [SALES_CREDIT] [float] NULL,
                    [SALES_TOTAL] [float] NULL,
                    [MONEY_ID] [nvarchar](50) NULL,
                    [EMPLOYEE_ID] [int] NULL,
                    [OPEN_CASH] [float] NULL,
                    [GIVEN_TOTAL] [float] NULL,
                    [STORE_REPORT_DATE] [datetime] NULL,
                    [BRANCH_ID] [int] NULL,
                    [POS_NO] [nvarchar](100) NULL,
                    [STORE_REPORT_ID] [int] NULL,
                    [Z_NO] [nvarchar](100) NULL,
                    [STORE_POS_ID] [int] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                 CONSTRAINT [PK_STORE_POS_CASH_POS_ID] PRIMARY KEY CLUSTERED 
                (
                    [POS_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STORE_REPORT](
                    [STORE_REPORT_ID] [int] IDENTITY(1,1) NOT NULL,
                    [STORE_REPORT_DATE] [datetime] NULL,
                    [BRANCH_ID] [int] NULL,
                    [REPORT_ORDER_EMP] [int] NULL,
                    [REPORT_APPROVAL_EMP] [int] NULL,
                    [REPORT_APPROVAL_DATE] [datetime] NULL,
                    [DEVREDEN] [float] NULL,
                    [DETAIL] [nvarchar](max) NULL,
                    [BANKAYA_YATAN] [float] NULL,
                    [DEVREDEN_IN] [float] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [int] NULL,
                    [RECEIVER_EMP_ID] [int] NULL,
                    [DELIVERED_TL] [int] NULL,
                    [POS_ID] [float] NULL,
                    [CASH_TL] [float] NULL,
                    [REMAINING_TRANSFERRED_EURO] [float] NULL,
                    [CASH_ID] [int] NULL,
                    [CASH_EURO] [float] NULL,
                    [REMAINING_TRANSFERRED_TL] [float] NULL,
                    [CASH_USD] [float] NULL,
                    [DELIVERED_EURO] [float] NULL,
                    [DELIVERED_USD] [float] NULL,
                    [DELIVERY_EMP_ID] [int] NULL,
                    [REMAINING_TRANSFERRED_USD] [float] NULL,
                 CONSTRAINT [PK_STORE_REPORT_STORE_REPORT_ID] PRIMARY KEY CLUSTERED 
                (
                    [STORE_REPORT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER](
                    [VOUCHER_ID] [int] IDENTITY(1,1) NOT NULL,
                    [VOUCHER_PAYROLL_ID] [int] NULL,
                    [VOUCHER_CODE] [nvarchar](50) NULL,
                    [VOUCHER_DUEDATE] [datetime] NULL,
                    [VOUCHER_NO] [nvarchar](50) NULL,
                    [VOUCHER_VALUE] [float] NULL,
                    [CURRENCY_ID] [nvarchar](43) NULL,
                    [DEBTOR_NAME] [nvarchar](150) NULL,
                    [VOUCHER_STATUS_ID] [int] NULL,
                    [ACCOUNT_NO] [nvarchar](50) NULL,
                    [VOUCHER_CITY] [nvarchar](50) NULL,
                    [VOUCHER_PURSE_NO] [nvarchar](50) NULL,
                    [SELF_VOUCHER] [bit] NULL,
                    [ACCOUNT_CODE] [nvarchar](50) NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [OTHER_MONEY_VALUE] [float] NULL,
                    [COMPANY_ID] [int] NULL,
                    [OTHER_MONEY2] [nvarchar](43) NULL,
                    [OTHER_MONEY_VALUE2] [float] NULL,
                    [CONSUMER_ID] [int] NULL,
                    [DELAY_INTEREST_SYSTEM_VALUE] [float] NULL,
                    [DELAY_INTEREST_OTHER_VALUE] [float] NULL,
                    [DELAY_INTEREST_VALUE2] [float] NULL,
                    [EARLY_PAYMENT_SYSTEM_VALUE] [float] NULL,
                    [EARLY_PAYMENT_OTHER_VALUE] [float] NULL,
                    [EARLY_PAYMENT_VALUE2] [float] NULL,
                    [EMPLOYEE_ID] [int] NULL,
                    [IS_PAY_TERM] [bit] NULL DEFAULT ((0)),
                    [CASH_ID] [int] NULL,
                    [OWNER_COMPANY_ID] [int] NULL,
                    [OWNER_CONSUMER_ID] [int] NULL,
                    [OWNER_EMPLOYEE_ID] [int] NULL,
                    [CH_OTHER_MONEY_VALUE] [float] NULL,
                    [CH_OTHER_MONEY] [nvarchar](43) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [OLD_STATUS] [int] NULL,
                    [ENTRY_DATE] [datetime] NULL,
                    [RESULT_ID] [int] NULL,
                 CONSTRAINT [PK_VOUCHER_VOUCHER_ID] PRIMARY KEY CLUSTERED 
                (
                    [VOUCHER_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_CLOSED](
                    [CLOSED_ROW_ID] [int] IDENTITY(1,1) NOT NULL,
                    [CARI_ACTION_ID] [int] NULL,
                    [ACTION_ID] [int] NULL,
                    [ACTION_TYPE_ID] [int] NULL,
                    [ACTION_VALUE] [float] NULL,
                    [CLOSED_AMOUNT] [float] NULL,
                    [OTHER_CLOSED_AMOUNT] [float] NULL,
                    [OTHER_MONEY] [nvarchar](50) NULL,
                    [IS_VOUCHER_DELAY] [bit] NULL,
                    [PAYROLL_ID] [int] NULL,
                 CONSTRAINT [PK_VOUCHER_CLOSED_CLOSED_ROW_ID] PRIMARY KEY CLUSTERED 
                (
                    [CLOSED_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_GUARANTORS](
                    [VOUCHER_GUARANTOR_ID] [int] IDENTITY(1,1) NOT NULL,
                    [VOUCHER_ID] [int] NULL,
                    [CONSUMER_ID] [int] NULL,
                    [AMOUNT] [float] NULL,
                    [AMOUNT2] [float] NULL,
                 CONSTRAINT [PK_VOUCHER_GUARANTORS_VOUCHER_GUARANTOR_ID] PRIMARY KEY CLUSTERED 
                (
                    [VOUCHER_GUARANTOR_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_HISTORY](
                    [HISTORY_ID] [int] IDENTITY(1,1) NOT NULL,
                    [VOUCHER_ID] [int] NULL,
                    [PAYROLL_ID] [int] NULL,
                    [STATUS] [int] NULL,
                    [ACT_DATE] [datetime] NULL,
                    [SELF_VOUCHER] [bit] NULL,
                    [UPD_STATUS] [bit] NULL,
                    [OTHER_MONEY] [nvarchar](43) NULL,
                    [OTHER_MONEY_VALUE] [float] NULL,
                    [COMPANY_ID] [int] NULL,
                    [OTHER_MONEY2] [nvarchar](43) NULL,
                    [OTHER_MONEY_VALUE2] [float] NULL,
                    [CONSUMER_ID] [int] NULL,
                    [SYSTEM_VALUE_DIFF] [float] NULL,
                    [SYSTEM_MONEY_DIFF] [nvarchar](43) NULL,
                    [SYSTEM_VALUE_DIFF2] [float] NULL,
                    [SYSTEM_MONEY_DIFF2] [nvarchar](43) NULL,
                    [OTHER_MONEY_VALUE_DIFF] [float] NULL,
                    [OTHER_MONEY_DIFF] [nvarchar](43) NULL,
                    [EMPLOYEE_ID] [int] NULL,
                    [DETAIL] [nvarchar](200) NULL,
                    [RECORD_DATE] [datetime] NULL,
                 CONSTRAINT [PK_VOUCHER_HISTORY_HISTORY_ID] PRIMARY KEY CLUSTERED 
                (
                    [HISTORY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_HISTORY_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_PAYROLL](
                    [ACTION_ID] [int] IDENTITY(1,1) NOT NULL,
                    [COMPANY_ID] [int] NULL,
                    [PAYROLL_NO] [nvarchar](43) NULL,
                    [PAYROLL_TYPE] [int] NOT NULL,
                    [PAYROLL_AVG_DUEDATE] [datetime] NULL,
                    [PAYROLL_TOTAL_VALUE] [float] NULL,
                    [CURRENCY_ID] [nvarchar](43) NULL,
                    [PAYROLL_RECORD_DATE] [datetime] NULL,
                    [PAYROLL_AVG_AGE] [int] NULL,
                    [NUMBER_OF_VOUCHER] [int] NULL,
                    [PAYROLL_CASH_ID] [int] NULL,
                    [PAYROLL_ACCOUNT_ID] [int] NULL,
                    [PAYROLL_REVENUE_DATE] [datetime] NULL,
                    [PAYROLL_REV_MEMBER] [int] NULL,
                    [REVENUE_COLLECTOR_ID] [int] NULL,
                    [PROCESS_CAT] [int] NULL,
                    [UPD_STATUS] [bit] NULL,
                    [MASRAF] [float] NULL,
                    [PAYROLL_OTHER_MONEY] [nvarchar](43) NULL,
                    [PAYROLL_OTHER_MONEY_VALUE] [float] NULL,
                    [MASRAF_CURRENCY] [nvarchar](43) NULL,
                    [CONSUMER_ID] [int] NULL,
                    [VOUCHER_BASED_ACC_CARI] [bit] NULL,
                    [PAYMENT_INVOICE_ID] [int] NULL,
                    [CASH_PAYMENT_VALUE] [float] NULL,
                    [PAYMETHOD_ID] [int] NULL,
                    [PROJECT_ID] [int] NULL,
                    [PAYMENT_ORDER_ID] [int] NULL,
                    [PAYMENT_OFFER_ID] [int] NULL,
                    [EMPLOYEE_ID] [int] NULL,
                    [INCOME_CENTER_ID] [int] NULL,
                    [INCOME_ITEM_ID] [int] NULL,
                    [ACTION_DETAIL] [nvarchar](250) NULL,
                    [BRANCH_ID] [int] NULL,
                    [ASSETP_ID] [int] NULL,
                    [TRANSFER_CASH_ID] [int] NULL,
                    [SPECIAL_DEFINITION_ID] [int] NULL,
                    [CREDIT_LIMIT] [int] NULL,
                    [ACC_TYPE_ID] [int] NULL,
                    [CONTRACT_ID] [int] NULL,
                    [EXP_CENTER_ID] [int] NULL,
                    [EXP_ITEM_ID] [int] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                 CONSTRAINT [PK_VOUCHER_PAYROLL_ACTION_ID] PRIMARY KEY CLUSTERED 
                (
                    [ACTION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_PAYROLL_ACTIONS](
                    [VP_ACTION_ID] [int] IDENTITY(1,1) NOT NULL,
                    [VOUCHER_ID] [int] NULL,
                    [PAYROLL_ID] [int] NULL,
                    [ACTION_ID] [int] NULL,
                    [ACTION_TYPE_ID] [int] NULL,
                 CONSTRAINT [PK_VOUCHER_PAYROLL_ACTIONS_VP_ACTION_ID] PRIMARY KEY CLUSTERED 
                (
                    [VP_ACTION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_PAYROLL_MONEY](
                    [MONEY_TYPE] [nvarchar](43) NULL,
                    [ACTION_ID] [int] NULL,
                    [RATE2] [float] NULL,
                    [RATE1] [float] NULL,
                    [IS_SELECTED] [bit] NULL,
                    [ACTION_MONEY_ID] [int] IDENTITY(1,1) NOT NULL,
                CONSTRAINT [PK_VOUCHER_PAYROLL_MONEY] PRIMARY KEY CLUSTERED 
                (
                    [ACTION_MONEY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[XML_STOCKS_ROW](
                    [XML_STOCKS_ROW_ID] [int] NOT NULL,
                    [STOCK_ID] [int] NULL,
                    [PRODUCT_ID] [int] NULL,
                    [FILE_ID] [int] NULL,
                    [XML_STOCK_ID] [int] NULL,
                    [XML_PRODUCT_ID] [int] NULL,
                    [XML_STOCK_CODE] [nvarchar](50) NULL,
                    [XML_MEMBER_STOCK_CODE] [nvarchar](50) NULL,
                    [XML_SPECIAL_CODE] [nvarchar](50) NULL,
                    [XML_BARCODE] [nvarchar](50) NULL,
                    [XML_PRODUCT_NAME] [nvarchar](500) NULL,
                    [XML_BRAND_NAME] [nvarchar](150) NULL,
                    [XML_STOCK_VARIATION] [nvarchar](50) NULL,
                    [XML_STOCK_AMOUNT] [float] NULL,
                    [XML_SPECIAL_PRICES] [float] NULL,
                    [XML_LIST_PRICES] [float] NULL,
                    [XML_PRODUCT_PRICES] [float] NULL,
                    [XML_MONEY_TYPE] [nvarchar](50) NULL,
                    [XML_SALES_TAX] [float] NULL,
                    [XML_PURCHASE_TAX] [float] NULL,
                    [XML_DELIVER_DATE] [datetime] NULL,
                    [XML_DESI] [nvarchar](50) NULL,
                    [XML_GUARANTY] [int] NULL,
                    [XML_GUARANTY_DETAIL] [nvarchar](250) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL
                ) ON [PRIMARY]


                CREATE TABLE  [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INTEREST_YIELD_PLAN](
                    [YIELD_ID] [int] IDENTITY(1,1) NOT NULL,
                    [BANK_ACTION_ID] [int] NULL,
                    [ACTION_TYPE] [varchar](150) NULL,
                    [DUE_VALUE] [int] NULL,
                    [DUE_VALUE_DATE] [datetime] NULL,
                    [YIELD_RATE] [float] NULL,
                    [STOPAJ_RATE] [float] NULL,
                    [YIELD_AMOUNT] [float] NULL,
                    [YIELD_PAYMENT_PERIOD] [float] NULL,
                    [SPECIAL_DAY] [int] NULL,
                    [NUMBER_YIELD_COLLECTION] [int] NULL,
                    [YIELD_COLLECTION_AMOUNT] [float] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [BUDGET_PLAN_ID] [int] NULL,
                    [FINANCIAL_SCENARIO_ID] [int] NULL,
                    [YGS] [int] NULL,
                CONSTRAINT [PK_INTEREST_YIELD_PLAN] PRIMARY KEY CLUSTERED 
                (
                    [YIELD_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]


                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INTEREST_YIELD_PLAN_ROWS](
                    [YIELD_ROWS_ID] [int] IDENTITY(1,1) NOT NULL,
                    [YIELD_ID] [int] NULL,
                    [OPERATION_NAME] [varchar](200) NULL,
                    [IS_PAYMENT] [int] NULL,
                    [BANK_ACTION_DATE] [datetime] NULL,
                    [AMOUNT] [float] NULL,
                    [STORE_REPORT_DATE] [datetime] NULL,
                    [STOPAJ_RATE] [float] NULL,
                    [STOPAJ_TOTAL] [float] NULL,
                    [EXPENSE_ITEM_TAHAKKUK_ID] [int] NULL,
                    [BANK_ACTION_ID] [int] NULL,
                    [PAYMENT_PRINCIPAL] [int] NULL,
                    [CHANGE_RATE] [int] NULL,
                    [CHANGE_NEW_RATE] [float] NULL,
                    [TERM_BANK_TO_BANK] [bit] NULL,
                CONSTRAINT [PK_INTEREST_YIELD_PLAN_ROWS] PRIMARY KEY CLUSTERED 
                (
                    [YIELD_ROWS_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]

                 
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INTEREST_YIELD_VALUATION](
                    [YIELD_VALUATION_ID] [int] IDENTITY(1,1) NOT NULL,
                    [YIELD_ROWS_ID] [int] NULL,
                    [YIELD_VALUATION_DATE] [datetime] NULL,
                    [YIELD_VALUATION_AMOUNT] [float] NULL,
                    [BUDGET_PLAN_ROW_ID] [int] NULL,
                    [DATE_DIFF] [float] NOT NULL,
                CONSTRAINT [PK_INTEREST_YIELD_VALUATION] PRIMARY KEY CLUSTERED 
                (
                    [YIELD_VALUATION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
         
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SETUP_LIMB](
                    [LIMB_ID] [int] IDENTITY(1,1) NOT NULL,
                    [LIMB_NAME] [nvarchar](100) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](43) NULL,
                CONSTRAINT [PK__SETUP_LI__B7AD21AAE407E28F] PRIMARY KEY CLUSTERED 
                (
                    [LIMB_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]


                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SETUP_HEALTH_ASSURANCE_TYPE_LIMB](
                    [ASSURANCE_LIMB_ID] [int] IDENTITY(1,1) NOT NULL,
                    [LIMB_ID] [int] NULL,
                    [ASSURANCE_ID] [int] NULL,
                    [PERIOD] [int] NULL,
                    [MAX] [int] NULL,
                    [NOTE] [nvarchar](100) NULL,
                CONSTRAINT [PK__SETUP_HE__58137D7D6ABB8788] PRIMARY KEY CLUSTERED 
                (
                    [ASSURANCE_LIMB_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]

                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_ROWS_IFRS](
                    [IFRS_ROW_ID] [int] IDENTITY(1,1) NOT NULL,
                    [CARD_ID] [int] NOT NULL,
                    [CARD_ROW_ID] [int] NULL,
                    [ACCOUNT_ID] [nvarchar](100) NOT NULL,
                    [BA] [bit] NOT NULL,
                    [AMOUNT] [float] NOT NULL,
                    [AMOUNT_CURRENCY] [nvarchar](43) NULL,
                    [DETAIL] [nvarchar](500) NULL,
                    [AMOUNT_2] [float] NULL,
                    [ROW_ACTION_ID] [int] NULL,
                    [ROW_ACTION_TYPE_ID] [int] NULL,
                    [ROW_PAPER_NO] [nvarchar](50) NULL,
                    [AMOUNT_CURRENCY_2] [nvarchar](43) NULL,
                    [OTHER_AMOUNT] [float] NULL,
                    [OTHER_CURRENCY] [nvarchar](43) NULL,
                    [QUANTITY] [float] NULL,
                    [PRICE] [float] NULL,
                    [BILL_CONTROL_NO] [float] NULL,
                    [IFRS_CODE] [nvarchar](100) NULL,
                    [ACCOUNT_CODE2] [nvarchar](100) NULL,
                    [IS_RATE_DIFF_ROW] [bit] NULL,
                    [COST_PROFIT_CENTER] [int] NULL,
                    [ACC_DEPARTMENT_ID] [int] NULL,
                    [ACC_BRANCH_ID] [int] NULL,
                    [ACC_PROJECT_ID] [int] NULL,
                    [CARD_ROW_NO] [int] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                CONSTRAINT [PK_ACCOUNT_CARD_ROWS_IFRS_ROW_ID] PRIMARY KEY CLUSTERED 
                (
                    [IFRS_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]

                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FINANCIAL_AUDIT](
                    [FINANCIAL_AUDIT_ID] [int] IDENTITY(1,1) NOT NULL,
                    [TABLE_NAME] [nvarchar](250) NULL,
                    [TABLE_TYPE] [int] NULL,
                    [PROCESS_STAGE] [int] NULL,
                    [DETAIL] [nvarchar](500) NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                CONSTRAINT [PK_FINANCIAL_AUDIT] PRIMARY KEY CLUSTERED 
                (
                    [FINANCIAL_AUDIT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]

                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FINANCIAL_AUDIT_ROW](
                    [FINANCIAL_AUDIT_ROW_ID] [int] IDENTITY(1,1) NOT NULL,
                    [FINANCIAL_AUDIT_ID] [int] NOT NULL,
                    [CODE] [nvarchar](43) NULL,
                    [NAME] [nvarchar](150) NULL,
                    [ACCOUNT_CODE] [nvarchar](50) NULL,
                    [SIGN] [nvarchar](43) NULL,
                    [BA] [bit] NULL,
                    [VIEW_AMOUNT_TYPE] [int] NULL,
                    [IFRS_CODE] [nvarchar](50) NULL,
                    [NAME_LANG_NO] [int] NULL,
                    [IS_SHOW] [bit] NULL,
                    [IS_CUMULATIVE] [bit] NULL
                ) ON [PRIMARY]

                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FINANCIAL_TABLES_COPIES](
                    [FINANCIAL_TABLE_ID] [int] IDENTITY(1,1) NOT NULL,
                    [TABLE_NAME] [nvarchar](250) NULL,
                    [TABLE_PATH] [nvarchar](250) NULL,
                    [IS_IFRS] [bit] NULL,
                    [PROCESS_STAGE] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [ARRANGEMENT_DATE] [datetime] NULL,
                    [ARRANGEMENT_EMP] [int] NULL
                ) ON [PRIMARY]

                
                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACC_PLAN_SERVICE_RELATION](
                    [RELATION_ID] [int] IDENTITY(1,1) NOT NULL, 
                    [ACCOUNT_CODE] [nvarchar](100) NULL, 
                    [SERVICE_ACCOUNT_CODE] [nvarchar](100) NULL, 
                    CONSTRAINT [PK__ACC_PLAN__4221CD18DD89EDEE] PRIMARY KEY ([RELATION_ID] ASC)
                ) ON [PRIMARY]

                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACC_CARD_SERVICE_RELATION](
                    [RELATION_ID] [int] IDENTITY(1,1) NOT NULL, 
                    [CARD_ID] [int] NULL, 
                    [SERVICE_CARD_ID] [int] NULL, 
                    CONSTRAINT [PK__ACC_CARD__4221CD18E50FD63C] PRIMARY KEY ([RELATION_ID] ASC)
                ) ON [PRIMARY]

                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEM_PLAN_REQUESTS_HISTORY](
                    [EXPENSE_HISTORY_ID] [int] IDENTITY(1,1) NOT NULL,
                    [EXPENSE_ID] [int] NULL,
                    [EMP_ID] [int] NULL,
                    [EXPENSE_DATE] [datetime] NULL,
                    [INVOICE_NO] [nvarchar](100) NULL,
                    [ACTION_ID] [int] NULL,
                    [EXPENSE_COST_TYPE] [int] NULL,
                    [PAPER_TYPE] [nvarchar](100) NULL,
                    [SYSTEM_RELATION] [nvarchar](1000) NULL,
                    [DETAIL] [nvarchar](max) NULL,
                    [TOTAL_AMOUNT] [float] NULL,
                    [NET_TOTAL_AMOUNT] [float] NULL,
                    [NET_KDV_AMOUNT] [float] NULL,
                    [MONEY] [nvarchar](50) NULL,
                    [SALES_PARTNER_ID] [int] NULL,
                    [SALES_COMPANY_ID] [int] NULL,
                    [SALES_CONSUMER_ID] [int] NULL,
                    [PAPER_NO] [nvarchar](50) NULL,
                    [PAYMETHOD_ID] [int] NULL,
                    [OTHER_MONEY_AMOUNT] [float] NULL,
                    [OTHER_MONEY_KDV] [float] NULL,
                    [OTHER_MONEY_NET_TOTAL] [float] NULL,
                    [OTHER_MONEY] [nvarchar](50) NULL,
                    [IS_CASH] [bit] NULL,
                    [EXPENSE_CASH_ID] [int] NULL,
                    [IS_BANK] [int] NULL,
                    [MEMBER_TYPE] [nvarchar](43) NULL,
                    [CONSUMER_ID] [int] NULL,
                    [PARTNER_ID] [int] NULL,
                    [IS_APPROVE] [bit] NULL,
                    [EXPENSE_STAGE] [int] NULL,
                    [VALID_EMP] [int] NULL,
                    [VALID_DATE] [datetime] NULL,
                    [BRANCH_ID] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [UPDATE_EMP] [int] NULL,
                    [EXPENDITURE_REQUEST_NUMBER] [nvarchar](50) NULL,
                    [ACC_TYPE_ID] [int] NULL,
                    [DUE_DATE] [datetime] NULL,
                    [PROJECT_ID] [int] NULL,
                    [ASSURANCE_ID] [int] NULL,
                    [RELATIVE_ID] [int] NULL,
                    [TREATED] [int] NULL,
                    [TREATMENT_ID] [int] NULL,
                    [DEPARTMENT_ID] [int] NULL,
                    [OUR_COMPANY_HEALTH_AMOUNT] [float] NULL,
                    [EMPLOYEE_HEALTH_AMOUNT] [float] NULL,
                    [EXPENSE_ITEM_PLANS_ID] [int] NULL,
                    [EXPENSE_ITEM_PLANS_PAPER_NO] [nvarchar](100) NULL,
                    [HEALTH_AMOUNT_TAX_RATE] [int] NULL,
                    [EXPENSE_HR_ALLOWANCE] [int] NULL,
                    [PROCESS_CAT] [int] NULL,
                    [RECEIVING_ID] [int] NULL,
                    [COMPANY_ID] [int] NULL,
                    [INVOICE_DATE] [datetime] NULL,
                    [PAYMENT_INTERRUPTION_VALUE] [float] NULL,
                    [HEALTH_APPROVE] [bit] NULL,
                    [EXPENSE_TYPE] [int] NULL,
                    [TREATMENT_AMOUNT] [float] NULL,
                    [COMPANY_NAME] [nvarchar](250) NULL,
                    [COMPANY_AMOUNT_RATE] [float] NULL,
                    [TREATMENT_AMOUNT_RATE] [float] NULL,
                    [ASSURANCE_TYPE_ID] [int] NULL,
                    [AMOUNT_1] [float] NULL,
                    [AMOUNT_2] [float] NULL,
                    [AMOUNT_3] [float] NULL,
                    [AMOUNT_4] [float] NULL,
                    [AMOUNT_KDV_1] [float] NULL,
                    [AMOUNT_KDV_2] [float] NULL,
                    [AMOUNT_KDV_3] [float] NULL,
                    [AMOUNT_KDV_4] [float] NULL,
                    [PROCESS_DATE] [datetime] NULL,
                CONSTRAINT [PK_EXPENSE_ITEM_PLAN_REQUESTS_HISTORY_EXPENSE_HISTORY_ID] PRIMARY KEY CLUSTERED 
                (
                    [EXPENSE_HISTORY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]

                CREATE TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEM_PLAN_REQUESTS_ROW_HISTORY](
                    [EXP_ITEM_ROWS_ID1] [int] NULL,
                    [EXPENSE_ID1] [int] NULL,
                    [PROCESS_TYPE1] [int] NULL,
                    [PROCESS_STAGE1] [int] NULL,
                    [EXPENSE_DATE1] [datetime] NULL,
                    [EXPENSE_CENTER_ID1] [int] NULL,
                    [EXPENSE_ITEM_ID1] [int] NULL,
                    [EXPENSE_COST_TYPE1] [int] NULL,
                    [EXPENSE_EMPLOYEE1] [int] NULL,
                    [PROD_ORDER_ID1] [int] NULL,
                    [CAMP_ID1] [int] NULL,
                    [PYSCHICAL_ASSET_ID1] [int] NULL,
                    [PROJECT_ID1] [int] NULL,
                    [PAPER_TYPE1] [nvarchar](100) NULL,
                    [AMOUNT1] [float] NULL,
                    [AMOUNT_KDV1] [float] NULL,
                    [TOTAL_AMOUNT1] [float] NULL,
                    [TOTAL_AMOUNT2] [float] NULL,
                    [MONEY_CURRENCY_ID2] [nvarchar](43) NULL,
                    [MONEY_CURRENCY_ID2_RATE] [float] NULL,
                    [OTHER_MONEY_VALUE1] [float] NULL,
                    [MONEY_CURRENCY_ID1] [nvarchar](50) NULL,
                    [MONEY_CURRENCY_RATE] [float] NULL,
                    [RATE3] [int] NULL,
                    [SYSTEM_RELATION1] [nvarchar](1000) NULL,
                    [COMPANY_ID1] [int] NULL,
                    [COMPANY_PARTNER_ID1] [int] NULL,
                    [APPROVE_EMP_ID1] [int] NULL,
                    [ACTIVITY_TYPE1] [int] NULL,
                    [DETAIL1] [nvarchar](max) NULL,
                    [ACTION_ID1] [int] NULL,
                    [ORDER_ID1] [int] NULL,
                    [INVOICE_NO1] [nvarchar](100) NULL,
                    [STOCK_ID1] [int] NULL,
                    [IS_INCOME1] [bit] NULL,
                    [EXPENSE_EMPLOYEE_TYPE1] [nvarchar](43) NULL,
                    [MEMBER_TYPE1] [nvarchar](43) NULL,
                    [KDV_RATE1] [nvarchar](43) NULL,
                    [INVOICE_ID1] [int] NULL,
                    [SALE_PURCHASE1] [bit] NULL,
                    [RECORD_IP1] [nvarchar](40) NULL,
                    [RECORD_EMP1] [int] NULL,
                    [RECORD_DATE1] [datetime] NULL,
                    [UPDATE_DATE1] [datetime] NULL,
                    [UPDATE_EMP1] [int] NULL,
                    [UPDATE_IP1] [nvarchar](40) NULL,
                    [EXP_ITEM_ROWS_HIST_ID] [int] IDENTITY(1,1) NOT NULL,
                    [EXP_ITEM_ROWS_ID] [int] NULL,
                    [EXPENSE_ID] [int] NULL,
                    [PROCESS_TYPE] [int] NULL,
                    [PROCESS_STAGE] [int] NULL,
                    [EXPENSE_DATE] [datetime] NULL,
                    [EXPENSE_CENTER_ID] [int] NULL,
                    [EXPENSE_ITEM_ID] [int] NULL,
                    [EXPENSE_COST_TYPE] [int] NULL,
                    [EXPENSE_EMPLOYEE] [int] NULL,
                    [PROD_ORDER_ID] [int] NULL,
                    [CAMP_ID] [int] NULL,
                    [PYSCHICAL_ASSET_ID] [int] NULL,
                    [PROJECT_ID] [int] NULL,
                    [PAPER_TYPE] [nvarchar](100) NULL,
                    [AMOUNT] [float] NULL,
                    [AMOUNT_KDV] [float] NULL,
                    [TOTAL_AMOUNT] [float] NULL,
                    [OTHER_MONEY_VALUE] [float] NULL,
                    [MONEY_CURRENCY_ID] [nvarchar](43) NULL,
                    [SYSTEM_RELATION] [nvarchar](1000) NULL,
                    [COMPANY_ID] [int] NULL,
                    [COMPANY_PARTNER_ID] [int] NULL,
                    [APPROVE_EMP_ID] [int] NULL,
                    [ACTIVITY_TYPE] [int] NULL,
                    [RATE1] [float] NULL,
                    [RATE2] [float] NULL,
                    [DETAIL] [nvarchar](max) NULL,
                    [RATE] [int] NULL,
                    [ACTION_ID] [int] NULL,
                    [ORDER_ID] [int] NULL,
                    [INVOICE_NO] [nvarchar](100) NULL,
                    [STOCK_ID] [int] NULL,
                    [IS_INCOME] [bit] NULL,
                    [EXPENSE_EMPLOYEE_TYPE] [nvarchar](43) NULL,
                    [MEMBER_TYPE] [nvarchar](43) NULL,
                    [KDV_RATE] [nvarchar](43) NULL,
                    [INVOICE_ID] [int] NULL,
                    [SALE_PURCHASE] [bit] NULL,
                    [PRODUCT_ID] [int] NULL,
                    [PRODUCT_NAME] [nvarchar](500) NULL,
                    [WORK_ID] [int] NULL,
                    [OPP_ID] [int] NULL,
                    [RECORD_IP] [nvarchar](50) NULL,
                    [RECORD_EMP] [int] NULL,
                    [RECORD_DATE] [datetime] NULL,
                    [UPDATE_DATE] [datetime] NULL,
                    [UPDATE_EMP] [int] NULL,
                    [UPDATE_IP] [nvarchar](50) NULL,
                    [QUANTITY] [float] NULL,
                    [UNIT] [nvarchar](50) NULL,
                    [UNIT_ID] [int] NULL,
                    [ALLOWANCE_TYPE_ID] [int] NULL,
                    [ALLOWANCE_DAY] [int] NULL,
                CONSTRAINT [PK_EXPENSE_ITEM_PLAN_REQUESTS_ROW_HISTORY_EXP_ITEM_ROWS_HIST_ID] PRIMARY KEY CLUSTERED 
                (
                    [EXP_ITEM_ROWS_HIST_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                
                
                CREATE NONCLUSTERED INDEX [NCL_ACCOUNT_CARD_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_CARD]
                (
                    [CARD_ID] ASC,
                    [ACTION_DATE] ASC,
                    [CARD_TYPE] ASC,
                    [CARD_CAT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_ACCOUNT_CARD_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_CARD]
                (
                    [BILL_NO] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_ACCOUNT_CARD_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_CARD]
                (
                    [CARD_TYPE_NO] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_ACCOUNT_CARD_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_CARD]
                (
                    [ACTION_TYPE] ASC,
                    [ACTION_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_ACCOUNT_CARD_5] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_CARD]
                (
                    [CARD_TYPE] ASC,
                    [CARD_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_ACCOUNT_CARD_6] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_CARD]
                (
                    [ACTION_DATE] DESC,
                    [CARD_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_ACCOUNT_CARD_7] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_CARD]
                (
                    [PAPER_NO] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_ACCOUNT_CARD_8] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_CARD]
                (
                    [CARD_DETAIL] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_ACCOUNT_CARD_9] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_CARD]
                (
                    [WRK_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_ACCOUNT_CARD_ROWS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_CARD_ROWS]
                (
                    [CARD_ID] ASC,
                    [BA] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_ACCOUNT_CARD_ROWS_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_CARD_ROWS]
                (
                    [BA] ASC
                )
                INCLUDE ( 	[CARD_ID],
                    [ACCOUNT_ID],
                    [AMOUNT],
                    [AMOUNT_2]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_ACCOUNT_CARD_SAVE_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_CARD_SAVE]
                (
                    [CARD_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_ACCOUNT_CARD_SAVE_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_CARD_SAVE]
                (
                    [NEW_CARD_ID] DESC,
                    [CARD_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_ACCOUNT_CARD_SAVE_ROWS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_CARD_SAVE_ROWS]
                (
                    [CARD_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_ACCOUNT_CARD_SAVE_ROWS_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_CARD_SAVE_ROWS]
                (
                    [ACCOUNT_ID] ASC,
                    [CARD_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_ACCOUNT_DEFINITIONS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_DEFINITIONS]
                (
                    [DEF_TYPE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_ACCOUNT_PLAN_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_PLAN]
                (
                    [ACCOUNT_CODE] ASC
                )
                INCLUDE ( 	[SUB_ACCOUNT]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_ACCOUNT_PLAN_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_PLAN]
                (
                    [ACCOUNT_NAME] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_ACCOUNT_PLAN_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_PLAN]
                (
                    [SUB_ACCOUNT] ASC,
                    [ACCOUNT_CODE] ASC,
                    [ACCOUNT_ID] ASC
                )
                INCLUDE ( 	[ACCOUNT_NAME],
                    [IFRS_CODE],
                    [IFRS_NAME]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_BALANCE_SHEET_TABLE_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BALANCE_SHEET_TABLE]
                (
                    [CODE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_BALANCE_SHEET_TABLE_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BALANCE_SHEET_TABLE]
                (
                    [ACCOUNT_CODE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_BANK_ACTIONS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ACTIONS]
                (
                    [MULTI_ACTION_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_BANK_ACTIONS_10] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ACTIONS]
                (
                    [ACTION_TO_ACCOUNT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_BANK_ACTIONS_11] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ACTIONS]
                (
                    [ACTION_FROM_COMPANY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_BANK_ACTIONS_12] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ACTIONS]
                (
                    [ACTION_TO_COMPANY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_BANK_ACTIONS_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ACTIONS]
                (
                    [ACTION_FROM_CONSUMER_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_BANK_ACTIONS_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ACTIONS]
                (
                    [ACTION_TO_CONSUMER_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_BANK_ACTIONS_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ACTIONS]
                (
                    [PAPER_NO] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_BANK_ACTIONS_5] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ACTIONS]
                (
                    [EXPENSE_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_BANK_ACTIONS_6] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ACTIONS]
                (
                    [BANK_ORDER_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_BANK_ACTIONS_7] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ACTIONS]
                (
                    [ACTION_DATE] DESC,
                    [PAPER_NO] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_BANK_ACTIONS_8] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ACTIONS]
                (
                    [ACTION_TYPE_ID] ASC,
                    [ACTION_DATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_BANK_ACTIONS_9] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ACTIONS]
                (
                    [ACTION_FROM_ACCOUNT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_BANK_ACTIONS_MULTI_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ACTIONS_MULTI]
                (
                    [TO_ACCOUNT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_BANK_ACTIONS_MULTI_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ACTIONS_MULTI]
                (
                    [ACTION_DATE] DESC,
                    [ACTION_TYPE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_BANK_ACTIONS_MULTI_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ACTIONS_MULTI]
                (
                    [ACTION_TYPE_ID] ASC,
                    [ACTION_DATE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_BANK_ORDERS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ORDERS]
                (
                    [COMPANY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_BANK_ORDERS_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ORDERS]
                (
                    [ACTION_DATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_BANK_ORDERS_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ORDERS]
                (
                    [ACCOUNT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_BANK_ORDERS_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ORDERS]
                (
                    [FILE_IMPORT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_BANK_ORDERS_5] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BANK_ORDERS]
                (
                    [ORDER_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_BILLS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BILLS]
                (
                    [TEDIYE_BILL_NO] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_BILLS_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[BILLS]
                (
                    [TAHSIL_BILL_NO] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_ACTIONS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ACTIONS]
                (
                    [INVOICE_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_ACTIONS_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ACTIONS]
                (
                    [ACTION_TYPE_ID] ASC,
                    [ACTION_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_ACTIONS_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ACTIONS]
                (
                    [TO_CMP_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_ACTIONS_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ACTIONS]
                (
                    [FROM_CMP_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_ACTIONS_5] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ACTIONS]
                (
                    [TO_CONSUMER_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_ACTIONS_6] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ACTIONS]
                (
                    [FROM_CONSUMER_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_ACTIONS_7] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ACTIONS]
                (
                    [COMPANY_BLOCK_ID] ASC,
                    [ACTION_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_ACTIONS_MULTI_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ACTIONS_MULTI]
                (
                    [ACTION_TYPE_ID] ASC,
                    [ACTION_DATE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_ACTIONS_MULTI_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ACTIONS_MULTI]
                (
                    [ACTION_DATE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_CLOSED_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_CLOSED]
                (
                    [CONSUMER_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_CLOSED_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_CLOSED]
                (
                    [COMPANY_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_CLOSED_HISTORY_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_CLOSED_HISTORY]
                (
                    [WRK_ID] ASC,
                    [CLOSED_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_CLOSED_HISTORY_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_CLOSED_HISTORY]
                (
                    [COMPANY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_CLOSED_HISTORY_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_CLOSED_HISTORY]
                (
                    [RECORD_DATE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_CLOSED_ROW_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_CLOSED_ROW]
                (
                    [ACTION_TYPE_ID] ASC,
                    [ACTION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_CLOSED_ROW_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_CLOSED_ROW]
                (
                    [CLOSED_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_CLOSED_ROW_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_CLOSED_ROW]
                (
                    [CARI_ACTION_ID] ASC,
                    [ACTION_TYPE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_CLOSED_ROW_HISTORY_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_CLOSED_ROW_HISTORY]
                (
                    [ACTION_ID] ASC,
                    [ACTION_TYPE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_DUE_DIFF_ACTIONS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_DUE_DIFF_ACTIONS]
                (
                    [ACTION_TYPE] ASC,
                    [PROCESS_TYPE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_DUE_DIFF_ACTIONS_ROW_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_DUE_DIFF_ACTIONS_ROW]
                (
                    [COMPANY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_DUE_DIFF_ACTIONS_ROW_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_DUE_DIFF_ACTIONS_ROW]
                (
                    [CONSUMER_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_REVENUE_MULTILEVEL_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_REVENUE_MULTILEVEL]
                (
                    [SALE_STAGE] ASC,
                    [ACTION_DATE] ASC,
                    [CONSUMER_ID] ASC,
                    [NETTOTAL] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_ROWS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ROWS]
                (
                    [OTHER_MONEY] ASC,
                    [FROM_CONSUMER_ID] ASC,
                    [ACTION_VALUE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_ROWS_10] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ROWS]
                (
                    [FROM_CMP_ID] ASC,
                    [ACTION_DATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_ROWS_11] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ROWS]
                (
                    [TO_CONSUMER_ID] ASC,
                    [ACTION_DATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_ROWS_12] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ROWS]
                (
                    [FROM_CONSUMER_ID] ASC,
                    [ACTION_DATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_ROWS_13] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ROWS]
                (
                    [ACTION_TYPE_ID] ASC,
                    [TO_CONSUMER_ID] ASC,
                    [ACTION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_ROWS_14] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ROWS]
                (
                    [DUE_DATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_ROWS_15] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ROWS]
                (
                    [ACTION_TYPE_ID] ASC
                )
                INCLUDE ( 	[ACTION_VALUE],
                    [ACTION_DATE],
                    [ACTION_VALUE_2],
                    [FROM_BRANCH_ID],
                    [TO_BRANCH_ID],
                    [PROJECT_ID]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_ROWS_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ROWS]
                (
                    [FROM_CMP_ID] ASC,
                    [OTHER_MONEY] ASC,
                    [ACTION_TABLE] ASC,
                    [ACTION_VALUE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_ROWS_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ROWS]
                (
                    [TO_CONSUMER_ID] ASC,
                    [OTHER_MONEY] ASC,
                    [ACTION_TABLE] ASC,
                    [ACTION_VALUE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_ROWS_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ROWS]
                (
                    [TO_CMP_ID] ASC,
                    [ACTION_TYPE_ID] ASC,
                    [ACTION_DATE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_ROWS_5] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ROWS]
                (
                    [OTHER_MONEY] ASC,
                    [TO_CMP_ID] ASC,
                    [ACTION_TYPE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_ROWS_6] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ROWS]
                (
                    [OTHER_MONEY] ASC,
                    [FROM_CMP_ID] ASC,
                    [ACTION_TYPE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_ROWS_7] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ROWS]
                (
                    [ACTION_ID] DESC,
                    [ACTION_TABLE] ASC,
                    [ACTION_TYPE_ID] ASC,
                    [DUE_DATE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_ROWS_8] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ROWS]
                (
                    [ACTION_DATE] DESC,
                    [ACTION_TYPE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CARI_ROWS_9] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ROWS]
                (
                    [TO_CMP_ID] ASC,
                    [ACTION_DATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH]
                (
                    [CASH_NAME] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_ACTIONS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_ACTIONS]
                (
                    [REVENUE_COLLECTOR_ID] DESC,
                    [ACTION_TYPE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_ACTIONS_10] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_ACTIONS]
                (
                    [ACTION_DATE] DESC,
                    [PAPER_NO] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_ACTIONS_11] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_ACTIONS]
                (
                    [CASH_ACTION_FROM_CASH_ID] ASC,
                    [ACTION_TYPE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_ACTIONS_12] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_ACTIONS]
                (
                    [ACTION_TYPE_ID] ASC,
                    [ACTION_DATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_ACTIONS_13] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_ACTIONS]
                (
                    [CASH_ACTION_TO_CASH_ID] ASC,
                    [ACTION_TYPE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_ACTIONS_14] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_ACTIONS]
                (
                    [CASH_ACTION_FROM_COMPANY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_ACTIONS_15] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_ACTIONS]
                (
                    [CASH_ACTION_TO_COMPANY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_ACTIONS_16] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_ACTIONS]
                (
                    [CASH_ACTION_TO_EMPLOYEE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_ACTIONS_17] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_ACTIONS]
                (
                    [CASH_ACTION_FROM_EMPLOYEE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_ACTIONS_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_ACTIONS]
                (
                    [PAPER_NO] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_ACTIONS_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_ACTIONS]
                (
                    [CASH_ACTION_FROM_CONSUMER_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_ACTIONS_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_ACTIONS]
                (
                    [CASH_ACTION_TO_CONSUMER_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_ACTIONS_5] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_ACTIONS]
                (
                    [EXPENSE_ITEM_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_ACTIONS_6] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_ACTIONS]
                (
                    [EXPENSE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_ACTIONS_7] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_ACTIONS]
                (
                    [PAYER_ID] ASC,
                    [ACTION_TYPE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_ACTIONS_8] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_ACTIONS]
                (
                    [PAYROLL_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_ACTIONS_9] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_ACTIONS]
                (
                    [BANK_ACTION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_ACTIONS_MULTI_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_ACTIONS_MULTI]
                (
                    [ACTION_TYPE_ID] ASC,
                    [ACTION_DATE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_ACTIONS_MULTI_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_ACTIONS_MULTI]
                (
                    [ACTION_DATE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_FLOW_TABLE_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_FLOW_TABLE]
                (
                    [CASH_FLOW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_FLOW_TABLE_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_FLOW_TABLE]
                (
                    [CODE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_FLOW_TABLE_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_FLOW_TABLE]
                (
                    [NAME] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_FLOW_TABLE_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_FLOW_TABLE]
                (
                    [ACCOUNT_CODE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_PAYMENT_TYPE_ROW_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_PAYMENT_TYPE_ROW]
                (
                    [POS_REFERANS_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_PAYMENT_TYPE_ROW_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_PAYMENT_TYPE_ROW]
                (
                    [POS_REFERANS_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_CASH_PAYMENT_TYPE_ROW_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_PAYMENT_TYPE_ROW]
                (
                    [POS_ACCOUNT_CODE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_CHEQUE_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE]
                (
                    [CHEQUE_PURSE_NO] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CHEQUE_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE]
                (
                    [CHEQUE_DUEDATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_CHEQUE_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE]
                (
                    [CHEQUE_STATUS_ID] ASC,
                    [CURRENCY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CHEQUE_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE]
                (
                    [COMPANY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CHEQUE_5] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE]
                (
                    [CHEQUE_PAYROLL_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_CHEQUE_6] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE]
                (
                    [CHEQUE_NO] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CHEQUE_HISTORY_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE_HISTORY]
                (
                    [COMPANY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CHEQUE_HISTORY_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE_HISTORY]
                (
                    [PAYROLL_ID] ASC,
                    [CHEQUE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CHEQUE_HISTORY_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE_HISTORY]
                (
                    [STATUS] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_COST_TABLE_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[COST_TABLE]
                (
                    [CODE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CREDIT_CONTRACT_PAYMENT_INCOME_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CREDIT_CONTRACT_PAYMENT_INCOME]
                (
                    [CREDIT_CONTRACT_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CREDIT_CONTRACT_PAYMENT_INCOME_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CREDIT_CONTRACT_PAYMENT_INCOME]
                (
                    [PROCESS_DATE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CREDIT_CONTRACT_PAYMENT_INCOME_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CREDIT_CONTRACT_PAYMENT_INCOME]
                (
                    [BANK_ACTION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CREDIT_CONTRACT_PAYMENT_INCOME_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CREDIT_CONTRACT_PAYMENT_INCOME]
                (
                    [PROCESS_DATE] ASC,
                    [PROCESS_TYPE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CREDIT_CONTRACT_PAYMENT_INCOME_5] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CREDIT_CONTRACT_PAYMENT_INCOME]
                (
                    [COMPANY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CREDIT_CONTRACT_PAYMENT_INCOME_6] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CREDIT_CONTRACT_PAYMENT_INCOME]
                (
                    [PROCESS_TYPE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CREDIT_CONTRACT_PAYMENT_INCOME_TAX_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CREDIT_CONTRACT_PAYMENT_INCOME_TAX]
                (
                    [CREDIT_CONTRACT_PAYMENT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_CREDIT_CONTRACT_PAYMENT_INCOME_TAX_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CREDIT_CONTRACT_PAYMENT_INCOME_TAX]
                (
                    [TAX_EXPENSE_ITEM_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_EXPENSE_CENTER_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_CENTER]
                (
                    [EXPENSE_BRANCH_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_EXPENSE_CENTER_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_CENTER]
                (
                    [EXPENSE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_EXPENSE_ITEM_PLAN_REQUESTS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEM_PLAN_REQUESTS]
                (
                    [EMP_ID] ASC,
                    [EXPENSE_DATE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_EXPENSE_ITEM_PLAN_REQUESTS_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEM_PLAN_REQUESTS]
                (
                    [ACTION_ID] ASC,
                    [EXPENSE_COST_TYPE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_EXPENSE_ITEM_PLAN_REQUESTS_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEM_PLAN_REQUESTS]
                (
                    [EXPENSE_COST_TYPE] ASC,
                    [EXPENSE_DATE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_EXPENSE_ITEM_PLAN_REQUESTS_ROWS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEM_PLAN_REQUESTS_ROWS]
                (
                    [EXPENSE_ID] ASC,
                    [EXPENSE_DATE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_EXPENSE_ITEM_PLANS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEM_PLANS]
                (
                    [WRK_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_EXPENSE_ITEM_PLANS_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEM_PLANS]
                (
                    [EXPENSE_DATE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_EXPENSE_ITEM_PLANS_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEM_PLANS]
                (
                    [EMP_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_EXPENSE_ITEM_PLANS_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEM_PLANS]
                (
                    [PAPER_NO] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_EXPENSE_ITEMS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEMS]
                (
                    [EXPENSE_CATEGORY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_EXPENSE_ITEMS_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEMS]
                (
                    [ACCOUNT_CODE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_EXPENSE_ITEMS_ROWS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEMS_ROWS]
                (
                    [EXPENSE_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_EXPENSE_ITEMS_ROWS_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEMS_ROWS]
                (
                    [EXPENSE_ITEM_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_EXPENSE_ITEMS_ROWS_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEMS_ROWS]
                (
                    [EXPENSE_CENTER_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_EXPENSE_ITEMS_ROWS_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEMS_ROWS]
                (
                    [EXPENSE_COST_TYPE] ASC,
                    [ACTION_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_EXPENSE_ITEMS_ROWS_5] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_ITEMS_ROWS]
                (
                    [INVOICE_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_EXPENSE_PLANS_TEMPLATES_ROWS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_PLANS_TEMPLATES_ROWS]
                (
                    [EXPENSE_CENTER_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_EXPENSE_PLANS_TEMPLATES_ROWS_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EXPENSE_PLANS_TEMPLATES_ROWS]
                (
                    [EXPENSE_ITEM_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_FILE_EXPORTS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_EXPORTS]
                (
                    [DEPARTMENT_ID] ASC,
                    [PROCESS_TYPE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_FILE_EXPORTS_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_EXPORTS]
                (
                    [PROCESS_TYPE] ASC,
                    [RECORD_DATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_FILE_EXPORTS_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_EXPORTS]
                (
                    [RECORD_DATE] DESC,
                    [RECORD_EMP] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_FILE_IMPORT_BANK_POS_ROWS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_IMPORT_BANK_POS_ROWS]
                (
                    [PROCESS_DATE] ASC,
                    [FILE_IMPORT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_FILE_IMPORT_BANK_POS_ROWS_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_IMPORT_BANK_POS_ROWS]
                (
                    [FILE_IMPORT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_FILE_IMPORT_BANK_POS_ROWS_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_IMPORT_BANK_POS_ROWS]
                (
                    [VALOR_DATE] ASC,
                    [FILE_IMPORT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_FILE_IMPORTS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_IMPORTS]
                (
                    [DEPARTMENT_ID] ASC,
                    [STARTDATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_FILE_IMPORTS_ROW_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_IMPORTS_ROW]
                (
                    [PRODUCT_ID] ASC,
                    [STOCK_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_FILE_IMPORTS_TOTAL_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_IMPORTS_TOTAL]
                (
                    [FIS_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_FILE_IMPORTS_TOTAL_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_IMPORTS_TOTAL]
                (
                    [DEPARTMENT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_FILE_IMPORTS_TOTAL_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_IMPORTS_TOTAL]
                (
                    [DEPARTMENT_LOCATION] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_FILE_IMPORTS_TOTAL_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_IMPORTS_TOTAL]
                (
                    [PROCESS_DATE] ASC,
                    [DEPARTMENT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_FILE_IMPORTS_TOTAL_5] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_IMPORTS_TOTAL]
                (
                    [PROCESS_DATE] ASC,
                    [DEPARTMENT_LOCATION] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_FILE_IMPORTS_TOTAL_6] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_IMPORTS_TOTAL]
                (
                    [STOCK_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_FILE_IMPORTS_TOTAL_7] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_IMPORTS_TOTAL]
                (
                    [PRODUCT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_FILE_IMPORTS_TOTAL_SAYIMLAR_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_IMPORTS_TOTAL_SAYIMLAR]
                (
                    [DEPARTMENT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_FILE_IMPORTS_TOTAL_SAYIMLAR_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_IMPORTS_TOTAL_SAYIMLAR]
                (
                    [DEPARTMENT_LOCATION] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_FILE_IMPORTS_TOTAL_SAYIMLAR_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_IMPORTS_TOTAL_SAYIMLAR]
                (
                    [PROCESS_DATE] ASC,
                    [DEPARTMENT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_FILE_IMPORTS_TOTAL_SAYIMLAR_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_IMPORTS_TOTAL_SAYIMLAR]
                (
                    [PROCESS_DATE] ASC,
                    [DEPARTMENT_LOCATION] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_FUND_FLOW_TABLE_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FUND_FLOW_TABLE]
                (
                    [FUND_FLOW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_FUND_FLOW_TABLE_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FUND_FLOW_TABLE]
                (
                    [CODE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_INCOME_TABLE_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INCOME_TABLE]
                (
                    [CODE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INFLATION_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INFLATION]
                (
                    [ACTION_DATE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE]
                (
                    [ADD_FLAG] ASC,
                    [INVOICE_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_10] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE]
                (
                    [INVOICE_CAT] ASC,
                    [INVOICE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_11] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE]
                (
                    [INVOICE_NUMBER] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_12] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE]
                (
                    [INVOICE_CAT] ASC,
                    [INVOICE_DATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_13] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE]
                (
                    [COMPANY_ID] ASC,
                    [INVOICE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_14] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE]
                (
                    [CONSUMER_ID] ASC,
                    [INVOICE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_15] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE]
                (
                    [DEPARTMENT_ID] ASC,
                    [INVOICE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_16] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE]
                (
                    [IS_IPTAL] ASC,
                    [INVOICE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE]
                (
                    [SALE_EMP] ASC,
                    [INVOICE_CAT] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE]
                (
                    [INVOICE_ID] DESC,
                    [INVOICE_DATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE]
                (
                    [DEPARTMENT_ID] ASC,
                    [INVOICE_DATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_5] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE]
                (
                    [WRK_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_6] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE]
                (
                    [PURCHASE_SALES] ASC,
                    [INVOICE_ID] DESC,
                    [INVOICE_DATE] ASC,
                    [DEPARTMENT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_7] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE]
                (
                    [IS_IPTAL] ASC,
                    [PURCHASE_SALES] ASC,
                    [INVOICE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_8] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE]
                (
                    [CONSUMER_ID] ASC,
                    [PURCHASE_SALES] ASC,
                    [IS_IPTAL] ASC,
                    [INVOICE_CAT] ASC,
                    [INVOICE_DATE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_9] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE]
                (
                    [PRINT_COUNT] ASC,
                    [INVOICE_CAT] ASC,
                    [IS_IPTAL] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_CASH_POS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_CASH_POS]
                (
                    [INVOICE_ID] DESC,
                    [CASH_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_CASH_POS_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_CASH_POS]
                (
                    [INVOICE_ID] DESC,
                    [POS_ACTION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_CASH_POS_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_CASH_POS]
                (
                    [CASH_ID] DESC,
                    [KASA_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_CASH_POS_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_CASH_POS]
                (
                    [POS_ACTION_ID] DESC,
                    [POS_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_CONTRACT_COMPARISON_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_CONTRACT_COMPARISON]
                (
                    [DIFF_INVOICE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_CONTRACT_COMPARISON_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_CONTRACT_COMPARISON]
                (
                    [MAIN_INVOICE_DATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_CONTRACT_COMPARISON_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_CONTRACT_COMPARISON]
                (
                    [MAIN_INVOICE_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_CONTRACT_COMPARISON_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_CONTRACT_COMPARISON]
                (
                    [MAIN_INVOICE_NUMBER] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_CONTRACT_COMPARISON_5] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_CONTRACT_COMPARISON]
                (
                    [MAIN_INVOICE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_CONTRACT_COMPARISON_6] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_CONTRACT_COMPARISON]
                (
                    [COMPANY_ID] ASC,
                    [DIFF_INVOICE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_CONTROL_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_CONTROL]
                (
                    [INVOICE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_CONTROL_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_CONTROL]
                (
                    [COMPANY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_COST_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_COST]
                (
                    [INVOICE_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_INFO_PLUS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_INFO_PLUS]
                (
                    [INVOICE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_MULTI_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_MULTI]
                (
                    [WRK_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_MULTILEVEL_PAYMENT_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_MULTILEVEL_PAYMENT]
                (
                    [PROCESS_TYPE] ASC,
                    [PROCESS_CAT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_MULTILEVEL_PAYMENT_ROWS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_MULTILEVEL_PAYMENT_ROWS]
                (
                    [CARI_ACTION_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_MULTILEVEL_PAYMENT_ROWS_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_MULTILEVEL_PAYMENT_ROWS]
                (
                    [INV_PREMIUM_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_MULTILEVEL_PREMIUM_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_MULTILEVEL_PREMIUM]
                (
                    [CONSUMER_ID] ASC,
                    [CAMPAIGN_ID] ASC,
                    [PREMIUM_TYPE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_MULTILEVEL_SALES_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_MULTILEVEL_SALES]
                (
                    [CONSUMER_ID] ASC,
                    [INVOICE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_MULTILEVEL_SALES_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_MULTILEVEL_SALES]
                (
                    [INVOICE_DATE] ASC,
                    [CONSUMER_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_MULTILEVEL_SALES_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_MULTILEVEL_SALES]
                (
                    [INVOICE_CAT] ASC,
                    [CONSUMER_ID] ASC,
                    [INVOICE_DATE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_MULTILEVEL_SALES_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_MULTILEVEL_SALES]
                (
                    [REF_CONSUMER_ID] ASC,
                    [INVOICE_CAT] ASC,
                    [INVOICE_DATE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_PURSUIT_PLUS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_PURSUIT_PLUS]
                (
                    [INVOICE_PLUS_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_ROW_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_ROW]
                (
                    [WRK_ROW_RELATION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_ROW_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_ROW]
                (
                    [PRODUCT_ID] ASC,
                    [INVOICE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_ROW_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_ROW]
                (
                    [STOCK_ID] ASC,
                    [INVOICE_ID] ASC,
                    [PRODUCT_ID] ASC,
                    [AMOUNT] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_ROW_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_ROW]
                (
                    [ORDER_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_ROW_5] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_ROW]
                (
                    [INVOICE_ID] ASC,
                    [WRK_ROW_RELATION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_ROW_6] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_ROW]
                (
                    [INVOICE_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_ROW_7] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_ROW]
                (
                    [INVOICE_ID] ASC
                )
                INCLUDE ( 	[WRK_ROW_RELATION_ID],
                    [AMOUNT]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_ROW_POS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_ROW_POS]
                (
                    [PRODUCT_ID] ASC,
                    [INVOICE_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_ROW_POS_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_ROW_POS]
                (
                    [INVOICE_ID] ASC,
                    [IS_KARMA] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_ROW_POS_PROBLEM_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_ROW_POS_PROBLEM]
                (
                    [INVOICE_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_SHIPS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_SHIPS]
                (
                    [INVOICE_NUMBER] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_SHIPS_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_SHIPS]
                (
                    [SHIP_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_SHIPS_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_SHIPS]
                (
                    [SHIP_NUMBER] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_SHIPS_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_SHIPS]
                (
                    [SHIP_PERIOD_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_STATISTICAL_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_STATISTICAL]
                (
                    [STATISTICAL_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_INVOICE_TAXES_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_TAXES]
                (
                    [INVOICE_TAX_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_PAYROLL_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[PAYROLL]
                (
                    [PAYROLL_TYPE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_PAYROLL_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[PAYROLL]
                (
                    [COMPANY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_PAYROLL_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[PAYROLL]
                (
                    [PAYROLL_REVENUE_DATE] DESC,
                    [PAYROLL_TYPE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_PAYROLL_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[PAYROLL]
                (
                    [PAYROLL_CASH_ID] ASC,
                    [ACTION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_PRODUCT_COST_INVOICE_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[PRODUCT_COST_INVOICE]
                (
                    [PRODUCT_COST_INVOICE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_PRODUCT_COST_REFERENCE_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[PRODUCT_COST_REFERENCE]
                (
                    [PRODUCT_COST_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_PRODUCT_COST_REFERENCE_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[PRODUCT_COST_REFERENCE]
                (
                    [ACTION_ID] ASC,
                    [ACTION_TYPE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_PRODUCT_COST_REFERENCE_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[PRODUCT_COST_REFERENCE]
                (
                    [ACTION_TYPE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SAYIM_SATIRLAR_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SAYIM_SATIRLAR]
                (
                    [SAYIM_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SAYIM_SATIRLAR_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SAYIM_SATIRLAR]
                (
                    [PRODUCT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SAYIM_SATIRLAR_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SAYIM_SATIRLAR]
                (
                    [STOCK_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SAYIMLAR_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SAYIMLAR]
                (
                    [BRANCH_ID] ASC,
                    [DEPARTMENT_IN] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SAYIMLAR_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SAYIMLAR]
                (
                    [DEPARTMENT_IN] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SAYIMLAR_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SAYIMLAR]
                (
                    [FIS_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SETUP_BALANCE_SHEET_LIST_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SETUP_BALANCE_SHEET_LIST]
                (
                    [ACCOUNT_CODE] ASC,
                    [ACCOUNT_CODE_NO] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SETUP_TAX_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SETUP_TAX]
                (
                    [TAX] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP]
                (
                    [CONSUMER_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_10] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP]
                (
                    [DEPARTMENT_IN] ASC,
                    [SHIP_DATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_11] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP]
                (
                    [SHIP_TYPE] ASC,
                    [SHIP_DATE] DESC,
                    [SHIP_NUMBER] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_12] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP]
                (
                    [COMPANY_ID] ASC,
                    [SHIP_TYPE] ASC,
                    [SHIP_NUMBER] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_13] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP]
                (
                    [PROCESS_CAT] ASC,
                    [SHIP_DATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_14] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP]
                (
                    [ORDER_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_15] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP]
                (
                    [SHIP_NUMBER] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_16] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP]
                (
                    [SHIP_DATE] DESC,
                    [DELIVER_STORE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP]
                (
                    [DEPARTMENT_IN] ASC,
                    [COMPANY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP]
                (
                    [DELIVER_STORE_ID] ASC,
                    [COMPANY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP]
                (
                    [PROJECT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_5] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP]
                (
                    [RECORD_DATE] DESC,
                    [SHIP_TYPE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_6] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP]
                (
                    [WRK_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_7] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP]
                (
                    [DEPARTMENT_IN] ASC,
                    [LOCATION_IN] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_8] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP]
                (
                    [COMPANY_ID] ASC,
                    [PROCESS_CAT] ASC,
                    [SHIP_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_9] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP]
                (
                    [SHIP_TYPE] ASC,
                    [SHIP_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_INTERNAL_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_INTERNAL]
                (
                    [LOCATION_OUT] ASC,
                    [DEPARTMENT_OUT] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_INTERNAL_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_INTERNAL]
                (
                    [DEPARTMENT_IN] ASC,
                    [LOCATION_IN] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_PACKAGE_LIST_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_PACKAGE_LIST]
                (
                    [SHIP_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_PACKAGE_LIST_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_PACKAGE_LIST]
                (
                    [STOCK_ID] ASC,
                    [SHIP_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_PACKAGE_LIST_HISTORY_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_PACKAGE_LIST_HISTORY]
                (
                    [STOCK_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_RESULT_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT]
                (
                    [IS_TYPE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_RESULT_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT]
                (
                    [COMPANY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_RESULT_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT]
                (
                    [CONSUMER_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_RESULT_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT]
                (
                    [SHIP_METHOD_TYPE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_RESULT_5] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT]
                (
                    [SERVICE_COMPANY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_RESULT_6] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT]
                (
                    [OUT_DATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_RESULT_7] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT]
                (
                    [COST_VALUE2] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_RESULT_8] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT]
                (
                    [SHIP_FIS_NO] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_RESULT_9] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT]
                (
                    [COST_VALUE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_RESULT_PACKAGE_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT_PACKAGE]
                (
                    [SHIP_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_RESULT_PACKAGE_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT_PACKAGE]
                (
                    [PACKAGE_PIECE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_RESULT_PACKAGE_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT_PACKAGE]
                (
                    [PACKAGE_DIMENTION] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_RESULT_PACKAGE_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT_PACKAGE]
                (
                    [PACKAGE_WEIGHT] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_RESULT_ROW_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT_ROW]
                (
                    [SHIP_RESULT_ID] ASC,
                    [WRK_ROW_RELATION_ID] ASC,
                    [SHIP_RESULT_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_RESULT_ROW_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT_ROW]
                (
                    [SHIP_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_RESULT_ROW_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT_ROW]
                (
                    [SHIP_DATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_RESULT_ROW_COMPLETE_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT_ROW_COMPLETE]
                (
                    [SHIP_RESULT_ID] ASC,
                    [PROBLEM_RESULT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_RESULT_ROW_COMPLETE_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT_ROW_COMPLETE]
                (
                    [WRK_ROW_ID] ASC,
                    [WRK_ROW_RELATION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_RESULT_ROW_COMPONENT_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT_ROW_COMPONENT]
                (
                    [COMPONENT_SPECT_ID] ASC,
                    [SHIP_RESULT_ROW_ID] ASC,
                    [COMPONENT_PRODUCT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_RESULT_ROW_COMPONENT_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_RESULT_ROW_COMPONENT]
                (
                    [SHIP_RESULT_ROW_ID] ASC,
                    [COMPONENT_SPECT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_ROW_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_ROW]
                (
                    [SHIP_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_ROW_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_ROW]
                (
                    [PRODUCT_ID] ASC,
                    [SHIP_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_ROW_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_ROW]
                (
                    [SHIP_DATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_ROW_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_ROW]
                (
                    [STOCK_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_ROW_5] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_ROW]
                (
                    [AMOUNT] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_ROW_6] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_ROW]
                (
                    [ROW_ORDER_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_ROW_7] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_ROW]
                (
                    [SERVICE_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_ROW_8] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_ROW]
                (
                    [WRK_ROW_RELATION_ID] ASC,
                    [SHIP_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_ROW_9] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_ROW]
                (
                    [WRK_ROW_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_ROW_HISTORY_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_ROW_HISTORY]
                (
                    [SHIP_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_ROW_RELATION_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_ROW_RELATION]
                (
                    [PRODUCT_ID] DESC,
                    [SHIP_ID] ASC,
                    [SHIP_PERIOD] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_ROW_RELATION_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_ROW_RELATION]
                (
                    [STOCK_ID] DESC,
                    [SHIP_ID] ASC,
                    [SHIP_PERIOD] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_ROW_RELATION_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_ROW_RELATION]
                (
                    [SHIP_ID] DESC,
                    [SHIP_PERIOD] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_ROW_RELATION_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_ROW_RELATION]
                (
                    [STOCK_ID] DESC,
                    [PRODUCT_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_ROW_RELATION_5] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_ROW_RELATION]
                (
                    [TO_SHIP_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_ROW_RELATION_6] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_ROW_RELATION]
                (
                    [TO_INVOICE_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_TO_SHIP_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_TO_SHIP]
                (
                    [TO_SHIP_ID] DESC,
                    [TO_SHIP_TYPE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_SHIP_TO_SHIP_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SHIP_TO_SHIP]
                (
                    [FROM_SHIP_ID] DESC,
                    [FROM_SHIP_PERIOD] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCK_EXCHANGE_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_EXCHANGE]
                (
                    [PROCESS_TYPE] ASC,
                    [PROCESS_CAT] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCK_EXCHANGE_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_EXCHANGE]
                (
                    [PROCESS_DATE] ASC,
                    [STOCK_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCK_EXCHANGE_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_EXCHANGE]
                (
                    [STOCK_ID] ASC,
                    [PRODUCT_ID] ASC,
                    [SPECT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCK_EXCHANGE_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_EXCHANGE]
                (
                    [SPECT_ID] ASC,
                    [SPECT_MAIN_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCK_FIS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_FIS]
                (
                    [FIS_TYPE] ASC,
                    [FIS_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_STOCK_FIS_10] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_FIS]
                (
                    [FIS_NUMBER] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCK_FIS_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_FIS]
                (
                    [PROD_ORDER_RESULT_NUMBER] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCK_FIS_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_FIS]
                (
                    [FIS_DATE] DESC,
                    [DEPARTMENT_OUT] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCK_FIS_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_FIS]
                (
                    [FIS_DATE] DESC,
                    [DEPARTMENT_IN] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCK_FIS_5] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_FIS]
                (
                    [DEPARTMENT_OUT] ASC,
                    [FIS_TYPE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCK_FIS_6] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_FIS]
                (
                    [DEPARTMENT_IN] ASC,
                    [FIS_TYPE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCK_FIS_7] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_FIS]
                (
                    [FIS_TYPE] ASC,
                    [FIS_DATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCK_FIS_8] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_FIS]
                (
                    [DEPARTMENT_IN] ASC,
                    [LOCATION_IN] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCK_FIS_9] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_FIS]
                (
                    [PROJECT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCK_FIS_ROW_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_FIS_ROW]
                (
                    [STOCK_ID] ASC,
                    [FIS_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCK_FIS_ROW_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_FIS_ROW]
                (
                    [INVENTORY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCK_PROFIL_CUMULATIVE_PRODUCTS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_PROFIL_CUMULATIVE_PRODUCTS]
                (
                    [PRODUCT_ID] ASC,
                    [STOCK_ID] ASC,
                    [IS_PROCESS_COMPLETED] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCK_PROFIL_CUMULATIVE_PRODUCTS_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_PROFIL_CUMULATIVE_PRODUCTS]
                (
                    [STOCK_ID] ASC,
                    [IS_PROCESS_COMPLETED] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCKS_AMOUNT_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_AMOUNT]
                (
                    [STOCK_ID] ASC,
                    [DEPARTMENT_ID] ASC,
                    [LOCATION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCKS_AMOUNT_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_AMOUNT]
                (
                    [PRODUCT_ID] ASC,
                    [SPEC_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCKS_ROW_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_ROW]
                (
                    [STOCK_ID] ASC,
                    [STORE] ASC
                )
                INCLUDE ( 	[STOCK_IN],
                    [STOCK_OUT]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCKS_ROW_10] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_ROW]
                (
                    [STOCK_IN] ASC,
                    [STOCK_OUT] ASC,
                    [STOCK_ID] ASC,
                    [PRODUCT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCKS_ROW_11] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_ROW]
                (
                    [UPD_ID] ASC
                )
                INCLUDE ( 	[STOCK_IN],
                    [STOCK_OUT],
                    [STOCK_ID],
                    [PRODUCT_ID],
                    [STORE],
                    [STORE_LOCATION]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCKS_ROW_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_ROW]
                (
                    [PROCESS_TYPE] ASC,
                    [PRODUCT_ID] ASC,
                    [STOCK_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCKS_ROW_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_ROW]
                (
                    [PROCESS_TYPE] ASC,
                    [UPD_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCKS_ROW_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_ROW]
                (
                    [PROCESS_DATE] ASC,
                    [PROCESS_TYPE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCKS_ROW_5] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_ROW]
                (
                    [STORE] ASC,
                    [PRODUCT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCKS_ROW_6] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_ROW]
                (
                    [STORE] ASC,
                    [STORE_LOCATION] ASC,
                    [STOCK_ID] ASC,
                    [PRODUCT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCKS_ROW_7] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_ROW]
                (
                    [SHELF_NUMBER] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCKS_ROW_8] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_ROW]
                (
                    [PRODUCT_ID] ASC
                )
                INCLUDE ( 	[STOCK_IN],
                    [STOCK_OUT],
                    [STOCK_ID]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCKS_ROW_9] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_ROW]
                (
                    [STORE] ASC,
                    [STORE_LOCATION] ASC
                )
                INCLUDE ( 	[STOCK_IN],
                    [STOCK_OUT],
                    [STOCK_ID],
                    [PRODUCT_ID]) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCKS_ROW_RESERVED_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_ROW_RESERVED]
                (
                    [STOCK_ID] ASC,
                    [STORE] ASC,
                    [STORE_LOCATION] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCKS_ROW_RESERVED_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_ROW_RESERVED]
                (
                    [STORE] ASC,
                    [STOCK_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCKS_ROW_RESERVED_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_ROW_RESERVED]
                (
                    [PRODUCT_ID] ASC,
                    [STOCK_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCKS_ROW_RESERVED_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_ROW_RESERVED]
                (
                    [ORDER_ID] ASC,
                    [STOCK_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STOCKS_ROW_UPD_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_ROW_UPD]
                (
                    [ACTION_ID] DESC,
                    [PROCESS_TYPE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STORE_EXPENSE_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STORE_EXPENSE]
                (
                    [STORE_REPORT_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STORE_EXPENSE_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STORE_EXPENSE]
                (
                    [EXPENSE_TYPE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STORE_INCOME_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STORE_INCOME]
                (
                    [STORE_REPORT_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STORE_INCOME_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STORE_INCOME]
                (
                    [INCOME_TYPE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STORE_POS_BANK_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STORE_POS_BANK]
                (
                    [STORE_REPORT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STORE_POS_BANK_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STORE_POS_BANK]
                (
                    [BANK_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STORE_POS_BANK_DETAIL_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STORE_POS_BANK_DETAIL]
                (
                    [BANK_ID] ASC,
                    [BRANCH_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STORE_POS_CASH_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STORE_POS_CASH]
                (
                    [STORE_REPORT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STORE_POS_CASH_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STORE_POS_CASH]
                (
                    [STORE_POS_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STORE_REPORT_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STORE_REPORT]
                (
                    [BRANCH_ID] ASC,
                    [STORE_REPORT_DATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_STORE_REPORT_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STORE_REPORT]
                (
                    [STORE_REPORT_DATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_VOUCHER_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER]
                (
                    [COMPANY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_VOUCHER_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER]
                (
                    [VOUCHER_DUEDATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_VOUCHER_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER]
                (
                    [VOUCHER_STATUS_ID] ASC,
                    [CURRENCY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_VOUCHER_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER]
                (
                    [VOUCHER_PAYROLL_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_VOUCHER_5] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER]
                (
                    [VOUCHER_NO] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_VOUCHER_6] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER]
                (
                    [CONSUMER_ID] ASC,
                    [VOUCHER_STATUS_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_VOUCHER_7] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER]
                (
                    [VOUCHER_STATUS_ID] ASC,
                    [OWNER_CONSUMER_ID] ASC,
                    [CONSUMER_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_VOUCHER_CLOSED_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_CLOSED]
                (
                    [CARI_ACTION_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_VOUCHER_CLOSED_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_CLOSED]
                (
                    [ACTION_ID] ASC,
                    [ACTION_TYPE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_VOUCHER_GUARANTORS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_GUARANTORS]
                (
                    [VOUCHER_ID] ASC,
                    [CONSUMER_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_VOUCHER_GUARANTORS_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_GUARANTORS]
                (
                    [CONSUMER_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_VOUCHER_HISTORY_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_HISTORY]
                (
                    [STATUS] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_VOUCHER_HISTORY_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_HISTORY]
                (
                    [PAYROLL_ID] DESC,
                    [VOUCHER_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_VOUCHER_HISTORY_MONEY_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_HISTORY_MONEY]
                (
                    [ACTION_ID] ASC,
                    [MONEY_TYPE] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_VOUCHER_PAYROLL_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_PAYROLL]
                (
                    [PAYROLL_CASH_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_VOUCHER_PAYROLL_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_PAYROLL]
                (
                    [PAYROLL_TYPE] ASC,
                    [ACTION_ID] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_VOUCHER_PAYROLL_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_PAYROLL]
                (
                    [COMPANY_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_VOUCHER_PAYROLL_4] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_PAYROLL]
                (
                    [PAYROLL_REVENUE_DATE] DESC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                SET ANSI_PADDING ON
                
                CREATE NONCLUSTERED INDEX [NCL_VOUCHER_PAYROLL_5] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_PAYROLL]
                (
                    [PAYROLL_NO] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_VOUCHER_PAYROLL_6] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_PAYROLL]
                (
                    [PAYROLL_ACCOUNT_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_VOUCHER_PAYROLL_ACTIONS_1] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_PAYROLL_ACTIONS]
                (
                    [VOUCHER_ID] ASC,
                    [PAYROLL_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_VOUCHER_PAYROLL_ACTIONS_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_PAYROLL_ACTIONS]
                (
                    [ACTION_ID] ASC,
                    [ACTION_TYPE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_VOUCHER_PAYROLL_ACTIONS_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_PAYROLL_ACTIONS]
                (
                    [PAYROLL_ID] ASC,
                    [VOUCHER_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_XML_STOCKS_ROW_2] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[XML_STOCKS_ROW]
                (
                    [FILE_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                CREATE NONCLUSTERED INDEX [NCL_XML_STOCKS_ROW_3] ON [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[XML_STOCKS_ROW]
                (
                    [XML_PRODUCT_ID] ASC,
                    [XML_STOCK_ID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                
                ALTER TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[FILE_IMPORT_BANK_POS_ROWS] ADD  DEFAULT ((0)) FOR [IS_CANCEL]
                
                ALTER TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_PURSUIT_PLUS] ADD  DEFAULT ((0)) FOR [ORDER_ZONE]
                
                ALTER TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_AMOUNT] ADD  DEFAULT ((0)) FOR [REAL_STOCK]
                
                ALTER TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_AMOUNT] ADD  DEFAULT ((0)) FOR [SALEABLE_STOCK]
                
                ALTER TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_AMOUNT] ADD  DEFAULT ((0)) FOR [PURCHASE_RESERVED_IN]
                
                ALTER TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_AMOUNT] ADD  DEFAULT ((0)) FOR [SALES_RESERVED_OUT]
                
                ALTER TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_AMOUNT] ADD  DEFAULT ((0)) FOR [PRODUCTION_RESERVED_IN]
                
                ALTER TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_AMOUNT] ADD  DEFAULT ((0)) FOR [PRODUCTION_RESERVED_OUT]
                
                ALTER TABLE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_AMOUNT] ADD  DEFAULT ((0)) FOR [INTERNAL_DEMAND]
                

		</cfquery>
				
	</cftransaction>
</cflock>

<!--- view table eklemeler --->

<cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#">
 CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_PRODUCT_COST_PERIOD] AS
		SELECT      
        PRODUCT_COST.PRODUCT_COST_ID,
        PRODUCT_COST.PROCESS_STAGE,
        PRODUCT_COST.PRODUCT_ID,
        PRODUCT_COST.UNIT_ID,
        PRODUCT_COST.IS_SPEC,
        PRODUCT_COST.SPECT_MAIN_ID,
        PRODUCT_COST.PRODUCT_COST_STATUS,
        PRODUCT_COST.INVENTORY_CALC_TYPE,
        PRODUCT_COST.START_DATE,
        PRODUCT_COST.COST_TYPE_ID,
        PRODUCT_COST.PRODUCT_COST,
        PRODUCT_COST.MONEY,
        PRODUCT_COST.STANDARD_COST,
        PRODUCT_COST.STANDARD_COST_MONEY,
        PRODUCT_COST.STANDARD_COST_RATE,
        PRODUCT_COST.PURCHASE_NET,
        PRODUCT_COST.PURCHASE_NET_MONEY,
        PRODUCT_COST.PURCHASE_EXTRA_COST,
        PRODUCT_COST.PRICE_PROTECTION,
        PRODUCT_COST.PRICE_PROTECTION_MONEY,
        PRODUCT_COST.PRICE_PROTECTION_TYPE,
        PRODUCT_COST.PURCHASE_NET_SYSTEM_ALL PURCHASE_NET_SYSTEM,
        PRODUCT_COST.PURCHASE_NET_SYSTEM_MONEY,
        PRODUCT_COST.PURCHASE_EXTRA_COST_SYSTEM,
        PRODUCT_COST.PRODUCT_COST_SYSTEM,
        PRODUCT_COST.PURCHASE_NET_SYSTEM_2_ALL PURCHASE_NET_SYSTEM_2,
        PRODUCT_COST.PURCHASE_NET_SYSTEM_MONEY_2,
        PRODUCT_COST.PURCHASE_EXTRA_COST_SYSTEM_2,
        PRODUCT_COST.AVAILABLE_STOCK,
        PRODUCT_COST.PARTNER_STOCK,
        PRODUCT_COST.ACTIVE_STOCK,
        PRODUCT_COST.IS_STANDARD_COST,
        PRODUCT_COST.IS_ACTIVE_STOCK,
        PRODUCT_COST.IS_PARTNER_STOCK,
        PRODUCT_COST.COST_DESCRIPTION,
        PRODUCT_COST.ACTION_PROCESS_TYPE,
        PRODUCT_COST.ACTION_PROCESS_CAT_ID,
        PRODUCT_COST.ACTION_ID,
        PRODUCT_COST.ACTION_ROW_ID,
        PRODUCT_COST.ACTION_ROW_PRICE,
        PRODUCT_COST.ACTION_TYPE,
        PRODUCT_COST.ACTION_PERIOD_ID,
        PRODUCT_COST.ACTION_AMOUNT,
        PRODUCT_COST.ACTION_DATE,
        PRODUCT_COST.ACTION_DUE_DATE,
        PRODUCT_COST.DEPARTMENT_ID,
        PRODUCT_COST.LOCATION_ID,
        PRODUCT_COST.PRODUCT_COST_LOCATION,
        PRODUCT_COST.MONEY_LOCATION,
        PRODUCT_COST.STANDARD_COST_LOCATION,
        PRODUCT_COST.STANDARD_COST_MONEY_LOCATION,
        PRODUCT_COST.STANDARD_COST_RATE_LOCATION,
        PRODUCT_COST.PURCHASE_NET_LOCATION,
        PRODUCT_COST.PURCHASE_NET_MONEY_LOCATION,
        PRODUCT_COST.PURCHASE_EXTRA_COST_LOCATION,
        PRODUCT_COST.PRICE_PROTECTION_LOCATION,
        PRODUCT_COST.PRICE_PROTECTION_MONEY_LOCATION,
        PRODUCT_COST.PURCHASE_NET_SYSTEM_LOCATION,
        PRODUCT_COST.PURCHASE_NET_SYSTEM_MONEY_LOCATION,
        PRODUCT_COST.PURCHASE_EXTRA_COST_SYSTEM_LOCATION,
        PRODUCT_COST.PURCHASE_NET_SYSTEM_2_LOCATION,
        PRODUCT_COST.PURCHASE_NET_SYSTEM_MONEY_2_LOCATION,
        PRODUCT_COST.PURCHASE_EXTRA_COST_SYSTEM_2_LOCATION,
        PRODUCT_COST.AVAILABLE_STOCK_LOCATION,
        PRODUCT_COST.PARTNER_STOCK_LOCATION,
        PRODUCT_COST.ACTIVE_STOCK_LOCATION,
        PRODUCT_COST.IS_SEVK,
        PRODUCT_COST.RECORD_DATE,
        PRODUCT_COST.RECORD_EMP,
        PRODUCT_COST.RECORD_IP,
        PRODUCT_COST.UPDATE_DATE,
        PRODUCT_COST.UPDATE_EMP,
        PRODUCT_COST.UPDATE_IP,
        PRODUCT_COST.IS_SUGGEST,
        PRODUCT_COST.PRICE_PROTECTION_TOTAL,
        PRODUCT_COST.PRICE_PROTECTION_AMOUNT,
        PRODUCT_COST.DUE_DATE,
        PRODUCT_COST.DUE_DATE_LOCATION
		FROM   
			#attributes.dsn#_product.PRODUCT_COST,
			#attributes.dsn#.SETUP_PERIOD
		WHERE
			#attributes.dsn#.SETUP_PERIOD.OUR_COMPANY_ID = #get_period.our_company_id# AND 
			#attributes.dsn#_product.PRODUCT_COST.ACTION_PERIOD_ID = #attributes.dsn#.SETUP_PERIOD.PERIOD_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_ALL_STOCKS_ROW_COST] AS
			SELECT 
                PRODUCT_ID,
				STOCK_ID,
				SPECT_VAR_ID,
                LOT_NO,
				ISNULL((SELECT
					TOP 1 (PURCHASE_NET_SYSTEM + PURCHASE_EXTRA_COST_SYSTEM)  
				FROM 
					GET_PRODUCT_COST_PERIOD
				WHERE
					GET_PRODUCT_COST_PERIOD.START_DATE <= STOCKS_ROW.PROCESS_DATE
					AND GET_PRODUCT_COST_PERIOD.PRODUCT_ID = STOCKS_ROW.PRODUCT_ID
					AND ISNULL(GET_PRODUCT_COST_PERIOD.SPECT_MAIN_ID,0)=ISNULL(STOCKS_ROW.SPECT_VAR_ID,0)
				ORDER BY
					GET_PRODUCT_COST_PERIOD.START_DATE DESC,
					GET_PRODUCT_COST_PERIOD.RECORD_DATE DESC,
					GET_PRODUCT_COST_PERIOD.PRODUCT_COST_ID DESC
					),0) AS NET_MALIYET,
				ISNULL((SELECT
					TOP 1 (PURCHASE_NET_SYSTEM_2 + PURCHASE_EXTRA_COST_SYSTEM_2)  
				FROM 
					GET_PRODUCT_COST_PERIOD
				WHERE
					GET_PRODUCT_COST_PERIOD.START_DATE <= STOCKS_ROW.PROCESS_DATE
					AND GET_PRODUCT_COST_PERIOD.PRODUCT_ID = STOCKS_ROW.PRODUCT_ID
					AND ISNULL(GET_PRODUCT_COST_PERIOD.SPECT_MAIN_ID,0)=ISNULL(STOCKS_ROW.SPECT_VAR_ID,0)
				ORDER BY 
					GET_PRODUCT_COST_PERIOD.START_DATE DESC,
					GET_PRODUCT_COST_PERIOD.RECORD_DATE DESC,
					GET_PRODUCT_COST_PERIOD.PRODUCT_COST_ID DESC
					),0) AS NET_MALIYET_2,
				STOCK_IN,
				STOCK_OUT,
				UPD_ID,
				PROCESS_DATE,
				PROCESS_TYPE,
				STORE,
				STORE_LOCATION
			FROM 
				STOCKS_ROW

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[DAILY_STOCKS] AS
			SELECT 
                (SUM(STOCK_IN-STOCK_OUT)*(SUM(NET_MALIYET)/COUNT(PRODUCT_ID)))  AS COST_TOTAL,
				(SUM(STOCK_IN-STOCK_OUT)*(SUM(NET_MALIYET_2)/COUNT(PRODUCT_ID)))  AS COST_OTHER_MONEY_TOTAL,
				SUM(STOCK_IN-STOCK_OUT) AS AMOUNT,
				PROCESS_DATE
			FROM
				GET_ALL_STOCKS_ROW_COST
			WHERE
				ISNUMERIC(UPD_ID) = 1
				AND PROCESS_TYPE <> 81
			GROUP BY
				PROCESS_DATE

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#">
 
CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[DAILY_TOTAL_STOCKS] AS
			SELECT 
                 D1.PROCESS_DATE,
				SUM(D2.AMOUNT) AMOUNT,
				SUM(D2.COST_TOTAL) COST_TOTAL,
				SUM(D2.COST_OTHER_MONEY_TOTAL) COST_OTHER_MONEY_TOTAL
			FROM
				DAILY_STOCKS D1,
				DAILY_STOCKS D2
			WHERE
				D1.PROCESS_DATE >= D2.PROCESS_DATE
			GROUP BY D1.PROCESS_DATE

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[DAILY_CREDIT] AS
		SELECT		
            SUM(INCOME_VALUE) INCOME_VALUE,
			SUM(EXPENSE_VALUE) EXPENSE_VALUE,
			SUM(INCOME_VALUE-EXPENSE_VALUE) AS BAKIYE,
			SUM(INCOME_OTHER_MONEY_VALUE) INCOME_OTHER_MONEY_VALUE,
			SUM(EXPENSE_OTHER_MONEY_VALUE) EXPENSE_OTHER_MONEY_VALUE,
			SUM(INCOME_OTHER_MONEY_VALUE-EXPENSE_OTHER_MONEY_VALUE) AS OTHER_BAKIYE,
			PROCESS_DATE
		FROM
		(	SELECT
				(TOTAL_PRICE* (CCP_M.RATE2 / CCP_M.RATE1)) AS INCOME_VALUE,
				0 AS EXPENSE_VALUE,
				( (TOTAL_PRICE* (CCP_M.RATE2 / CCP_M.RATE1)) / ISNULL(
				(SELECT
					(CPM.RATE2 / CPM.RATE1)
				FROM 
					CREDIT_CONTRACT_PAYMENT_INCOME_MONEY CPM,
					#attributes.dsn#.SETUP_PERIOD SET_PRD
				WHERE 
					SET_PRD.PERIOD_ID=#attributes.period_id# 
					AND CPM.MONEY_TYPE=ISNULL(SET_PRD.OTHER_MONEY,'TL')
					
					AND CPM.ACTION_ID=CCP.CREDIT_CONTRACT_PAYMENT_ID
				),1)) AS INCOME_OTHER_MONEY_VALUE,
				0 AS EXPENSE_OTHER_MONEY_VALUE,
				PROCESS_DATE				
			FROM
				CREDIT_CONTRACT_PAYMENT_INCOME CCP,
				CREDIT_CONTRACT_PAYMENT_INCOME_MONEY CCP_M
			WHERE
				CCP.CREDIT_CONTRACT_PAYMENT_ID=CCP_M.ACTION_ID
				AND CCP_M.MONEY_TYPE=CCP.ACTION_CURRENCY_ID
				AND CCP.PROCESS_TYPE = 292 
		UNION ALL
			SELECT
				0 AS INCOME_VALUE,
				(TOTAL_PRICE* (CCP_M.RATE2 / CCP_M.RATE1)) AS EXPENSE_VALUE,
				0 AS INCOME_OTHER_MONEY_VALUE,
				( (TOTAL_PRICE* (CCP_M.RATE2 / CCP_M.RATE1)) / ISNULL(
				(SELECT
					(CPM.RATE2 / CPM.RATE1)
				FROM 
					CREDIT_CONTRACT_PAYMENT_INCOME_MONEY CPM,
					#attributes.dsn#.SETUP_PERIOD SET_PRD
				WHERE 
					SET_PRD.PERIOD_ID=#attributes.period_id# 
					AND CPM.MONEY_TYPE=ISNULL(SET_PRD.OTHER_MONEY,'TL')
					
					AND CPM.ACTION_ID=CCP.CREDIT_CONTRACT_PAYMENT_ID
				),1)) AS EXPENSE_OTHER_MONEY_VALUE,
				PROCESS_DATE
			FROM
				CREDIT_CONTRACT_PAYMENT_INCOME CCP,
				CREDIT_CONTRACT_PAYMENT_INCOME_MONEY CCP_M
			WHERE
				CCP.CREDIT_CONTRACT_PAYMENT_ID=CCP_M.ACTION_ID
				AND CCP_M.MONEY_TYPE=CCP.ACTION_CURRENCY_ID
				AND CCP.PROCESS_TYPE = 291
		) AS C1
		GROUP BY PROCESS_DATE

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[DAILY_TOTAL_CREDIT] AS
		SELECT 
            DC_1.PROCESS_DATE,
			SUM(DC_2.INCOME_VALUE) INCOME_VALUE,
			SUM(DC_2.EXPENSE_VALUE) EXPENSE_VALUE,
			SUM(DC_2.BAKIYE) AS BAKIYE,
			SUM(DC_2.INCOME_OTHER_MONEY_VALUE) INCOME_OTHER_MONEY_VALUE,
			SUM(DC_2.EXPENSE_OTHER_MONEY_VALUE) EXPENSE_OTHER_MONEY_VALUE,
			SUM(DC_2.OTHER_BAKIYE) AS OTHER_BAKIYE
		FROM
			DAILY_CREDIT DC_1,
			DAILY_CREDIT DC_2
		WHERE
			DC_1.PROCESS_DATE >= DC_2.PROCESS_DATE
		GROUP BY DC_1.PROCESS_DATE

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SETUP_MONEY] AS
        SELECT
            MONEY_ID, 
            MONEY, 
            RATE1,
            RATE2,
            MONEY_STATUS, 
            PERIOD_ID,
            COMPANY_ID, 
            ACCOUNT_950, 
            PER_ACCOUNT, 
            RATE3, 
            RECORD_DATE, 
            RECORD_EMP, 
            RECORD_IP, 
            UPDATE_DATE, 
            UPDATE_EMP, 
            UPDATE_IP, 
            RATEPP2, 
            RATEPP3, 
            RATEWW2,
            RATEWW3, 
            CURRENCY_CODE, 
            DSP_RATE_SALE, 
            DSP_RATE_PUR, 
            DSP_UPDATE_DATE, 
            EFFECTIVE_SALE, 
            EFFECTIVE_PUR,  
            DSP_EFFECTIVE_SALE, 
            DSP_EFFECTIVE_PUR, 
            MONEY_NAME, 
            MONEY_SYMBOL 
        FROM
           #attributes.dsn#.SETUP_MONEY
        WHERE
            PERIOD_ID=#attributes.period_id#

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[DAILY_ACCOUNT_REMAINDER] AS
		SELECT	
            SUM(ALACAK) ALACAK,
			SUM(BORC) BORC,
			SUM(ALACAK_SYSTEM) ALACAK_SYSTEM,
			SUM(BORC_SYSTEM) BORC_SYSTEM,
			ACTION_CURRENCY_ID,
			ACCOUNT_ID,
			ACTION_DATE,
			ISNULL(	
				(SELECT
					TOP 1 (MNY_H.RATE2/MNY_H.RATE1) AS RATE
				FROM 
					#attributes.dsn#.MONEY_HISTORY MNY_H
				WHERE 
					MNY_H.PERIOD_ID=#attributes.period_id#
					AND MNY_H.MONEY=ACTION_CURRENCY_ID
					AND MNY_H.VALIDATE_DATE <= ACR_1.ACTION_DATE
				ORDER BY MONEY_HISTORY_ID DESC),
			
				(SELECT
					(SM.RATE2/SM.RATE1) AS RATE
				FROM 
					SETUP_MONEY SM
				WHERE 
					SM.MONEY=ACTION_CURRENCY_ID
					)
				) AS ACTION_CURRENCY_RATE,
			ISNULL(	
				(SELECT
					TOP 1 (MNY_H.RATE2/MNY_H.RATE1) AS RATE
				FROM 
					#attributes.dsn#.MONEY_HISTORY MNY_H,
					#attributes.dsn#.SETUP_PERIOD SET_PRD
				WHERE 
					SET_PRD.PERIOD_ID=#attributes.period_id#
					AND MNY_H.PERIOD_ID= SET_PRD.PERIOD_ID
					
					AND MNY_H.MONEY=ISNULL(SET_PRD.OTHER_MONEY,'TL')
					
					AND MNY_H.VALIDATE_DATE <= ACR_1.ACTION_DATE
				ORDER BY MONEY_HISTORY_ID DESC),
			
				(SELECT
					(SM.RATE2/SM.RATE1) AS RATE
				FROM 
					SETUP_MONEY SM,
					#attributes.dsn#.SETUP_PERIOD SET_PRD
				WHERE 
					SET_PRD.PERIOD_ID=#attributes.period_id# 
					AND SM.MONEY=ISNULL(SET_PRD.OTHER_MONEY,'TL')
					
				)
			) AS OTHER_MONEY2_RATE
		FROM
			(
			SELECT     
				0 AS ALACAK, 
				0 AS ALACAK_SYSTEM, 
				BA.ACTION_VALUE AS BORC,
				BA.SYSTEM_ACTION_VALUE AS BORC_SYSTEM,
				BA.ACTION_CURRENCY_ID,		
				ACCOUNTS.ACCOUNT_ID,
				ACCOUNTS.ACCOUNT_NAME, 
				BA.ACTION_DATE
			FROM
				BANK_ACTIONS BA,
				#attributes.dsn#_#get_period.our_company_id#.ACCOUNTS AS ACCOUNTS
			WHERE
				ACCOUNTS.ACCOUNT_ID = BA.ACTION_TO_ACCOUNT_ID 
				AND BA.ACTION_TYPE_ID <> 93
				
			UNION ALL
			SELECT 	
				BA.ACTION_VALUE AS ALACAK, 	
				BA.SYSTEM_ACTION_VALUE AS ALACAK_SYSTEM, 	
				0 AS BORC,
				0 AS BORC_SYSTEM,
				BA.ACTION_CURRENCY_ID,
				ACCOUNTS.ACCOUNT_ID,
				ACCOUNTS.ACCOUNT_NAME, 
				BA.ACTION_DATE
			FROM
				BANK_ACTIONS BA,
				#attributes.dsn#_#get_period.our_company_id#.ACCOUNTS AS ACCOUNTS
			WHERE
				ACCOUNTS.ACCOUNT_ID = BA.ACTION_FROM_ACCOUNT_ID
				AND BA.ACTION_TYPE_ID <> 93
			) AS ACR_1
		GROUP BY 
			ACTION_CURRENCY_ID,
			ACCOUNT_ID,
			ACTION_DATE

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[DAILY_CASH_REMAINDER] AS
		SELECT	
            SUM(BORC) BORC,
			SUM(ALACAK) ALACAK,
			SUM(BORC_SYSTEM) BORC_SYSTEM,
			SUM(ALACAK_SYSTEM) ALACAK_SYSTEM,
			CASH_ACTION_CURRENCY_ID,
			ACTION_DATE,
			CASH_ID,
			ISNULL(	
				(SELECT
					TOP 1 (MNY_H.RATE2/MNY_H.RATE1) AS RATE
				FROM 
					#attributes.dsn#.MONEY_HISTORY MNY_H
				WHERE 
					MNY_H.PERIOD_ID=#attributes.period_id#
					AND MNY_H.MONEY=CASH_ACTION_CURRENCY_ID
					AND MNY_H.VALIDATE_DATE< = C_1.ACTION_DATE
				ORDER BY MONEY_HISTORY_ID DESC),
			
				(SELECT
					(SM.RATE2/SM.RATE1) AS RATE
				FROM 
					SETUP_MONEY SM
				WHERE 
					SM.MONEY=CASH_ACTION_CURRENCY_ID
					)
				) AS ACTION_CURRENCY_RATE,
			ISNULL(	
				(SELECT
					TOP 1 (MNY_H.RATE2/MNY_H.RATE1) AS RATE
				FROM 
					#attributes.dsn#.MONEY_HISTORY MNY_H,
					#attributes.dsn#.SETUP_PERIOD SET_PRD
				WHERE 
					SET_PRD.PERIOD_ID=#attributes.period_id#
					AND MNY_H.PERIOD_ID= SET_PRD.PERIOD_ID
					
					AND MNY_H.MONEY=ISNULL(SET_PRD.OTHER_MONEY,'TL')
					
					AND MNY_H.VALIDATE_DATE <= C_1.ACTION_DATE
				ORDER BY MONEY_HISTORY_ID DESC),
			
				(SELECT
					(SM.RATE2/SM.RATE1) AS RATE
				FROM 
					SETUP_MONEY SM,
					#attributes.dsn#.SETUP_PERIOD SET_PRD
				WHERE 
					SET_PRD.PERIOD_ID=#attributes.period_id# 
					AND SM.MONEY=ISNULL(SET_PRD.OTHER_MONEY,'TL')
					
				)
				) AS OTHER_MONEY2_RATE
		
		FROM
			(
			SELECT
					0 AS BORC, 
					0 AS BORC_SYSTEM, 
					CA.CASH_ACTION_VALUE AS ALACAK, 
					CA.ACTION_VALUE AS ALACAK_SYSTEM, 
					CA.CASH_ACTION_CURRENCY_ID,
					CA.ACTION_DATE,
					CASH.CASH_ID
				FROM
					CASH_ACTIONS CA, 
					CASH
				WHERE
					CA.CASH_ACTION_FROM_CASH_ID = CASH.CASH_ID 
				
			UNION ALL
				SELECT
					CA.CASH_ACTION_VALUE AS BORC,
					CA.ACTION_VALUE AS BORC_SYSTEM,
					0 AS ALACAK,
					0 AS ALACAK_SYSTEM, 
					CA.CASH_ACTION_CURRENCY_ID,
					CA.ACTION_DATE,
					CASH.CASH_ID
				FROM
					CASH_ACTIONS CA, 
					CASH
				WHERE
					CA.CASH_ACTION_TO_CASH_ID = CASH.CASH_ID 
				
			) AS C_1
		GROUP BY
			CASH_ACTION_CURRENCY_ID,
			ACTION_DATE,
			CASH_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[DAILY_EFFECTIVE_MONEY] AS
		SELECT 
            SUM(BORC) BORC,
			SUM(ALACAK) ALACAK,
			SUM(BORC-ALACAK) BAKIYE,
			SUM(BORC2) BORC2,		
			SUM(ALACAK2) ALACAK2,
			SUM(BORC2-ALACAK2) BAKIYE2,
			ACTION_DATE
		FROM
			(
				SELECT
					(BORC*ACTION_CURRENCY_RATE) BORC,
					(ALACAK*ACTION_CURRENCY_RATE) ALACAK,
					((BORC*ACTION_CURRENCY_RATE)/OTHER_MONEY2_RATE) BORC2,
					((ALACAK*ACTION_CURRENCY_RATE)/OTHER_MONEY2_RATE) ALACAK2,
					ACTION_DATE
				FROM
					DAILY_CASH_REMAINDER
			UNION
				SELECT
					(BORC*ACTION_CURRENCY_RATE) BORC,
					(ALACAK*ACTION_CURRENCY_RATE) ALACAK,
					((BORC*ACTION_CURRENCY_RATE)/OTHER_MONEY2_RATE) BORC2,
					((ALACAK*ACTION_CURRENCY_RATE)/OTHER_MONEY2_RATE) ALACAK2,
					ACTION_DATE
				FROM
					DAILY_ACCOUNT_REMAINDER
			
			) AS A_1
		GROUP BY
			ACTION_DATE

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[DAILY_TOTAL_EFFECTIVE_MONEY] AS
		SELECT 
            DM_1.ACTION_DATE,
			SUM(DM_2.BORC) BORC,
			SUM(DM_2.BORC2) BORC2,
			SUM(DM_2.ALACAK) AS ALACAK,
			SUM(DM_2.ALACAK2) AS ALACAK2,
			SUM(DM_2.BORC-DM_2.ALACAK) BAKIYE,
			SUM(DM_2.BORC2-DM_2.ALACAK2) BAKIYE2
		FROM
			DAILY_EFFECTIVE_MONEY DM_1,
			DAILY_EFFECTIVE_MONEY DM_2
		WHERE
			DM_1.ACTION_DATE >= DM_2.ACTION_DATE
	
		GROUP BY DM_1.ACTION_DATE

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[DAILY_CARI_REMAINDER] AS 
		SELECT 
            SUM(BORC) BORC,
			SUM(BORC2) BORC2,
			SUM(ALACAK) ALACAK,
			SUM(ALACAK2) ALACAK2,
			SUM(BORC-ALACAK) BAKIYE,
			SUM(BORC2-ALACAK2) BAKIYE2,
			ACTION_DATE
		FROM
			(
				SELECT
					C.ACTION_VALUE AS BORC,

					C.ACTION_VALUE_2 AS BORC2,
					0 AS ALACAK,
					0 AS ALACAK2,
					ACTION_DATE
				FROM
					CARI_ROWS C
				WHERE 
					TO_CMP_ID IS NOT NULL
					OR TO_CONSUMER_ID IS NOT NULL
					OR TO_EMPLOYEE_ID IS NOT NULL						
			UNION ALL
				SELECT
					0 AS BORC,
					0 AS BORC2,
					C.ACTION_VALUE AS ALACAK,
					C.ACTION_VALUE_2 AS ALACAK2,
					ACTION_DATE
				FROM
	
					CARI_ROWS C
				WHERE
					FROM_CMP_ID IS NOT NULL
					OR FROM_CONSUMER_ID IS NOT NULL
					OR FROM_EMPLOYEE_ID IS NOT NULL				
			) AS CARI_TOPLAM_1
		GROUP BY ACTION_DATE

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[DAILY_TOTAL_CARI_REMAINDER] AS
		SELECT 
			D1.ACTION_DATE,
			SUM(D2.ALACAK) ALACAK,
			SUM(D2.BORC) BORC,
			SUM(D2.BORC-D2.ALACAK) BAKIYE,
			SUM(D2.BORC2) BORC2,
			SUM(D2.ALACAK2) ALACAK2,
			SUM(D2.BAKIYE2) BAKIYE2
		FROM
			DAILY_CARI_REMAINDER D1,
			DAILY_CARI_REMAINDER D2
		WHERE
			D1.ACTION_DATE >= D2.ACTION_DATE
		GROUP BY D1.ACTION_DATE

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_IN_CASH] AS
			SELECT
				0 AS ALACAK, 
				SUM(VOUCHER.OTHER_MONEY_VALUE) AS BORC, 
				CASH.CASH_ID, 
				CASH.CASH_NAME
			FROM
				CASH,
				VOUCHER_PAYROLL,
				VOUCHER,
				VOUCHER_HISTORY
			WHERE
				VOUCHER.VOUCHER_STATUS_ID = 1 AND
				CASH.CASH_ID = VOUCHER_PAYROLL.PAYROLL_CASH_ID AND
				VOUCHER_HISTORY.VOUCHER_ID = VOUCHER.VOUCHER_ID AND
				VOUCHER_HISTORY.PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
				VOUCHER_HISTORY.HISTORY_ID = (SELECT MAX(VH.HISTORY_ID) FROM VOUCHER_HISTORY VH WHERE VH.VOUCHER_ID = VOUCHER.VOUCHER_ID AND VH.STATUS = 1)
			GROUP BY
				CASH.CASH_ID, 
				CASH.CASH_NAME

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_IN_CASH_TOTAL] AS
			SELECT
				SUM(VIC.BORC-VIC.ALACAK) AS BAKIYE, 
				SUM(VIC.BORC) AS BORC, 
				SUM(VIC.ALACAK) AS ALACAK,
				VIC.CASH_ID,
				VIC.CASH_NAME
			FROM
				VOUCHER_IN_CASH VIC
			GROUP BY
				VIC.CASH_ID,
				VIC.CASH_NAME

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_RELATION_PAPERS_1] AS
		SELECT 
			OPP_ID,
			0 OFFER_ID,
			0 ORDER_ID
		FROM
			#attributes.dsn#_#get_period.our_company_id#.OPPORTUNITIES OPPORTUNITIES
		WHERE
			OPP_ID NOT IN (SELECT ISNULL(OPP_ID,0) FROM #attributes.dsn#_#get_period.our_company_id#.OFFER OFFER)
	UNION
		SELECT 
			0 OPP_ID,
			OFFER_ID,
			0 ORDER_ID
		FROM
			#attributes.dsn#_#get_period.our_company_id#.OFFER OFFER
		WHERE
			OFFER.OPP_ID IS NULL AND
			OFFER.OFFER_ID NOT IN (SELECT ISNULL(OFFER_ID,0) FROM #attributes.dsn#_#get_period.our_company_id#.ORDERS ORDERS)
	UNION
		SELECT 
			OPPORTUNITIES.OPP_ID,
			OFFER.OFFER_ID,
			0 ORDER_ID
		FROM
			#attributes.dsn#_#get_period.our_company_id#.OPPORTUNITIES OPPORTUNITIES,
			#attributes.dsn#_#get_period.our_company_id#.OFFER OFFER
		WHERE
			OPPORTUNITIES.OPP_ID = OFFER.OPP_ID AND
			OFFER.OFFER_ID NOT IN (SELECT ISNULL(OFFER_ID,0) FROM #attributes.dsn#_#get_period.our_company_id#.ORDERS ORDERS)
	UNION
		SELECT 
			OPPORTUNITIES.OPP_ID,
			OFFER.OFFER_ID,
			ORDERS.ORDER_ID
		FROM
			#attributes.dsn#_#get_period.our_company_id#.OPPORTUNITIES OPPORTUNITIES,
			#attributes.dsn#_#get_period.our_company_id#.OFFER OFFER,
			#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDERS
		WHERE
			OPPORTUNITIES.OPP_ID = OFFER.OPP_ID AND
			OFFER.OFFER_ID=ORDERS.OFFER_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_RELATION_PAPERS_2] AS
        SELECT 
			ORDERS_SHIP.ORDER_ID,
			ORDERS_SHIP.SHIP_ID,
			0 INVOICE,
			0 SHIP_RESULT_ID,
			0 P_ORDER_ID,
			0 PR_ORDER_ID,
			0 FIS_ID
		FROM
			#attributes.dsn#_#get_period.our_company_id#.ORDERS_SHIP ORDERS_SHIP
		WHERE
			ORDERS_SHIP.PERIOD_ID=#attributes.period_id# AND
			ORDERS_SHIP.ORDER_ID NOT IN (SELECT ORDER_ID FROM #attributes.dsn#_#get_period.our_company_id#.ORDERS_INVOICE WHERE PERIOD_ID=#attributes.period_id#) AND
			ORDERS_SHIP.ORDER_ID NOT IN (SELECT DISTINCT PRODUCTION_ORDER_ID FROM  #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS_ROW) AND
			ORDERS_SHIP.SHIP_ID NOT IN (SELECT SHIP_ID FROM INVOICE_SHIPS WHERE SHIP_PERIOD_ID=#attributes.period_id#) AND
			ORDERS_SHIP.ORDER_ID NOT IN (SELECT ISNULL(ORDER_ID,0) FROM #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS_ROW) AND
			ORDERS_SHIP.SHIP_ID NOT IN (
										SELECT 
											ISNULL(SHIP_RESULT_ROW.SHIP_ID,0) 
										FROM 
											SHIP_RESULT_ROW,
											SHIP_RESULT
										WHERE
											SHIP_RESULT.SHIP_RESULT_ID=SHIP_RESULT_ROW.SHIP_RESULT_ID AND
											ISNULL(SHIP_RESULT.IS_TYPE,0)<>2
										) 
	UNION 
		--sipariş irsaliyede faturada var SEVKİYAT YOK ÜRETİM YOK
		SELECT 
			ORDERS_SHIP.ORDER_ID,
			ORDERS_SHIP.SHIP_ID,
			INVOICE_SHIPS.INVOICE_ID,
			0 SHIP_RESULT_ID,
			0 P_ORDER_ID,
			0 PR_ORDER_ID,
			0 FIS_ID
		FROM
			#attributes.dsn#_#get_period.our_company_id#.ORDERS_SHIP ORDERS_SHIP,
			INVOICE,
			INVOICE_SHIPS
		WHERE
			ORDERS_SHIP.SHIP_ID=INVOICE_SHIPS.SHIP_ID AND
			INVOICE_SHIPS.INVOICE_ID = INVOICE.INVOICE_ID AND
			ORDERS_SHIP.PERIOD_ID=#attributes.period_id# AND
			INVOICE_SHIPS.SHIP_PERIOD_ID= #attributes.period_id# AND
			ORDERS_SHIP.ORDER_ID NOT IN (SELECT ISNULL(ORDER_ID,0) FROM #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS_ROW) AND
			INVOICE_SHIPS.SHIP_ID NOT IN (
											SELECT 
												ISNULL(SHIP_RESULT_ROW.SHIP_ID,0) 
											FROM 
												SHIP_RESULT_ROW,
												SHIP_RESULT
											WHERE
												SHIP_RESULT.SHIP_RESULT_ID=SHIP_RESULT_ROW.SHIP_RESULT_ID AND
												ISNULL(SHIP_RESULT.IS_TYPE,0)<>2
											)
	UNION
	--sipariş irsaliyede VAR fatura YOK VEYA VAR SEVKİYAT VAR ÜRETİM YOK
		SELECT 
			ORDERS_SHIP.ORDER_ID,
			ORDERS_SHIP.SHIP_ID,
			(SELECT TOP 1 INVOICE_ID FROM INVOICE_SHIPS WHERE SHIP_PERIOD_ID=#attributes.period_id# AND ORDERS_SHIP.SHIP_ID=INVOICE_SHIPS.SHIP_ID) AS INVOICE_ID,
			SHIP_RESULT.SHIP_RESULT_ID,
			0 P_ORDER_ID,
			0 PR_ORDER_ID,
			0 FIS_ID
		FROM
			#attributes.dsn#_#get_period.our_company_id#.ORDERS_SHIP ORDERS_SHIP,
			SHIP_RESULT_ROW,
			SHIP_RESULT
		WHERE
			ORDERS_SHIP.SHIP_ID = SHIP_RESULT_ROW.SHIP_ID AND
			SHIP_RESULT.SHIP_RESULT_ID = SHIP_RESULT_ROW.SHIP_RESULT_ID AND
			ORDERS_SHIP.PERIOD_ID=#attributes.period_id# AND
			SHIP_RESULT.SHIP_RESULT_ID=SHIP_RESULT_ROW.SHIP_RESULT_ID AND
			ISNULL(SHIP_RESULT.IS_TYPE,0)<>2 AND
			ORDERS_SHIP.ORDER_ID NOT IN (SELECT ISNULL(ORDER_ID,0) FROM #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS_ROW)	
	UNION 
		--sipariş yok irsaliye ve fatura var SEVKİYAT YOK
		SELECT 
			0 ORDER_ID,
			INVOICE_SHIPS.SHIP_ID,
			INVOICE_SHIPS.INVOICE_ID,
			0 SHIP_RESULT_ID,
			0 P_ORDER_ID,
			0 PR_ORDER_ID,
			0 FIS_ID
		FROM
			INVOICE_SHIPS
		WHERE
			INVOICE_SHIPS.SHIP_PERIOD_ID=#attributes.period_id# AND
			INVOICE_SHIPS.SHIP_ID NOT IN (SELECT SHIP_ID FROM #attributes.dsn#_#get_period.our_company_id#.ORDERS_SHIP WHERE PERIOD_ID=#attributes.period_id#) AND
			INVOICE_SHIPS.INVOICE_ID NOT IN (SELECT SHIP_ID FROM #attributes.dsn#_#get_period.our_company_id#.ORDERS_INVOICE WHERE PERIOD_ID=#attributes.period_id#) AND
			INVOICE_SHIPS.SHIP_ID NOT IN (
											SELECT 
												ISNULL(SHIP_RESULT_ROW.SHIP_ID,0) 
											FROM 
												SHIP_RESULT_ROW,
												SHIP_RESULT
											WHERE
												SHIP_RESULT.SHIP_RESULT_ID=SHIP_RESULT_ROW.SHIP_RESULT_ID AND
												ISNULL(SHIP_RESULT.IS_TYPE,0)<>2
											)
	UNION 
		--sipariş yok irsaliye ve fatura var SEVKİYAT VAR
		SELECT 
			0 ORDER_ID,
			INVOICE_SHIPS.SHIP_ID,
			INVOICE_SHIPS.INVOICE_ID,
			SHIP_RESULT_ROW.SHIP_RESULT_ID SHIP_RESULT_ID,
			0 P_ORDER_ID,
			0 PR_ORDER_ID,
			0 FIS_ID
		FROM
			INVOICE_SHIPS,
			SHIP_RESULT_ROW,
			SHIP_RESULT
		WHERE
			INVOICE_SHIPS.SHIP_PERIOD_ID=#attributes.period_id# AND
			INVOICE_SHIPS.SHIP_ID NOT IN (SELECT ORDERS_SHIP.SHIP_ID FROM  #attributes.dsn#_#get_period.our_company_id#.ORDERS_SHIP ORDERS_SHIP WHERE PERIOD_ID=#attributes.period_id#) AND
			INVOICE_SHIPS.INVOICE_ID NOT IN (SELECT ORDERS_INVOICE.INVOICE_ID FROM #attributes.dsn#_#get_period.our_company_id#.ORDERS_INVOICE ORDERS_INVOICE WHERE PERIOD_ID=#attributes.period_id#) AND
			SHIP_RESULT_ROW.SHIP_ID=INVOICE_SHIPS.SHIP_ID AND
			SHIP_RESULT.SHIP_RESULT_ID=SHIP_RESULT_ROW.SHIP_RESULT_ID AND
			ISNULL(SHIP_RESULT.IS_TYPE,0)<>2
	----------------------
	UNION
		--siparişin irasliyesi YOK FATURA YOK SEVKİYAT(İRSALİYEDEN) YOK ÜRETİM EMRİ VAR ÜRETİM SONUCU YOK
		SELECT 
			ORDERS.ORDER_ID,
			0 SHIP_ID,
			0 INVOICE,
			0 SHIP_RESULT_ID,
			PRODUCTION_ORDERS_ROW.PRODUCTION_ORDER_ID P_ORDER_ID,
			0 PR_ORDER_ID,
			0 FIS_ID
		FROM
			#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDERS,
			#attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS_ROW PRODUCTION_ORDERS_ROW
	
		WHERE

			ORDERS.ORDER_ID = PRODUCTION_ORDERS_ROW.ORDER_ID AND
			ORDERS.ORDER_ID NOT IN (SELECT ORDER_ID FROM #attributes.dsn#_#get_period.our_company_id#.ORDERS_INVOICE WHERE PERIOD_ID=#attributes.period_id#) AND
			ORDERS.ORDER_ID NOT IN (SELECT ORDER_ID FROM #attributes.dsn#_#get_period.our_company_id#.ORDERS_SHIP WHERE PERIOD_ID=#attributes.period_id#) AND
			PRODUCTION_ORDERS_ROW.PRODUCTION_ORDER_ID NOT IN (SELECT P_ORDER_ID FROM #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS)
	
	UNION
		--siparişin irsaliyesi var FATURA YOK SEVKİYAT(İRSALİYEDEN) YOK ÜRETİM EMRİ VAR ÜRETİM SONUCU YOK
		SELECT 
			ORDERS_SHIP.ORDER_ID,
			ORDERS_SHIP.SHIP_ID,
			0 INVOICE,
			0 SHIP_RESULT_ID,
			PRODUCTION_ORDERS_ROW.PRODUCTION_ORDER_ID P_ORDER_ID,
			0 PR_ORDER_ID,
			0 FIS_ID
		FROM
			#attributes.dsn#_#get_period.our_company_id#.ORDERS_SHIP ORDERS_SHIP,
			#attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS_ROW PRODUCTION_ORDERS_ROW
		WHERE
			ORDERS_SHIP.ORDER_ID = PRODUCTION_ORDERS_ROW.ORDER_ID AND
			ORDERS_SHIP.PERIOD_ID=#attributes.period_id# AND
			ORDERS_SHIP.ORDER_ID NOT IN (SELECT ORDER_ID FROM #attributes.dsn#_#get_period.our_company_id#.ORDERS_INVOICE WHERE PERIOD_ID=#attributes.period_id#) AND
			ORDERS_SHIP.SHIP_ID NOT IN (SELECT SHIP_ID FROM INVOICE_SHIPS WHERE SHIP_PERIOD_ID=#attributes.period_id#) AND
			ORDERS_SHIP.SHIP_ID NOT IN (
										SELECT 
											ISNULL(SHIP_RESULT_ROW.SHIP_ID,0) 
										FROM 
											SHIP_RESULT_ROW,
											SHIP_RESULT
										WHERE
											SHIP_RESULT.SHIP_RESULT_ID=SHIP_RESULT_ROW.SHIP_RESULT_ID AND
											ISNULL(SHIP_RESULT.IS_TYPE,0)<>2
										) AND
			PRODUCTION_ORDERS_ROW.PRODUCTION_ORDER_ID NOT IN (SELECT P_ORDER_ID FROM #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS)
	UNION 
		--sipariş irsaliyede faturada var SEVKİYAT YOK ÜRETİM EMRİ VAR ÜERTİM SONUCU YOK
		SELECT 
			ORDERS_SHIP.ORDER_ID,
			ORDERS_SHIP.SHIP_ID,
			INVOICE_SHIPS.INVOICE_ID,
			0 SHIP_RESULT_ID,
			PRODUCTION_ORDERS_ROW.PRODUCTION_ORDER_ID P_ORDER_ID,
			0 PR_ORDER_ID,
			0 FIS_ID
		FROM
			#attributes.dsn#_#get_period.our_company_id#.ORDERS_SHIP ORDERS_SHIP,
			INVOICE,
			INVOICE_SHIPS,
			#attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS_ROW PRODUCTION_ORDERS_ROW
		WHERE
			ORDERS_SHIP.ORDER_ID = PRODUCTION_ORDERS_ROW.ORDER_ID AND
			ORDERS_SHIP.SHIP_ID=INVOICE_SHIPS.SHIP_ID AND
			INVOICE_SHIPS.INVOICE_ID = INVOICE.INVOICE_ID AND
			ORDERS_SHIP.PERIOD_ID=#attributes.period_id# AND
			INVOICE_SHIPS.SHIP_PERIOD_ID=#attributes.period_id# AND
			INVOICE_SHIPS.SHIP_ID NOT IN (
											SELECT 
												ISNULL(SHIP_RESULT_ROW.SHIP_ID,0) 
											FROM 
												SHIP_RESULT_ROW,
												SHIP_RESULT
											WHERE
												SHIP_RESULT.SHIP_RESULT_ID=SHIP_RESULT_ROW.SHIP_RESULT_ID AND
												ISNULL(SHIP_RESULT.IS_TYPE,0)<>2
											) AND
			PRODUCTION_ORDERS_ROW.PRODUCTION_ORDER_ID NOT IN (SELECT P_ORDER_ID FROM #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS)
	UNION 
		--sipariş irsaliyede faturada var SEVKİYAT VAR ÜRETİM EMRİ VAR ÜRETİM SONUC YOK
		SELECT 
			ORDERS_SHIP.ORDER_ID,
			ORDERS_SHIP.SHIP_ID,
			INVOICE_SHIPS.INVOICE_ID,
			0 SHIP_RESULT_ID,
			PRODUCTION_ORDERS_ROW.PRODUCTION_ORDER_ID P_ORDER_ID,
			0 PR_ORDER_ID,
			0 FIS_ID
		FROM
			#attributes.dsn#_#get_period.our_company_id#.ORDERS_SHIP ORDERS_SHIP,
			#attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS_ROW PRODUCTION_ORDERS_ROW,
			INVOICE,
			INVOICE_SHIPS,
			SHIP_RESULT_ROW,
			SHIP_RESULT
		WHERE
			ORDERS_SHIP.ORDER_ID = PRODUCTION_ORDERS_ROW.ORDER_ID AND
			ORDERS_SHIP.SHIP_ID=INVOICE_SHIPS.SHIP_ID AND
			INVOICE_SHIPS.INVOICE_ID = INVOICE.INVOICE_ID AND

			ORDERS_SHIP.PERIOD_ID=#attributes.period_id# AND
			INVOICE_SHIPS.SHIP_PERIOD_ID=#attributes.period_id# AND
			SHIP_RESULT_ROW.SHIP_ID=INVOICE_SHIPS.SHIP_ID AND
			SHIP_RESULT.SHIP_RESULT_ID=SHIP_RESULT_ROW.SHIP_RESULT_ID AND
			ISNULL(SHIP_RESULT.IS_TYPE,0)<>2 AND
			PRODUCTION_ORDERS_ROW.PRODUCTION_ORDER_ID NOT IN (SELECT P_ORDER_ID FROM #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS)
	---------
	
	UNION
		--siparişin irasliyesi YOK FATURA YOK SEVKİYAT(İRSALİYEDEN) YOK ÜRETİM EMRİ VAR SONUÇTA VAR stok fıs yok
		SELECT 
			ORDERS.ORDER_ID,
			0 SHIP_ID,
			0 INVOICE,
			0 SHIP_RESULT_ID,
			PRODUCTION_ORDERS_ROW.PRODUCTION_ORDER_ID P_ORDER_ID,
			PRODUCTION_ORDER_RESULTS.PR_ORDER_ID,
			0 FIS_ID
		FROM
			#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDERS,
			#attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS_ROW PRODUCTION_ORDERS_ROW,
			#attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS PRODUCTION_ORDER_RESULTS
		WHERE
			ORDERS.ORDER_ID = PRODUCTION_ORDERS_ROW.ORDER_ID AND
			PRODUCTION_ORDER_RESULTS.P_ORDER_ID=PRODUCTION_ORDERS_ROW.PRODUCTION_ORDER_ID AND
			ORDERS.ORDER_ID NOT IN (SELECT ORDER_ID FROM #attributes.dsn#_#get_period.our_company_id#.ORDERS_INVOICE WHERE PERIOD_ID=#attributes.period_id#) AND
			ORDERS.ORDER_ID NOT IN (SELECT ORDER_ID FROM #attributes.dsn#_#get_period.our_company_id#.ORDERS_SHIP WHERE PERIOD_ID=#attributes.period_id#) AND
			PRODUCTION_ORDER_RESULTS.IS_STOCK_FIS = 0
	
	UNION
		--siparişin irasliyesi var FATURA YOK SEVKİYAT(İRSALİYEDEN) YOK ÜRETİM EMRİ VAR üretim sonucu var STOK FIS YOK
		SELECT 
			ORDERS_SHIP.ORDER_ID,
			ORDERS_SHIP.SHIP_ID,
			0 INVOICE,
			0 SHIP_RESULT_ID,
			PRODUCTION_ORDERS_ROW.PRODUCTION_ORDER_ID P_ORDER_ID,
			PRODUCTION_ORDER_RESULTS.PR_ORDER_ID,
			0 FIS_ID
		FROM
			#attributes.dsn#_#get_period.our_company_id#.ORDERS_SHIP ORDERS_SHIP,
			#attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS_ROW PRODUCTION_ORDERS_ROW,
			#attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS PRODUCTION_ORDER_RESULTS
		WHERE
			ORDERS_SHIP.ORDER_ID = PRODUCTION_ORDERS_ROW.ORDER_ID AND
			PRODUCTION_ORDER_RESULTS.P_ORDER_ID=PRODUCTION_ORDERS_ROW.PRODUCTION_ORDER_ID AND
			ORDERS_SHIP.PERIOD_ID=#attributes.period_id# AND
			ORDERS_SHIP.ORDER_ID NOT IN (SELECT ORDER_ID FROM #attributes.dsn#_#get_period.our_company_id#.ORDERS_INVOICE WHERE PERIOD_ID=#attributes.period_id#) AND
			ORDERS_SHIP.SHIP_ID NOT IN (SELECT SHIP_ID FROM INVOICE_SHIPS WHERE SHIP_PERIOD_ID=#attributes.period_id#) AND
			ORDERS_SHIP.SHIP_ID NOT IN (
							SELECT ISNULL(SHIP_RESULT_ROW.SHIP_ID,0) 
							FROM 
								SHIP_RESULT_ROW,
								SHIP_RESULT
							WHERE
								SHIP_RESULT.SHIP_RESULT_ID=SHIP_RESULT_ROW.SHIP_RESULT_ID AND
								ISNULL(SHIP_RESULT.IS_TYPE,0)<>2
							)
			AND PRODUCTION_ORDER_RESULTS.IS_STOCK_FIS = 0
	UNION 
		--sipariş irsaliyede faturada var SEVKİYAT YOK ÜRETİM EMRİ VAR üretim sonucu var STOK FIS YOK
		SELECT 
			ORDERS_SHIP.ORDER_ID,
			ORDERS_SHIP.SHIP_ID,
			INVOICE_SHIPS.INVOICE_ID,
			0 SHIP_RESULT_ID,
			PRODUCTION_ORDERS_ROW.PRODUCTION_ORDER_ID P_ORDER_ID,
			PRODUCTION_ORDER_RESULTS.PR_ORDER_ID,
			0 FIS_ID
		FROM
			#attributes.dsn#_#get_period.our_company_id#.ORDERS_SHIP ORDERS_SHIP,
			INVOICE,
			INVOICE_SHIPS,
			#attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS_ROW PRODUCTION_ORDERS_ROW,
			#attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS PRODUCTION_ORDER_RESULTS
		WHERE
			ORDERS_SHIP.ORDER_ID = PRODUCTION_ORDERS_ROW.ORDER_ID AND
			PRODUCTION_ORDER_RESULTS.P_ORDER_ID=PRODUCTION_ORDERS_ROW.PRODUCTION_ORDER_ID AND
			ORDERS_SHIP.SHIP_ID=INVOICE_SHIPS.SHIP_ID AND
			INVOICE_SHIPS.INVOICE_ID = INVOICE.INVOICE_ID AND
			ORDERS_SHIP.PERIOD_ID=#attributes.period_id# AND
			INVOICE_SHIPS.SHIP_PERIOD_ID=#attributes.period_id# AND
			INVOICE_SHIPS.SHIP_ID NOT IN (SELECT ISNULL(SHIP_RESULT_ROW.SHIP_ID,0) 
							FROM 
								SHIP_RESULT_ROW,
								SHIP_RESULT
							WHERE
								SHIP_RESULT.SHIP_RESULT_ID=SHIP_RESULT_ROW.SHIP_RESULT_ID AND
								ISNULL(SHIP_RESULT.IS_TYPE,0)<>2
							)
			AND PRODUCTION_ORDER_RESULTS.IS_STOCK_FIS = 0
	UNION 
		--sipariş irsaliyede faturada var SEVKİYAT VAR ÜRETİM EMRİ VAR üretim sonucu var STOK FIS YOK
		SELECT 
			ORDERS_SHIP.ORDER_ID,
			ORDERS_SHIP.SHIP_ID,
			INVOICE_SHIPS.INVOICE_ID,
			0 SHIP_RESULT_ID,
			PRODUCTION_ORDERS_ROW.PRODUCTION_ORDER_ID P_ORDER_ID,
			PRODUCTION_ORDER_RESULTS.PR_ORDER_ID,
			0 FIS_ID
		FROM
			#attributes.dsn#_#get_period.our_company_id#.ORDERS_SHIP ORDERS_SHIP,
			#attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS_ROW PRODUCTION_ORDERS_ROW,
			INVOICE,
			INVOICE_SHIPS,
			SHIP_RESULT_ROW,
			SHIP_RESULT,
			#attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS PRODUCTION_ORDER_RESULTS
		WHERE
			ORDERS_SHIP.ORDER_ID = PRODUCTION_ORDERS_ROW.ORDER_ID AND
			PRODUCTION_ORDER_RESULTS.P_ORDER_ID=PRODUCTION_ORDERS_ROW.PRODUCTION_ORDER_ID AND
			ORDERS_SHIP.SHIP_ID=INVOICE_SHIPS.SHIP_ID AND
			INVOICE_SHIPS.INVOICE_ID = INVOICE.INVOICE_ID AND
			ORDERS_SHIP.PERIOD_ID=#attributes.period_id# AND
			INVOICE_SHIPS.SHIP_PERIOD_ID=#attributes.period_id# AND
			SHIP_RESULT_ROW.SHIP_ID=INVOICE_SHIPS.SHIP_ID AND
			SHIP_RESULT.SHIP_RESULT_ID=SHIP_RESULT_ROW.SHIP_RESULT_ID AND
			ISNULL(SHIP_RESULT.IS_TYPE,0)<>2 AND
			PRODUCTION_ORDER_RESULTS.IS_STOCK_FIS = 0
	-------------
	UNION
		--siparişin irasliyesi YOK FATURA YOK SEVKİYAT(İRSALİYEDEN) YOK ÜRETİM EMRİ VAR SONUÇTA VAR stok fıs var
		SELECT 
			ORDERS.ORDER_ID,
			0 SHIP_ID,
			0 INVOICE,
			0 SHIP_RESULT_ID,
			PRODUCTION_ORDERS_ROW.PRODUCTION_ORDER_ID P_ORDER_ID,
			PRODUCTION_ORDER_RESULTS.PR_ORDER_ID,
			STOCK_FIS.FIS_ID
		FROM
			#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDERS,
			#attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS_ROW PRODUCTION_ORDERS_ROW,
			#attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS PRODUCTION_ORDER_RESULTS,
			STOCK_FIS
		WHERE
			ORDERS.ORDER_ID = PRODUCTION_ORDERS_ROW.ORDER_ID AND
			PRODUCTION_ORDER_RESULTS.P_ORDER_ID=PRODUCTION_ORDERS_ROW.PRODUCTION_ORDER_ID AND
			ORDERS.ORDER_ID NOT IN (SELECT ORDER_ID FROM #attributes.dsn#_#get_period.our_company_id#.ORDERS_INVOICE WHERE PERIOD_ID=#attributes.period_id#) AND
			ORDERS.ORDER_ID NOT IN (SELECT ORDER_ID FROM #attributes.dsn#_#get_period.our_company_id#.ORDERS_SHIP WHERE PERIOD_ID=#attributes.period_id#) AND
			PRODUCTION_ORDER_RESULTS.IS_STOCK_FIS = 1 AND
			STOCK_FIS.PROD_ORDER_RESULT_NUMBER = PRODUCTION_ORDER_RESULTS.PR_ORDER_ID
	
	UNION
		--siparişin irasliyesi var FATURA YOK SEVKİYAT(İRSALİYEDEN) YOK ÜRETİM EMRİ VAR üretim sonucu var STOK FIS VAR
		SELECT 
			ORDERS_SHIP.ORDER_ID,
			ORDERS_SHIP.SHIP_ID,
			0 INVOICE,
			0 SHIP_RESULT_ID,
			PRODUCTION_ORDERS_ROW.PRODUCTION_ORDER_ID P_ORDER_ID,
			PRODUCTION_ORDER_RESULTS.PR_ORDER_ID,
			STOCK_FIS.FIS_ID
		FROM
			#attributes.dsn#_#get_period.our_company_id#.ORDERS_SHIP ORDERS_SHIP,
			#attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS_ROW PRODUCTION_ORDERS_ROW,
			#attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS PRODUCTION_ORDER_RESULTS,
			STOCK_FIS STOCK_FIS
		WHERE
			ORDERS_SHIP.ORDER_ID = PRODUCTION_ORDERS_ROW.ORDER_ID AND
			PRODUCTION_ORDER_RESULTS.P_ORDER_ID=PRODUCTION_ORDERS_ROW.PRODUCTION_ORDER_ID AND
			ORDERS_SHIP.PERIOD_ID=#attributes.period_id# AND
			ORDERS_SHIP.ORDER_ID NOT IN (SELECT ORDER_ID FROM #attributes.dsn#_#get_period.our_company_id#.ORDERS_INVOICE WHERE PERIOD_ID=#attributes.period_id#) AND
			ORDERS_SHIP.SHIP_ID NOT IN (SELECT SHIP_ID FROM INVOICE_SHIPS WHERE SHIP_PERIOD_ID=#attributes.period_id#) AND
			ORDERS_SHIP.SHIP_ID NOT IN (
							SELECT ISNULL(SHIP_RESULT_ROW.SHIP_ID,0) 
							FROM 
								SHIP_RESULT_ROW,
								SHIP_RESULT
							WHERE
								SHIP_RESULT.SHIP_RESULT_ID=SHIP_RESULT_ROW.SHIP_RESULT_ID AND
								ISNULL(SHIP_RESULT.IS_TYPE,0)<>2
							)
			AND PRODUCTION_ORDER_RESULTS.IS_STOCK_FIS = 1 AND
			STOCK_FIS.PROD_ORDER_RESULT_NUMBER = PRODUCTION_ORDER_RESULTS.PR_ORDER_ID
	UNION 
		--sipariş irsaliyede faturada var SEVKİYAT YOK ÜRETİM EMRİ VAR üretim sonucu var STOK FIS VAR
		SELECT
			ORDERS_SHIP.ORDER_ID,
			ORDERS_SHIP.SHIP_ID,
			INVOICE_SHIPS.INVOICE_ID,
			0 SHIP_RESULT_ID,
			PRODUCTION_ORDERS_ROW.PRODUCTION_ORDER_ID P_ORDER_ID,
			PRODUCTION_ORDER_RESULTS.PR_ORDER_ID,
			STOCK_FIS.FIS_ID
		FROM
			#attributes.dsn#_#get_period.our_company_id#.ORDERS_SHIP ORDERS_SHIP,
			INVOICE INVOICE,
			INVOICE_SHIPS INVOICE_SHIPS,
			#attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS_ROW PRODUCTION_ORDERS_ROW,
			#attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS PRODUCTION_ORDER_RESULTS,
			STOCK_FIS STOCK_FIS
		WHERE
			ORDERS_SHIP.ORDER_ID = PRODUCTION_ORDERS_ROW.ORDER_ID AND
			PRODUCTION_ORDER_RESULTS.P_ORDER_ID=PRODUCTION_ORDERS_ROW.PRODUCTION_ORDER_ID AND
			ORDERS_SHIP.SHIP_ID=INVOICE_SHIPS.SHIP_ID AND
			INVOICE_SHIPS.INVOICE_ID = INVOICE.INVOICE_ID AND
			ORDERS_SHIP.PERIOD_ID=#attributes.period_id# AND
			INVOICE_SHIPS.SHIP_PERIOD_ID=#attributes.period_id# AND
			INVOICE_SHIPS.SHIP_ID NOT IN (SELECT ISNULL(SHIP_RESULT_ROW.SHIP_ID,0) 
							FROM 
								SHIP_RESULT_ROW,
								SHIP_RESULT
							WHERE
								SHIP_RESULT.SHIP_RESULT_ID=SHIP_RESULT_ROW.SHIP_RESULT_ID AND
								ISNULL(SHIP_RESULT.IS_TYPE,0)<>2
							)
			AND PRODUCTION_ORDER_RESULTS.IS_STOCK_FIS = 1 AND
			STOCK_FIS.PROD_ORDER_RESULT_NUMBER = PRODUCTION_ORDER_RESULTS.PR_ORDER_ID
	UNION 
		--sipariş irsaliyede faturada var SEVKİYAT VAR ÜRETİM EMRİ VAR üretim sonucu var
		SELECT 
			ORDERS_SHIP.ORDER_ID,
			ORDERS_SHIP.SHIP_ID,
			INVOICE_SHIPS.INVOICE_ID,
			SHIP_RESULT.SHIP_RESULT_ID SHIP_RESULT_ID,
			PRODUCTION_ORDERS_ROW.PRODUCTION_ORDER_ID P_ORDER_ID,
			PRODUCTION_ORDER_RESULTS.PR_ORDER_ID,
			STOCK_FIS.FIS_ID
		FROM
			#attributes.dsn#_#get_period.our_company_id#.ORDERS_SHIP ORDERS_SHIP,
			#attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS_ROW PRODUCTION_ORDERS_ROW,
			INVOICE,
			INVOICE_SHIPS,
			SHIP_RESULT_ROW,
			SHIP_RESULT,
			#attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS PRODUCTION_ORDER_RESULTS,
			STOCK_FIS
		WHERE
			ORDERS_SHIP.ORDER_ID = PRODUCTION_ORDERS_ROW.ORDER_ID AND
			PRODUCTION_ORDER_RESULTS.P_ORDER_ID=PRODUCTION_ORDERS_ROW.PRODUCTION_ORDER_ID AND
			ORDERS_SHIP.SHIP_ID=INVOICE_SHIPS.SHIP_ID AND
			INVOICE_SHIPS.INVOICE_ID = INVOICE.INVOICE_ID AND
			ORDERS_SHIP.PERIOD_ID=#attributes.period_id# AND
			INVOICE_SHIPS.SHIP_PERIOD_ID=#attributes.period_id# AND
			SHIP_RESULT_ROW.SHIP_ID=INVOICE_SHIPS.SHIP_ID AND
			SHIP_RESULT.SHIP_RESULT_ID=SHIP_RESULT_ROW.SHIP_RESULT_ID AND
			ISNULL(SHIP_RESULT.IS_TYPE,0)<>2 AND
			PRODUCTION_ORDER_RESULTS.IS_STOCK_FIS = 1 AND
			STOCK_FIS.PROD_ORDER_RESULT_NUMBER = PRODUCTION_ORDER_RESULTS.PR_ORDER_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_RELATION_PAPERS] AS
			SELECT 
				OPP_ID,
				OFFER_ID,
				ORDER_ID,
				0 SHIP_ID,
				0 INVOICE,
				0 SHIP_RESULT_ID,
				0 P_ORDER_ID,
				0 PR_ORDER_ID,
				0 FIS_ID
			FROM
				GET_RELATION_PAPERS_1
			WHERE
				ORDER_ID = 0 OR ORDER_ID NOT IN (SELECT ORDER_ID FROM #attributes.dsn#_#get_period.our_company_id#.ORDERS_SHIP WHERE PERIOD_ID=2)
		UNION
			SELECT 
				0 OPP_ID,
				0 OFFER_ID,
				ORDER_ID ORDER_ID,
				SHIP_ID,
				INVOICE,
				SHIP_RESULT_ID,
				P_ORDER_ID,
				PR_ORDER_ID,
				FIS_ID
			FROM
				GET_RELATION_PAPERS_2
		UNION 
			SELECT 
				GET_RELATION_PAPERS_1.OPP_ID,
				GET_RELATION_PAPERS_1.OFFER_ID,
				GET_RELATION_PAPERS_1.ORDER_ID,
				GET_RELATION_PAPERS_2.SHIP_ID,
				GET_RELATION_PAPERS_2.INVOICE,
				GET_RELATION_PAPERS_2.SHIP_RESULT_ID,
				GET_RELATION_PAPERS_2.P_ORDER_ID,
				GET_RELATION_PAPERS_2.PR_ORDER_ID,
				GET_RELATION_PAPERS_2.FIS_ID
			FROM
				GET_RELATION_PAPERS_1,
				GET_RELATION_PAPERS_2
			WHERE
				GET_RELATION_PAPERS_1.ORDER_ID > 0 AND
				GET_RELATION_PAPERS_2.ORDER_ID > 0 AND 
				GET_RELATION_PAPERS_1.ORDER_ID = GET_RELATION_PAPERS_2.ORDER_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_ALL_STOCKS_ROW_COST_LOCATION] AS
			SELECT 
				PRODUCT_ID,
				STOCK_ID,
				SPECT_VAR_ID,
                LOT_NO,
				ISNULL((SELECT
					TOP 1 (PURCHASE_NET_SYSTEM_LOCATION + PURCHASE_EXTRA_COST_SYSTEM_LOCATION)  
				FROM 
					GET_PRODUCT_COST_PERIOD
				WHERE
					GET_PRODUCT_COST_PERIOD.START_DATE <= STOCKS_ROW.PROCESS_DATE
					AND GET_PRODUCT_COST_PERIOD.PRODUCT_ID = STOCKS_ROW.PRODUCT_ID
					AND ISNULL(GET_PRODUCT_COST_PERIOD.SPECT_MAIN_ID,0)=ISNULL(STOCKS_ROW.SPECT_VAR_ID,0)
					AND GET_PRODUCT_COST_PERIOD.DEPARTMENT_ID=STOCKS_ROW.STORE
				ORDER BY
					GET_PRODUCT_COST_PERIOD.START_DATE DESC,
					GET_PRODUCT_COST_PERIOD.RECORD_DATE DESC,
					GET_PRODUCT_COST_PERIOD.PRODUCT_COST_ID DESC
					),0) AS NET_MALIYET,
				ISNULL((SELECT
					TOP 1 (PURCHASE_NET_SYSTEM_2_LOCATION + PURCHASE_EXTRA_COST_SYSTEM_2_LOCATION)  
				FROM 
					GET_PRODUCT_COST_PERIOD
				WHERE
					GET_PRODUCT_COST_PERIOD.START_DATE <= STOCKS_ROW.PROCESS_DATE
					AND GET_PRODUCT_COST_PERIOD.PRODUCT_ID = STOCKS_ROW.PRODUCT_ID
					AND ISNULL(GET_PRODUCT_COST_PERIOD.SPECT_MAIN_ID,0)=ISNULL(STOCKS_ROW.SPECT_VAR_ID,0)
					AND GET_PRODUCT_COST_PERIOD.DEPARTMENT_ID=STOCKS_ROW.STORE
				ORDER BY 
					GET_PRODUCT_COST_PERIOD.START_DATE DESC,
					GET_PRODUCT_COST_PERIOD.RECORD_DATE DESC,
					GET_PRODUCT_COST_PERIOD.PRODUCT_COST_ID DESC
					),0) AS NET_MALIYET_2,
				STOCK_IN,
				STOCK_OUT,
				UPD_ID,
				PROCESS_DATE,
				PROCESS_TYPE,
				STORE,
				STORE_LOCATION
			FROM 
				STOCKS_ROW

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCKS_ROW_COST_LOCATION] AS
		SELECT 
			(SUM(NET_MALIYET)/COUNT(PRODUCT_ID))  AS MALIYET,
			(SUM(NET_MALIYET_2)/COUNT(PRODUCT_ID))  AS MALIYET_2,
			SUM(STOCK_IN)  AS STOCK_IN,
			SUM(STOCK_OUT)  AS STOCK_OUT,
			UPD_ID,
			PROCESS_DATE,
			PROCESS_TYPE,
			STORE,
			STORE_LOCATION,
			PRODUCT_ID,
			STOCK_ID
		FROM
			GET_ALL_STOCKS_ROW_COST_LOCATION
		GROUP BY
			UPD_ID,
			PROCESS_DATE,
			PROCESS_TYPE,
			STORE,
			STORE_LOCATION,
			PRODUCT_ID,
			STOCK_ID

</cfquery>

<cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 
	
CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCKS_ROW_COST_SPECT] AS
		SELECT 
			(SUM(NET_MALIYET)/COUNT(PRODUCT_ID))  AS MALIYET,
			(SUM(NET_MALIYET_2)/COUNT(PRODUCT_ID))  AS MALIYET_2,
			SUM(STOCK_IN)  AS STOCK_IN,
			SUM(STOCK_OUT)  AS STOCK_OUT,
			UPD_ID,
			PROCESS_DATE,
			PROCESS_TYPE,
			STORE,
			STORE_LOCATION,
			PRODUCT_ID,
			STOCK_ID,
			SPECT_VAR_ID
		FROM
			GET_ALL_STOCKS_ROW_COST
		GROUP BY
			UPD_ID,
			PROCESS_DATE,
			PROCESS_TYPE,
			STORE,
			STORE_LOCATION,
			PRODUCT_ID,
			STOCK_ID,
			SPECT_VAR_ID

</cfquery>

<cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCKS_ROW_COST_LOT] AS
		SELECT 
			(SUM(NET_MALIYET)/COUNT(PRODUCT_ID))  AS MALIYET,
			(SUM(NET_MALIYET_2)/COUNT(PRODUCT_ID))  AS MALIYET_2,
			SUM(STOCK_IN)  AS STOCK_IN,
			SUM(STOCK_OUT)  AS STOCK_OUT,
			UPD_ID,
			PROCESS_DATE,
			PROCESS_TYPE,
			STORE,
			STORE_LOCATION,
			PRODUCT_ID,
			STOCK_ID,
			LOT_NO
		FROM
			GET_ALL_STOCKS_ROW_COST
		GROUP BY
			UPD_ID,
			PROCESS_DATE,
			PROCESS_TYPE,
			STORE,
			STORE_LOCATION,
			PRODUCT_ID,
			STOCK_ID,
			LOT_NO

</cfquery>

<cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCKS_ROW_COST_SPECT_LOCATION] AS
		SELECT 
			(SUM(NET_MALIYET)/COUNT(PRODUCT_ID))  AS MALIYET,
			(SUM(NET_MALIYET_2)/COUNT(PRODUCT_ID))  AS MALIYET_2,
			SUM(STOCK_IN)  AS STOCK_IN,
			SUM(STOCK_OUT)  AS STOCK_OUT,
			UPD_ID,
			PROCESS_DATE,
			PROCESS_TYPE,
			STORE,
			STORE_LOCATION,
			PRODUCT_ID,
			STOCK_ID,
			SPECT_VAR_ID
		FROM
			GET_ALL_STOCKS_ROW_COST_LOCATION
		GROUP BY
			UPD_ID,
			PROCESS_DATE,
			PROCESS_TYPE,
			STORE,
			STORE_LOCATION,
			PRODUCT_ID,
			STOCK_ID,
			SPECT_VAR_ID

</cfquery>

<cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCKS_ROW_COST_LOT_LOCATION] AS
		SELECT 
			(SUM(NET_MALIYET)/COUNT(PRODUCT_ID))  AS MALIYET,
			(SUM(NET_MALIYET_2)/COUNT(PRODUCT_ID))  AS MALIYET_2,
			SUM(STOCK_IN)  AS STOCK_IN,
			SUM(STOCK_OUT)  AS STOCK_OUT,
			UPD_ID,
			PROCESS_DATE,
			PROCESS_TYPE,
			STORE,
			STORE_LOCATION,
			PRODUCT_ID,
			STOCK_ID,
			LOT_NO
		FROM
			GET_ALL_STOCKS_ROW_COST_LOCATION
		GROUP BY
			UPD_ID,
			PROCESS_DATE,
			PROCESS_TYPE,
			STORE,
			STORE_LOCATION,
			PRODUCT_ID,
			STOCK_ID,
			LOT_NO
</cfquery>


<cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ROWS_TOPLAM] AS
        SELECT
            CASE WHEN C.TO_CMP_ID IS NOT NULL THEN  SUM(C.ACTION_VALUE) ELSE 0 END AS BORC,
            CASE WHEN C.TO_CMP_ID IS NOT NULL THEN SUM(C.ACTION_VALUE_2) ELSE 0 END AS BORC2,		
            CASE WHEN C.FROM_CMP_ID IS NOT NULL THEN SUM(C.ACTION_VALUE) ELSE 0 END AS ALACAK,
            CASE WHEN C.FROM_CMP_ID IS NOT NULL THEN SUM(C.ACTION_VALUE_2) ELSE 0  END AS ALACAK2,
            CASE WHEN C.FROM_CMP_ID IS NOT NULL THEN SUM(ISNULL(OTHER_CASH_ACT_VALUE,0)) ELSE 0  END AS ALACAK3,				
            CASE WHEN C.TO_CMP_ID IS NOT NULL THEN C.TO_CMP_ID ELSE C.FROM_CMP_ID  END AS COMPANY_ID,
            CASE WHEN C.TO_CMP_ID IS NOT NULL THEN SUM(ISNULL(OTHER_CASH_ACT_VALUE,0)) ELSE 0 END AS BORC3,
            OTHER_MONEY,
            CASE WHEN DATEDIFF(day,ACTION_DATE,ISNULL(DUE_DATE,ACTION_DATE)) = 0 THEN 1 ELSE  DATEDIFF(day,ACTION_DATE,ISNULL(DUE_DATE,ACTION_DATE)) END AS DATE_DIFF,
            CASE WHEN DATEDIFF(day,ISNULL(DUE_DATE,ACTION_DATE),GETDATE()) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(DUE_DATE,ACTION_DATE),GETDATE()) END AS DUE_DATE_DIFF,
            ACTION_DATE,
            DUE_DATE,
            PROJECT_ID,
            SUBSCRIPTION_ID,
            ACC_TYPE_ID,
            ACTION_TYPE_ID,
            ISNULL(TO_BRANCH_ID,FROM_BRANCH_ID) BRANCH_ID,
            C.FROM_CMP_ID,
            C.TO_CMP_ID
        FROM
            CARI_ROWS C
        WHERE
            C.TO_CMP_ID IS NOT NULL OR C.FROM_CMP_ID IS NOT NULL
        GROUP BY
            C.FROM_CMP_ID,
            C.TO_CMP_ID,
            OTHER_MONEY,
            ACTION_DATE,
            DUE_DATE,
            PROJECT_ID,
            SUBSCRIPTION_ID,
            ACC_TYPE_ID,
            ACTION_TYPE_ID,
            ISNULL(TO_BRANCH_ID,FROM_BRANCH_ID)

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[COMPANY_REMAINDER_BRANCH] AS
			SELECT
				COMPANY_ID, 
				BRANCH_ID,
				ROUND(SUM(BORC-ALACAK),5) AS BAKIYE, 
				ROUND(SUM(BORC2-ALACAK2),5) AS BAKIYE2, 
				SUM(BORC) AS BORC,
				SUM(BORC2) AS BORC2,
				SUM(ALACAK) AS ALACAK,
				SUM(ALACAK2) AS ALACAK2,
				CASE WHEN SUM(BORC)= 0 THEN SUM((BORC*DATE_DIFF)) ELSE ROUND((SUM((BORC*DATE_DIFF))/SUM(BORC)),0) END AS VADE_BORC,
				CASE WHEN SUM(ALACAK)= 0 THEN SUM((ALACAK*DATE_DIFF)) ELSE ROUND((SUM((ALACAK*DATE_DIFF))/SUM(ALACAK)),0) END AS VADE_ALACAK,
				CASE WHEN SUM(BORC)= 0 THEN SUM((BORC*DUE_DATE_DIFF)) ELSE ROUND((SUM((BORC*DUE_DATE_DIFF))/SUM(BORC)),0) END AS VADE_BORC_NEW,
				CASE WHEN SUM(ALACAK)= 0 THEN SUM((ALACAK*DUE_DATE_DIFF)) ELSE ROUND((SUM((ALACAK*DUE_DATE_DIFF))/SUM(ALACAK)),0) END AS VADE_ALACAK_NEW
			FROM
				CARI_ROWS_TOPLAM
			GROUP BY
				COMPANY_ID,
				BRANCH_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[COMPANY_REMAINDER_MONEY_BRANCH] AS
			SELECT
				COMPANY_ID, 
				BRANCH_ID,
				SUM(BORC-ALACAK) AS BAKIYE, 
				SUM(BORC2-ALACAK2) AS BAKIYE2,
				SUM(BORC3-ALACAK3) AS BAKIYE3,
				SUM(BORC) AS BORC,
				SUM(BORC2) AS BORC2,
				SUM(BORC3) AS BORC3,
				SUM(ALACAK) AS ALACAK,
				SUM(ALACAK2) AS ALACAK2,
				SUM(ALACAK3) AS ALACAK3,
				OTHER_MONEY,
				CASE WHEN SUM(BORC3)= 0 THEN SUM((BORC3*DATE_DIFF)) ELSE ROUND((SUM((BORC3*DATE_DIFF))/SUM(BORC3)),0) END AS VADE_BORC3,
				CASE WHEN SUM(ALACAK3)= 0 THEN SUM((ALACAK3*DATE_DIFF)) ELSE ROUND((SUM((ALACAK3*DATE_DIFF))/SUM(ALACAK3)),0) END AS VADE_ALACAK3,
				CASE WHEN SUM(BORC3)= 0 THEN SUM((BORC3*DUE_DATE_DIFF)) ELSE ROUND((SUM((BORC3*DUE_DATE_DIFF))/SUM(BORC3)),0) END AS VADE_BORC_NEW3,
				CASE WHEN SUM(ALACAK3)= 0 THEN SUM((ALACAK3*DUE_DATE_DIFF)) ELSE ROUND((SUM((ALACAK3*DUE_DATE_DIFF))/SUM(ALACAK3)),0) END AS VADE_ALACAK_NEW3
			FROM
				CARI_ROWS_TOPLAM
			GROUP BY
				COMPANY_ID,
				BRANCH_ID,
				OTHER_MONEY

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[COMPANY_REMAINDER_MONEY_PROJECT_BRANCH] AS
			SELECT     
				COMPANY_ID, 
				PROJECT_ID,
				OTHER_MONEY,
				BRANCH_ID,
				SUM(BORC-ALACAK) AS BAKIYE, 
				SUM(BORC2-ALACAK2) AS BAKIYE2,
				SUM(BORC3-ALACAK3) AS BAKIYE3,
				SUM(BORC) AS BORC,
				SUM(BORC2) AS BORC2,
				SUM(BORC3) AS BORC3,
				SUM(ALACAK) AS ALACAK,
				SUM(ALACAK2) AS ALACAK2,
				SUM(ALACAK3) AS ALACAK3,
				CASE WHEN SUM(BORC3)= 0 THEN SUM((BORC3*DATE_DIFF)) ELSE ROUND((SUM((BORC3*DATE_DIFF))/SUM(BORC3)),0) END AS VADE_BORC3,
				CASE WHEN SUM(ALACAK3)= 0 THEN SUM((ALACAK3*DATE_DIFF)) ELSE ROUND((SUM((ALACAK3*DATE_DIFF))/SUM(ALACAK3)),0) END AS VADE_ALACAK3
			FROM         
				CARI_ROWS_TOPLAM
			GROUP BY 
				COMPANY_ID, 	
				OTHER_MONEY,
				PROJECT_ID,
				BRANCH_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[COMPANY_REMAINDER_PROJECT_BRANCH] AS
			SELECT     
				COMPANY_ID, 
				PROJECT_ID,
				BRANCH_ID,
				ROUND(SUM(BORC-ALACAK),5) AS BAKIYE, 
				ROUND(SUM(BORC2-ALACAK2),5) AS BAKIYE2, 
				SUM(BORC) AS BORC,
				SUM(BORC2) AS BORC2,
				SUM(ALACAK) AS ALACAK,
				SUM(ALACAK2) AS ALACAK2,
				CASE WHEN SUM(BORC)= 0 THEN SUM((BORC*DATE_DIFF)) ELSE ROUND((SUM((BORC*DATE_DIFF))/SUM(BORC)),0) END AS VADE_BORC,
				CASE WHEN SUM(ALACAK)= 0 THEN SUM((ALACAK*DATE_DIFF)) ELSE ROUND((SUM((ALACAK*DATE_DIFF))/SUM(ALACAK)),0) END AS VADE_ALACAK
			FROM         
				CARI_ROWS_TOPLAM
			GROUP BY 
				COMPANY_ID, 
				PROJECT_ID,
				BRANCH_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ROWS_CONSUMER] AS
		SELECT
			CASE WHEN C.TO_CONSUMER_ID IS NOT NULL  THEN SUM(C.ACTION_VALUE) ELSE 0 END AS BORC,
			CASE WHEN C.TO_CONSUMER_ID IS NOT NULL  THEN SUM(C.ACTION_VALUE_2) ELSE 0 END AS BORC2,	
			CASE WHEN C.TO_CONSUMER_ID IS NOT NULL  THEN SUM(ISNULL(OTHER_CASH_ACT_VALUE,0)) ELSE 0 END AS BORC3,	
			CASE WHEN C.FROM_CONSUMER_ID IS NOT NULL THEN SUM(C.ACTION_VALUE) ELSE 0 END AS ALACAK,
			CASE WHEN C.FROM_CONSUMER_ID IS NOT NULL THEN SUM(C.ACTION_VALUE_2) ELSE 0 END AS ALACAK2,
			CASE WHEN C.FROM_CONSUMER_ID IS NOT NULL THEN SUM(ISNULL(OTHER_CASH_ACT_VALUE,0)) ELSE 0 END AS ALACAK3,
			CASE WHEN C.TO_CONSUMER_ID IS NOT NULL THEN C.TO_CONSUMER_ID ELSE C.FROM_CONSUMER_ID END AS CONSUMER_ID,
			OTHER_MONEY,
			CASE WHEN DATEDIFF(day,ACTION_DATE,ISNULL(DUE_DATE,ACTION_DATE)) = 0 THEN 1 ELSE  DATEDIFF(day,ACTION_DATE,ISNULL(DUE_DATE,ACTION_DATE)) END AS DATE_DIFF,
			CASE WHEN DATEDIFF(day,ISNULL(DUE_DATE,ACTION_DATE),GETDATE()) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(DUE_DATE,ACTION_DATE),GETDATE()) END AS DUE_DATE_DIFF,
			PROJECT_ID,
            SUBSCRIPTION_ID,
			ACC_TYPE_ID,
			DUE_DATE,
			ACTION_DATE,
			ACTION_TYPE_ID,
			ISNULL(TO_BRANCH_ID,FROM_BRANCH_ID) BRANCH_ID,
			C.TO_CONSUMER_ID,
			C.FROM_CONSUMER_ID
		FROM
			CARI_ROWS C
		WHERE
			C.TO_CONSUMER_ID IS NOT NULL OR  C.FROM_CONSUMER_ID IS NOT NULL
		GROUP BY
			C.TO_CONSUMER_ID,
			C.FROM_CONSUMER_ID,
			OTHER_MONEY,
			ACTION_DATE,
			DUE_DATE,
			PROJECT_ID,
            SUBSCRIPTION_ID,
			ACC_TYPE_ID,
			ACTION_DATE,
			ACTION_TYPE_ID,
			ISNULL(TO_BRANCH_ID,FROM_BRANCH_ID)

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CONSUMER_REMAINDER_BRANCH] AS
			SELECT
				CONSUMER_ID,
				BRANCH_ID,
				ROUND(SUM(BORC-ALACAK),5) AS BAKIYE, 
				ROUND(SUM(BORC2-ALACAK2),5) AS BAKIYE2,
				ROUND(SUM(BORC),5) AS BORC,
				ROUND(SUM(BORC2),5) AS BORC2,
				ROUND(SUM(ALACAK),5) AS ALACAK,
				ROUND(SUM(ALACAK2),5) AS ALACAK2,
				CASE WHEN SUM(BORC)= 0 THEN SUM((BORC*DATE_DIFF)) ELSE ROUND((SUM((BORC*DATE_DIFF))/SUM(BORC)),0) END AS VADE_BORC,
				CASE WHEN SUM(ALACAK)= 0 THEN SUM((ALACAK*DATE_DIFF)) ELSE ROUND((SUM((ALACAK*DATE_DIFF))/SUM(ALACAK)),0) END AS VADE_ALACAK,	
				CASE WHEN SUM(BORC)= 0 THEN SUM((BORC*DUE_DATE_DIFF)) ELSE ROUND((SUM((BORC*DUE_DATE_DIFF))/SUM(BORC)),0) END AS VADE_BORC_NEW,
				CASE WHEN SUM(ALACAK)= 0 THEN SUM((ALACAK*DUE_DATE_DIFF)) ELSE ROUND((SUM((ALACAK*DUE_DATE_DIFF))/SUM(ALACAK)),0) END AS VADE_ALACAK_NEW
			FROM
				CARI_ROWS_CONSUMER
			GROUP BY
				CONSUMER_ID,
				BRANCH_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_ACCOUNT_REMAINDER] AS
        SELECT
            CASE WHEN BA=1 THEN SUM(ACCOUNT_CARD_ROWS.AMOUNT) ELSE 0 END AS ALACAK,
            CASE WHEN BA=1 THEN SUM(ISNULL(ACCOUNT_CARD_ROWS.AMOUNT_2,0)) ELSE 0 END AS ALACAK_2,
            CASE WHEN BA=0 THEN SUM(ACCOUNT_CARD_ROWS.AMOUNT) ELSE 0 END AS BORC, 
            CASE WHEN BA=0 THEN SUM(ISNULL(ACCOUNT_CARD_ROWS.AMOUNT_2,0)) ELSE 0 END AS BORC_2,
            ACCOUNT_CARD_ROWS.ACCOUNT_ID,
            ACCOUNT_CARD.ACTION_DATE,
            ACCOUNT_CARD.CARD_TYPE,
            ACCOUNT_CARD.CARD_CAT_ID
        FROM
            ACCOUNT_CARD_ROWS,
            ACCOUNT_CARD
        WHERE
             ACCOUNT_CARD.CARD_ID = ACCOUNT_CARD_ROWS.CARD_ID 
        GROUP BY
            ACCOUNT_CARD_ROWS.ACCOUNT_ID,
            ACCOUNT_CARD.ACTION_DATE,
            ACCOUNT_CARD.CARD_TYPE,
            ACCOUNT_CARD.CARD_CAT_ID,
            ACCOUNT_CARD_ROWS.BA

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_ACCOUNT_REMAINDER_LAST] AS
			SELECT
				SUM(ACCOUNT_ACCOUNT_REMAINDER.BORC - ACCOUNT_ACCOUNT_REMAINDER.ALACAK) AS BAKIYE, 
				SUM(ACCOUNT_ACCOUNT_REMAINDER.BORC) AS BORC,
				SUM(ACCOUNT_ACCOUNT_REMAINDER.ALACAK) AS ALACAK, 
				SUM(ACCOUNT_ACCOUNT_REMAINDER.BORC_2 - ACCOUNT_ACCOUNT_REMAINDER.ALACAK_2) AS BAKIYE_2, 
				SUM(ACCOUNT_ACCOUNT_REMAINDER.BORC_2) AS BORC_2,
				SUM(ACCOUNT_ACCOUNT_REMAINDER.ALACAK_2) AS ALACAK_2, 
				ACCOUNT_PLAN.ACCOUNT_CODE, 
				ACCOUNT_PLAN.ACCOUNT_NAME,
				ACCOUNT_PLAN.ACCOUNT_ID,
				ACCOUNT_PLAN.IFRS_CODE, 
				ACCOUNT_PLAN.IFRS_NAME,
				ACCOUNT_ACCOUNT_REMAINDER.ACTION_DATE,
				ACCOUNT_ACCOUNT_REMAINDER.CARD_TYPE,
				ACCOUNT_ACCOUNT_REMAINDER.CARD_CAT_ID	
			FROM
				ACCOUNT_PLAN,
				ACCOUNT_ACCOUNT_REMAINDER
			WHERE
				(
					(ACCOUNT_PLAN.SUB_ACCOUNT=1 AND ACCOUNT_ACCOUNT_REMAINDER.ACCOUNT_ID LIKE ACCOUNT_PLAN.ACCOUNT_CODE +'%')
					OR
					(ACCOUNT_PLAN.SUB_ACCOUNT=0 AND ACCOUNT_ACCOUNT_REMAINDER.ACCOUNT_ID = ACCOUNT_PLAN.ACCOUNT_CODE)
				)
			GROUP BY
				ACCOUNT_PLAN.ACCOUNT_CODE, 
				ACCOUNT_PLAN.ACCOUNT_NAME,
				ACCOUNT_PLAN.IFRS_CODE, 
				ACCOUNT_PLAN.IFRS_NAME,
				ACCOUNT_PLAN.ACCOUNT_ID, 
				ACCOUNT_ACCOUNT_REMAINDER.ACTION_DATE,
				ACCOUNT_ACCOUNT_REMAINDER.CARD_TYPE,
				ACCOUNT_ACCOUNT_REMAINDER.CARD_CAT_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CONSUMER_REMAINDER_MONEY_BRANCH] AS
			SELECT
				CONSUMER_ID, 
				BRANCH_ID,
				SUM(BORC-ALACAK) AS BAKIYE, 
				SUM(BORC2-ALACAK2) AS BAKIYE2,
				SUM(BORC3-ALACAK3) AS BAKIYE3,
				SUM(BORC) AS BORC,
				SUM(BORC2) AS BORC2,
				SUM(BORC3) AS BORC3,
				SUM(ALACAK) AS ALACAK,
				SUM(ALACAK2) AS ALACAK2,
				SUM(ALACAK3) AS ALACAK3,
				OTHER_MONEY,
				CASE WHEN SUM(BORC3)= 0 THEN SUM((BORC3*DATE_DIFF)) ELSE ROUND((SUM((BORC3*DATE_DIFF))/SUM(BORC3)),0) END AS VADE_BORC3,
				CASE WHEN SUM(ALACAK3)= 0 THEN SUM((ALACAK3*DATE_DIFF)) ELSE ROUND((SUM((ALACAK3*DATE_DIFF))/SUM(ALACAK3)),0) END AS VADE_ALACAK3,
				CASE WHEN SUM(BORC3)= 0 THEN SUM((BORC3*DUE_DATE_DIFF)) ELSE ROUND((SUM((BORC3*DUE_DATE_DIFF))/SUM(BORC3)),0) END AS VADE_BORC_NEW3,
				CASE WHEN SUM(ALACAK3)= 0 THEN SUM((ALACAK3*DUE_DATE_DIFF)) ELSE ROUND((SUM((ALACAK3*DUE_DATE_DIFF))/SUM(ALACAK3)),0) END AS VADE_ALACAK_NEW3
			FROM
				CARI_ROWS_CONSUMER
			GROUP BY
				CONSUMER_ID,
				BRANCH_ID,
				OTHER_MONEY

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_ACCOUNT_REMAINDER_NOPROCESS] AS
			SELECT
				ACCOUNT_CODE, 
				0 AS ALACAK, 
				0 AS BORC, 
				0 AS BAKIYE,
				0 AS ALACAK_2, 
				0 AS BORC_2, 
				0 AS BAKIYE_2,
				ACCOUNT_NAME, 
				ACCOUNT_ID
			FROM
				ACCOUNT_PLAN
			WHERE
				(ACCOUNT_CODE NOT IN (SELECT ACCOUNT_CODE FROM ACCOUNT_ACCOUNT_REMAINDER_LAST))

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CONSUMER_REMAINDER_MONEY_PROJECT_BRANCH] AS
			SELECT
				CONSUMER_ID, 
				OTHER_MONEY,
				PROJECT_ID,
				BRANCH_ID,		
				SUM(BORC-ALACAK) AS BAKIYE, 
				SUM(BORC2-ALACAK2) AS BAKIYE2,
				SUM(BORC3-ALACAK3) AS BAKIYE3,
				SUM(BORC) AS BORC,
				SUM(BORC2) AS BORC2,
				SUM(BORC3) AS BORC3,
				SUM(ALACAK) AS ALACAK,
				SUM(ALACAK2) AS ALACAK2,
				SUM(ALACAK3) AS ALACAK3,
				CASE WHEN SUM(BORC3)= 0 THEN SUM((BORC3*DATE_DIFF)) ELSE ROUND((SUM((BORC3*DATE_DIFF))/SUM(BORC3)),0) END AS VADE_BORC3,
				CASE WHEN SUM(ALACAK3)= 0 THEN SUM((ALACAK3*DATE_DIFF)) ELSE ROUND((SUM((ALACAK3*DATE_DIFF))/SUM(ALACAK3)),0) END AS VADE_ALACAK3
			FROM
				CARI_ROWS_CONSUMER
			GROUP BY
				CONSUMER_ID,
				OTHER_MONEY,
				PROJECT_ID,
				BRANCH_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CONSUMER_REMAINDER_PROJECT_BRANCH] AS
			SELECT
				CONSUMER_ID, 
				PROJECT_ID,
				BRANCH_ID,
				ROUND(SUM(BORC-ALACAK),5) AS BAKIYE, 
				ROUND(SUM(BORC2-ALACAK2),5) AS BAKIYE2,
				ROUND(SUM(BORC),5) AS BORC,
				ROUND(SUM(BORC2),5) AS BORC2,
				ROUND(SUM(ALACAK),5) AS ALACAK,
				ROUND(SUM(ALACAK2),5) AS ALACAK2,
				CASE WHEN SUM(BORC)= 0 THEN SUM((BORC*DATE_DIFF)) ELSE ROUND((SUM((BORC*DATE_DIFF))/SUM(BORC)),0) END AS VADE_BORC,
				CASE WHEN SUM(ALACAK)= 0 THEN SUM((ALACAK*DATE_DIFF)) ELSE ROUND((SUM((ALACAK*DATE_DIFF))/SUM(ALACAK)),0) END AS VADE_ALACAK	
			FROM
				CARI_ROWS_CONSUMER
			GROUP BY
				CONSUMER_ID,
				PROJECT_ID,
				BRANCH_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_ACCOUNT_REMAINDER_TOTAL] AS
			SELECT
				ACCOUNT_CODE, 
				SUM(BAKIYE) AS BAKIYE,
				SUM(ALACAK) AS ALACAK,
				SUM(BORC) AS BORC,
				SUM(BAKIYE_2) AS BAKIYE_2,
				SUM(ALACAK_2) AS ALACAK_2,
				SUM(BORC_2) AS BORC_2,
				ACCOUNT_NAME,
				ACCOUNT_ID
			FROM
				ACCOUNT_ACCOUNT_REMAINDER_LAST AR
			GROUP BY
				ACCOUNT_CODE,
				ACCOUNT_NAME,
				ACCOUNT_ID
		UNION
			SELECT
				ACCOUNT_CODE, 
				BAKIYE, 
				ALACAK, 
				BORC,
				BAKIYE_2,
				ALACAK_2,
				BORC_2,
				ACCOUNT_NAME,
				ACCOUNT_ID
			FROM
				ACCOUNT_ACCOUNT_REMAINDER_NOPROCESS AN

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_REMAINDER] AS
		SELECT 
            CASE WHEN ACCOUNTS.ACCOUNT_ID = BANK_ACTIONS.ACTION_FROM_ACCOUNT_ID THEN SUM(BANK_ACTIONS.ACTION_VALUE) ELSE 0 END AS ALACAK,
            CASE WHEN ACCOUNTS.ACCOUNT_ID = BANK_ACTIONS.ACTION_TO_ACCOUNT_ID THEN SUM(BANK_ACTIONS.ACTION_VALUE - ISNULL(BANK_ACTIONS.MASRAF, 0)) ELSE 0 END AS BORC,
			CASE WHEN ACCOUNTS.ACCOUNT_ID = BANK_ACTIONS.ACTION_FROM_ACCOUNT_ID THEN SUM(BANK_ACTIONS.SYSTEM_ACTION_VALUE) ELSE 0 END AS ALACAK_SYSTEM,
            CASE WHEN ACCOUNTS.ACCOUNT_ID = BANK_ACTIONS.ACTION_TO_ACCOUNT_ID THEN SUM(BANK_ACTIONS.SYSTEM_ACTION_VALUE) ELSE 0 END AS BORC_SYSTEM,
            ACCOUNTS.ACCOUNT_ID, 
            ACCOUNTS.ACCOUNT_NAME, 
            ACCOUNTS.ACCOUNT_CURRENCY_ID, 
            MAX(BANK_ACTIONS.ACTION_DATE) AS TARIH
    	FROM 
            BANK_ACTIONS, 
            #attributes.dsn#_#get_period.our_company_id#.ACCOUNTS AS ACCOUNTS
   		 WHERE
            (ACCOUNTS.ACCOUNT_ID = BANK_ACTIONS.ACTION_FROM_ACCOUNT_ID OR ACCOUNTS.ACCOUNT_ID = BANK_ACTIONS.ACTION_TO_ACCOUNT_ID)
    	GROUP BY
            ACCOUNTS.ACCOUNT_ID, 
            ACCOUNTS.ACCOUNT_NAME, 
            ACCOUNTS.ACCOUNT_CURRENCY_ID,	
            BANK_ACTIONS.ACTION_FROM_ACCOUNT_ID,
            BANK_ACTIONS.ACTION_TO_ACCOUNT_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_REMAINDER_LAST] AS
			SELECT
				SUM(BORC - ALACAK) AS BAKIYE, 
				SUM(BORC_SYSTEM - ALACAK_SYSTEM) AS BAKIYE_SYSTEM, 
				SUM(BORC) AS BORC, 
				SUM(ALACAK) AS ALACAK,
				SUM(BORC_SYSTEM) AS BORC_SYSTEM, 
				SUM(ALACAK_SYSTEM) AS ALACAK_SYSTEM,
				MAX(TARIH) AS TARIH, 
				ACCOUNT_ID, 
				ACCOUNT_NAME,
				ACCOUNT_CURRENCY_ID
			FROM
				ACCOUNT_REMAINDER
			GROUP BY
				ACCOUNT_ID,
				ACCOUNT_NAME,
				ACCOUNT_CURRENCY_ID



</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_REMAINDER] AS
		SELECT DISTINCT
			CASE WHEN CASH_ACTIONS.CASH_ACTION_TO_CASH_ID = CASH.CASH_ID THEN   SUM(CASH_ACTIONS.CASH_ACTION_VALUE)ELSE 0 END AS BORC, 
			CASE WHEN CASH_ACTIONS.CASH_ACTION_FROM_CASH_ID = CASH.CASH_ID THEN  SUM(CASH_ACTIONS.CASH_ACTION_VALUE) ELSE 0 END AS ALACAK, 
			CASH.CASH_ID, 
			CASH.CASH_NAME
		FROM
			CASH_ACTIONS, 
			CASH
		WHERE
			CASH_ACTIONS.CASH_ACTION_FROM_CASH_ID = CASH.CASH_ID OR CASH_ACTIONS.CASH_ACTION_TO_CASH_ID = CASH.CASH_ID
		GROUP BY
			CASH.CASH_ID, 
			CASH.CASH_NAME,
			CASH_ACTIONS.CASH_ACTION_TO_CASH_ID,
			CASH_ACTIONS.CASH_ACTION_FROM_CASH_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CASH_REMAINDER_LAST] AS
			SELECT
				SUM(BORC-ALACAK) AS BAKIYE, 
				SUM(BORC) AS BORC, 
				SUM(ALACAK) AS ALACAK, 
				CASH_ID, 
				CASH_NAME
			FROM
				CASH_REMAINDER
			GROUP BY
				CASH_ID, 
				CASH_NAME

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE_IN_CASH] AS
			SELECT
				0 AS ALACAK, 
				SUM(CHEQUE.OTHER_MONEY_VALUE) AS BORC, 
				CASH.CASH_ID, 
				CASH.CASH_NAME
			FROM
				CASH,
				PAYROLL,
				CHEQUE,
				CHEQUE_HISTORY
			WHERE
				CHEQUE.CHEQUE_STATUS_ID = 1 AND
				CASH.CASH_ID = PAYROLL.PAYROLL_CASH_ID AND
				CHEQUE_HISTORY.CHEQUE_ID = CHEQUE.CHEQUE_ID AND
				CHEQUE_HISTORY.PAYROLL_ID = PAYROLL.ACTION_ID AND
				CHEQUE_HISTORY.HISTORY_ID = (SELECT MAX(CH.HISTORY_ID) FROM CHEQUE_HISTORY CH WHERE CH.CHEQUE_ID = CHEQUE.CHEQUE_ID AND CH.STATUS = 1)
			GROUP BY
				CASH.CASH_ID, 
				CASH.CASH_NAME

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE_IN_CASH_TOTAL] AS
			SELECT
				SUM(CIC.BORC-CIC.ALACAK) AS BAKIYE, 
				SUM(CIC.BORC) AS BORC, 
				SUM(CIC.ALACAK) AS ALACAK,
				CIC.CASH_ID,
				CIC.CASH_NAME
			FROM
				CHEQUE_IN_CASH CIC
			GROUP BY
				CIC.CASH_ID,
				CIC.CASH_NAME

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[COMPANY_REMAINDER] AS
			SELECT
				COMPANY_ID, 
				ROUND(SUM(BORC-ALACAK),5) AS BAKIYE, 
				ROUND(SUM(BORC2-ALACAK2),5) AS BAKIYE2, 
				SUM(BORC) AS BORC,
				SUM(BORC2) AS BORC2,
				SUM(ALACAK) AS ALACAK,
				SUM(ALACAK2) AS ALACAK2,
				CASE WHEN SUM(BORC)= 0 THEN SUM((BORC*DATE_DIFF)) ELSE ROUND((SUM((BORC*DATE_DIFF))/SUM(BORC)),0) END AS VADE_BORC,
				CASE WHEN SUM(ALACAK)= 0 THEN SUM((ALACAK*DATE_DIFF)) ELSE ROUND((SUM((ALACAK*DATE_DIFF))/SUM(ALACAK)),0) END AS VADE_ALACAK,
				CASE WHEN SUM(BORC)= 0 THEN SUM((BORC*DUE_DATE_DIFF)) ELSE ROUND((SUM((BORC*DUE_DATE_DIFF))/SUM(BORC)),0) END AS VADE_BORC_NEW,
				CASE WHEN SUM(ALACAK)= 0 THEN SUM((ALACAK*DUE_DATE_DIFF)) ELSE ROUND((SUM((ALACAK*DUE_DATE_DIFF))/SUM(ALACAK)),0) END AS VADE_ALACAK_NEW
			FROM
				CARI_ROWS_TOPLAM
			GROUP BY
				COMPANY_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[COMPANY_REMAINDER_MONEY] AS
			SELECT
				COMPANY_ID, 
				SUM(BORC-ALACAK) AS BAKIYE, 
				SUM(BORC2-ALACAK2) AS BAKIYE2,
				SUM(BORC3-ALACAK3) AS BAKIYE3,
				SUM(BORC) AS BORC,
				SUM(BORC2) AS BORC2,
				SUM(BORC3) AS BORC3,
				SUM(ALACAK) AS ALACAK,
				SUM(ALACAK2) AS ALACAK2,
				SUM(ALACAK3) AS ALACAK3,
				OTHER_MONEY,
				CASE WHEN SUM(BORC3)= 0 THEN SUM((BORC3*DATE_DIFF)) ELSE ROUND((SUM((BORC3*DATE_DIFF))/SUM(BORC3)),0) END AS VADE_BORC3,
				CASE WHEN SUM(ALACAK3)= 0 THEN SUM((ALACAK3*DATE_DIFF)) ELSE ROUND((SUM((ALACAK3*DATE_DIFF))/SUM(ALACAK3)),0) END AS VADE_ALACAK3,
				CASE WHEN SUM(BORC3)= 0 THEN SUM((BORC3*DUE_DATE_DIFF)) ELSE ROUND((SUM((BORC3*DUE_DATE_DIFF))/SUM(BORC3)),0) END AS VADE_BORC_NEW3,
				CASE WHEN SUM(ALACAK3)= 0 THEN SUM((ALACAK3*DUE_DATE_DIFF)) ELSE ROUND((SUM((ALACAK3*DUE_DATE_DIFF))/SUM(ALACAK3)),0) END AS VADE_ALACAK_NEW3
			FROM
				CARI_ROWS_TOPLAM
			GROUP BY
				COMPANY_ID,
				OTHER_MONEY

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[COMPANY_REMAINDER_PROJECT] AS
			SELECT     
				COMPANY_ID, 
				PROJECT_ID,
				ROUND(SUM(BORC-ALACAK),5) AS BAKIYE, 
				ROUND(SUM(BORC2-ALACAK2),5) AS BAKIYE2, 
				SUM(BORC) AS BORC,
				SUM(BORC2) AS BORC2,
				SUM(ALACAK) AS ALACAK,
				SUM(ALACAK2) AS ALACAK2,
				CASE WHEN SUM(BORC)= 0 THEN SUM((BORC*DATE_DIFF)) ELSE ROUND((SUM((BORC*DATE_DIFF))/SUM(BORC)),0) END AS VADE_BORC,
				CASE WHEN SUM(ALACAK)= 0 THEN SUM((ALACAK*DATE_DIFF)) ELSE ROUND((SUM((ALACAK*DATE_DIFF))/SUM(ALACAK)),0) END AS VADE_ALACAK
			FROM         
				CARI_ROWS_TOPLAM
			GROUP BY 
				COMPANY_ID, 
				PROJECT_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[COMPANY_REMAINDER_MONEY_PROJECT] AS
			SELECT     
				COMPANY_ID, 
				PROJECT_ID,
				OTHER_MONEY,
				SUM(BORC-ALACAK) AS BAKIYE, 
				SUM(BORC2-ALACAK2) AS BAKIYE2,
				SUM(BORC3-ALACAK3) AS BAKIYE3,
				SUM(BORC) AS BORC,
				SUM(BORC2) AS BORC2,
				SUM(BORC3) AS BORC3,
				SUM(ALACAK) AS ALACAK,
				SUM(ALACAK2) AS ALACAK2,
				SUM(ALACAK3) AS ALACAK3,
				CASE WHEN SUM(BORC3)= 0 THEN SUM((BORC3*DATE_DIFF)) ELSE ROUND((SUM((BORC3*DATE_DIFF))/SUM(BORC3)),0) END AS VADE_BORC3,
				CASE WHEN SUM(ALACAK3)= 0 THEN SUM((ALACAK3*DATE_DIFF)) ELSE ROUND((SUM((ALACAK3*DATE_DIFF))/SUM(ALACAK3)),0) END AS VADE_ALACAK3
			FROM         
				CARI_ROWS_TOPLAM
			GROUP BY 
				COMPANY_ID, 	
				OTHER_MONEY,
				PROJECT_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_REMAINING_AMOUNT] AS			
			SELECT
				VOUCHER_ID,
				VOUCHER_VALUE-ROUND(SUM((CLOSED_AMOUNT)/(V.OTHER_MONEY_VALUE/V.VOUCHER_VALUE)),4) REMAINING_VALUE,
				OTHER_MONEY_VALUE-SUM(CLOSED_AMOUNT) OTHER_REMAINING_VALUE,
				OTHER_MONEY_VALUE2-ROUND(SUM((CLOSED_AMOUNT)/(V.OTHER_MONEY_VALUE/V.OTHER_MONEY_VALUE2)),4) OTHER_REMAINING_VALUE2
			FROM
				VOUCHER V,
				VOUCHER_CLOSED VC
			WHERE
				V.VOUCHER_ID = VC.ACTION_ID
				AND V.OTHER_MONEY_VALUE2 > 0
			GROUP BY
				VOUCHER_ID,VOUCHER_VALUE,OTHER_MONEY_VALUE,OTHER_MONEY_VALUE2
		UNION
			SELECT
				VOUCHER_ID,
				SUM(VOUCHER_VALUE) REMAINING_VALUE,
				SUM(OTHER_MONEY_VALUE) OTHER_REMAINING_VALUE,
				SUM(OTHER_MONEY_VALUE2) OTHER_REMAINING_VALUE2
			FROM
				VOUCHER V
			WHERE
				VOUCHER_ID NOT IN(SELECT ACTION_ID FROM VOUCHER_CLOSED WHERE ACTION_ID = VOUCHER_ID)
				AND V.OTHER_MONEY_VALUE2 > 0
			GROUP BY
				VOUCHER_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[COMPANY_RISK] AS
		SELECT 
			SUM( Q1.BORC ) AS BORC,
			SUM( Q1.BORC2 ) AS BORC2,
			SUM( Q1.ALACAK ) AS ALACAK,
			SUM( Q1.ALACAK2 ) AS ALACAK2,
			SUM( Q1.BAKIYE ) AS BAKIYE,
			SUM( Q1.BAKIYE2 ) AS BAKIYE2,
			SUM( Q1.VADE_BORC ) AS VADE_BORC,
			SUM( Q1.VADE_ALACAK ) AS VADE_ALACAK,
			SUM( Q1.VADE_BORC_NEW ) AS VADE_BORC_NEW,
			SUM( Q1.VADE_ALACAK_NEW ) AS VADE_ALACAK_NEW,
			SUM( Q1.CEK_ODENMEDI ) AS CEK_ODENMEDI,
			SUM( Q1.CEK_ODENMEDI2 ) AS CEK_ODENMEDI2,
			SUM( Q1.CEK_KARSILIKSIZ ) AS CEK_KARSILIKSIZ,
			SUM( Q1.CEK_KARSILIKSIZ2 ) AS CEK_KARSILIKSIZ2,
			SUM( Q1.SENET_ODENMEDI ) AS SENET_ODENMEDI,
			SUM( Q1.SENET_ODENMEDI2 ) AS SENET_ODENMEDI2,
			SUM( Q1.SENET_KARSILIKSIZ ) AS SENET_KARSILIKSIZ,
			SUM( Q1.SENET_KARSILIKSIZ2) AS SENET_KARSILIKSIZ2,
			SUM( Q1.FORWARD_SALE_LIMIT ) AS FORWARD_SALE_LIMIT,
			SUM( Q1.OPEN_ACCOUNT_RISK_LIMIT ) AS OPEN_ACCOUNT_RISK_LIMIT,
			SUM( Q1.PAYMENT_BLOKAJ ) AS PAYMENT_BLOKAJ,
			SUM( Q1.TOTAL_RISK_LIMIT ) AS TOTAL_RISK_LIMIT,
			SUM( Q1.SECURE_TOTAL_TAKE ) AS SECURE_TOTAL_TAKE,
			SUM( Q1.SECURE_TOTAL_TAKE2 ) AS SECURE_TOTAL_TAKE2,
			SUM( Q1.SECURE_TOTAL_GIVE ) AS SECURE_TOTAL_GIVE,
			SUM( Q1.SECURE_TOTAL_GIVE2 ) AS SECURE_TOTAL_GIVE2,
			Q1.COMPANY_ID
		FROM
			(
			SELECT 
				BORC,
				BORC2,
				ALACAK,
				ALACAK2,
				BAKIYE,
				BAKIYE2,
				VADE_BORC,
				VADE_ALACAK,
				VADE_BORC_NEW,
				VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI2,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ2,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI2,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ2,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS PAYMENT_BLOKAJ,
				0 AS TOTAL_RISK_LIMIT,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE2,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE2,
				COMPANY_ID
			FROM 
				COMPANY_REMAINDER
					
		UNION ALL
			
			SELECT
				0 AS BORC,
				0 AS BORC2,
				0 AS ALACAK,
				0 AS ALACAK2,
				0 AS BAKIYE,
				0 AS BAKIYE2,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				SUM(CHEQUE.OTHER_MONEY_VALUE) AS CEK_ODENMEDI,
				SUM(CHEQUE.OTHER_MONEY_VALUE2) AS CEK_ODENMEDI2,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ2,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI2,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ2,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS PAYMENT_BLOKAJ,
				0 AS TOTAL_RISK_LIMIT,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE2,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE2,
				CHEQUE.COMPANY_ID
			FROM
				CHEQUE
			WHERE
				CHEQUE.CHEQUE_ID IS NOT NULL AND
				CHEQUE.CHEQUE_STATUS_ID IN (1,2,13)
				AND CHEQUE.COMPANY_ID IS NOT NULL 
			GROUP BY
				CHEQUE.COMPANY_ID
		UNION ALL
			
			SELECT
				0 AS BORC,
				0 AS BORC2,
				0 AS ALACAK,
				0 AS ALACAK2,
				0 AS BAKIYE,
				0 AS BAKIYE2,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				SUM(CHEQUE.OTHER_MONEY_VALUE) AS CEK_ODENMEDI,
				SUM(CHEQUE.OTHER_MONEY_VALUE2) AS CEK_ODENMEDI2,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ2,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI2,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ2,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS PAYMENT_BLOKAJ,
				0 AS TOTAL_RISK_LIMIT,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE2,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE2,
				CHEQUE.OWNER_COMPANY_ID COMPANY_ID
			FROM
				CHEQUE
			WHERE
				CHEQUE.CHEQUE_ID IS NOT NULL AND
				CHEQUE.CHEQUE_STATUS_ID = 4 AND
				CHEQUE.CHEQUE_DUEDATE > GETDATE()
				AND CHEQUE.OWNER_COMPANY_ID IS NOT NULL 
			GROUP BY
				CHEQUE.OWNER_COMPANY_ID				
		UNION ALL
				
			SELECT
				0 AS BORC,
				0 AS BORC2,
				0 AS ALACAK,
				0 AS ALACAK2,
				0 AS BAKIYE,
				0 AS BAKIYE2,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI2,
				SUM(CHEQUE.OTHER_MONEY_VALUE) AS CEK_KARSILIKSIZ,
				SUM(CHEQUE.OTHER_MONEY_VALUE2) AS CEK_KARSILIKSIZ2,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI2,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ2,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS PAYMENT_BLOKAJ,
				0 AS TOTAL_RISK_LIMIT,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE2,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE2,
				CHEQUE.COMPANY_ID
			FROM
				CHEQUE
			WHERE
				CHEQUE.CHEQUE_ID IS NOT NULL AND
				CHEQUE.CHEQUE_STATUS_ID = 5 
			GROUP BY
				CHEQUE.COMPANY_ID
					
		UNION ALL
				
			SELECT
				0 AS BORC,
				0 AS BORC2,
				0 AS ALACAK,
				0 AS ALACAK2,
				0 AS BAKIYE,
				0 AS BAKIYE2,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI2,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ2,
				(SELECT OTHER_REMAINING_VALUE FROM VOUCHER_REMAINING_AMOUNT WHERE VOUCHER_ID = V.VOUCHER_ID) AS SENET_ODENMEDI,
				(SELECT OTHER_REMAINING_VALUE2 FROM VOUCHER_REMAINING_AMOUNT WHERE VOUCHER_ID = V.VOUCHER_ID) AS SENET_ODENMEDI2,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ2,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS PAYMENT_BLOKAJ,
				0 AS TOTAL_RISK_LIMIT,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE2,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE2,
				V.COMPANY_ID
			FROM
				VOUCHER V
			WHERE
				V.VOUCHER_ID IS NOT NULL AND
				V.VOUCHER_STATUS_ID IN (1,2,13,11)
				AND V.COMPANY_ID IS NOT NULL 

		UNION ALL
				
			SELECT
				0 AS BORC,
				0 AS BORC2,
				0 AS ALACAK,
				0 AS ALACAK2,
				0 AS BAKIYE,
				0 AS BAKIYE2,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI2,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ2,
				(SELECT OTHER_REMAINING_VALUE FROM VOUCHER_REMAINING_AMOUNT WHERE VOUCHER_ID = V.VOUCHER_ID) AS SENET_ODENMEDI,
				(SELECT OTHER_REMAINING_VALUE2 FROM VOUCHER_REMAINING_AMOUNT WHERE VOUCHER_ID = V.VOUCHER_ID) AS SENET_ODENMEDI2,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ2,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS PAYMENT_BLOKAJ,
				0 AS TOTAL_RISK_LIMIT,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE2,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE2,
				V.OWNER_COMPANY_ID COMPANY_ID
			FROM
				VOUCHER V
			WHERE
				V.VOUCHER_ID IS NOT NULL AND
				V.VOUCHER_STATUS_ID = 4 AND					
				V.VOUCHER_DUEDATE > GETDATE()
				AND V.OWNER_COMPANY_ID IS NOT NULL 

		UNION ALL
			
			SELECT
				0 AS BORC,
				0 AS BORC2,
				0 AS ALACAK,
				0 AS ALACAK2,
				0 AS BAKIYE,
				0 AS BAKIYE2,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI2,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ2,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI2,
				(SELECT OTHER_REMAINING_VALUE FROM VOUCHER_REMAINING_AMOUNT WHERE VOUCHER_ID = V.VOUCHER_ID) AS SENET_KARSILIKSIZ,
				(SELECT OTHER_REMAINING_VALUE2 FROM VOUCHER_REMAINING_AMOUNT WHERE VOUCHER_ID = V.VOUCHER_ID) AS SENET_KARSILIKSIZ2,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS PAYMENT_BLOKAJ,
				0 AS TOTAL_RISK_LIMIT,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE2,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE2,
				V.COMPANY_ID
			FROM
				VOUCHER V
			WHERE
				V.VOUCHER_ID IS NOT NULL AND
				V.VOUCHER_STATUS_ID= 5 
					
		UNION ALL
			
			SELECT 
				0 AS BORC,
				0 AS BORC2,
				0 AS ALACAK,
				0 AS ALACAK2,
				0 AS BAKIYE,
				0 AS BAKIYE2,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI2,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ2,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI2,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ2,
				CC.FORWARD_SALE_LIMIT_OTHER*(SM.RATE2/SM.RATE1) FORWARD_SALE_LIMIT,
				CC.OPEN_ACCOUNT_RISK_LIMIT_OTHER*(SM.RATE2/SM.RATE1) OPEN_ACCOUNT_RISK_LIMIT,
				CC.PAYMENT_BLOKAJ*(SM.RATE2/SM.RATE1) PAYMENT_BLOKAJ,
				CC.TOTAL_RISK_LIMIT_OTHER*(SM.RATE2/SM.RATE1) TOTAL_RISK_LIMIT,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE2,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE2,
				CC.COMPANY_ID
			FROM 
				#attributes.dsn#.COMPANY_CREDIT CC,
				SETUP_MONEY SM
			WHERE
				CC.MONEY = SM.MONEY AND				
				CC.OUR_COMPANY_ID = #get_period.our_company_id# AND
				CC.COMPANY_ID IS NOT NULL	
			
		UNION ALL
		
			SELECT 
				0 AS BORC,
				0 AS BORC2,
				0 AS ALACAK,
				0 AS ALACAK2,
				0 AS BAKIYE,
				0 AS BAKIYE2,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI2,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ2,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI2,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ2,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS PAYMENT_BLOKAJ,
				0 AS TOTAL_RISK_LIMIT,
				SUM(CS.ACTION_VALUE) AS SECURE_TOTAL_TAKE,
				SUM(CS.ACTION_VALUE2) AS SECURE_TOTAL_TAKE2,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE2,
				CS.COMPANY_ID
			FROM 
				#attributes.dsn#.COMPANY_SECUREFUND CS
			WHERE 
				CS.GIVE_TAKE = 0 AND
				CS.FINISH_DATE > GETDATE() AND
				CS.OUR_COMPANY_ID =#get_period.our_company_id# AND
				CS.SECUREFUND_STATUS = 1 AND
                CS.IS_RETURN IS NULL AND --iade edilen teminatlarin risk tutarından dusulmesi gerekir
				CS.COMPANY_ID IS NOT NULL
			GROUP BY
				CS.COMPANY_ID
			
		UNION ALL
		
			SELECT 
				0 AS BORC,
				0 AS BORC2,
				0 AS ALACAK,
				0 AS ALACAK2,
				0 AS BAKIYE,
				0 AS BAKIYE2,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI2,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ2,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI2,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ2,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS PAYMENT_BLOKAJ,
				0 AS TOTAL_RISK_LIMIT,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE2,
				SUM(CS.ACTION_VALUE) AS SECURE_TOTAL_GIVE,
				SUM(CS.ACTION_VALUE2) AS SECURE_TOTAL_GIVE2,
				CS.COMPANY_ID
			FROM 
				#attributes.dsn#.COMPANY_SECUREFUND CS
			WHERE 
				CS.GIVE_TAKE = 1 AND
				CS.FINISH_DATE > GETDATE() AND
				CS.OUR_COMPANY_ID = #get_period.our_company_id# AND
				CS.SECUREFUND_STATUS = 1 AND
                CS.IS_RETURN IS NULL AND --iade edilen teminatlarin risk tutarından dusulmesi gerekir
				CS.COMPANY_ID IS NOT NULL
			GROUP BY
				CS.COMPANY_ID
				) AS Q1
			GROUP BY
				Q1.COMPANY_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[COMPANY_RISK_MONEY] AS
			SELECT 
				SUM( Q1.BORC ) AS BORC,
				SUM( Q1.BORC3 ) AS BORC2,
				SUM( Q1.ALACAK ) AS ALACAK,
				SUM( Q1.ALACAK3 ) AS ALACAK2,
				SUM( Q1.BAKIYE ) AS BAKIYE,
				SUM( Q1.BAKIYE3 ) AS BAKIYE2,
				SUM( Q1.VADE_BORC ) AS VADE_BORC,
				SUM( Q1.VADE_ALACAK ) AS VADE_ALACAK,
				SUM( Q1.VADE_BORC_NEW ) AS VADE_BORC_NEW,
				SUM( Q1.VADE_ALACAK_NEW ) AS VADE_ALACAK_NEW,
				SUM( Q1.CEK_ODENMEDI ) AS CEK_ODENMEDI,
				SUM( Q1.CEK_ODENMEDI3 ) AS CEK_ODENMEDI2,
				SUM( Q1.CEK_KARSILIKSIZ ) AS CEK_KARSILIKSIZ,
				SUM( Q1.CEK_KARSILIKSIZ3 ) AS CEK_KARSILIKSIZ2,
				SUM( Q1.SENET_ODENMEDI ) AS SENET_ODENMEDI,
				SUM( Q1.SENET_ODENMEDI3 ) AS SENET_ODENMEDI2,
				SUM( Q1.SENET_KARSILIKSIZ ) AS SENET_KARSILIKSIZ,
				SUM( Q1.SENET_KARSILIKSIZ3) AS SENET_KARSILIKSIZ2,
				SUM( Q1.FORWARD_SALE_LIMIT ) AS FORWARD_SALE_LIMIT,
				SUM( Q1.OPEN_ACCOUNT_RISK_LIMIT ) AS OPEN_ACCOUNT_RISK_LIMIT,
				SUM( Q1.TOTAL_RISK_LIMIT ) AS TOTAL_RISK_LIMIT,
				SUM( Q1.FORWARD_SALE_LIMIT3 ) AS FORWARD_SALE_LIMIT3,
				SUM( Q1.OPEN_ACCOUNT_RISK_LIMIT3 ) AS OPEN_ACCOUNT_RISK_LIMIT3,
				SUM( Q1.TOTAL_RISK_LIMIT3 ) AS TOTAL_RISK_LIMIT3,
				SUM( Q1.SECURE_TOTAL_TAKE ) AS SECURE_TOTAL_TAKE,
				SUM( Q1.SECURE_TOTAL_TAKE3 ) AS SECURE_TOTAL_TAKE2,
				SUM( Q1.SECURE_TOTAL_GIVE ) AS SECURE_TOTAL_GIVE,
				SUM( Q1.SECURE_TOTAL_GIVE3 ) AS SECURE_TOTAL_GIVE2,
				Q1.COMPANY_ID,
				Q1.OTHER_MONEY
			FROM
				(
				SELECT 
					BORC,
					BORC3,
					ALACAK,
					ALACAK3,
					BAKIYE,
					BAKIYE3,
					VADE_BORC3 VADE_BORC,
					VADE_ALACAK3 VADE_ALACAK,
					VADE_BORC_NEW3 VADE_BORC_NEW,
					VADE_ALACAK_NEW3 VADE_ALACAK_NEW,
					0 AS CEK_ODENMEDI,
					0 AS CEK_ODENMEDI3,
					0 AS CEK_KARSILIKSIZ,
					0 AS CEK_KARSILIKSIZ3,
					0 AS SENET_ODENMEDI,
					0 AS SENET_ODENMEDI3,
					0 AS SENET_KARSILIKSIZ,
					0 AS SENET_KARSILIKSIZ3,
					0 AS FORWARD_SALE_LIMIT,
					0 AS OPEN_ACCOUNT_RISK_LIMIT,
					0 AS TOTAL_RISK_LIMIT,
					0 AS FORWARD_SALE_LIMIT3,
					0 AS OPEN_ACCOUNT_RISK_LIMIT3,
					0 AS TOTAL_RISK_LIMIT3,
					0 AS SECURE_TOTAL_TAKE,
					0 AS SECURE_TOTAL_TAKE3,
					0 AS SECURE_TOTAL_GIVE,
					0 AS SECURE_TOTAL_GIVE3,
					COMPANY_ID,
					OTHER_MONEY
				FROM 
					COMPANY_REMAINDER_MONEY
						
			UNION ALL

			SELECT
				0 AS BORC,
				0 AS BORC3,
				0 AS ALACAK,
				0 AS ALACAK3,
				0 AS BAKIYE,
				0 AS BAKIYE3,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				SUM(CHEQUE.OTHER_MONEY_VALUE) AS CEK_ODENMEDI,
				SUM(ISNULL(CHEQUE.CH_OTHER_MONEY_VALUE,CHEQUE.CHEQUE_VALUE)) AS CEK_ODENMEDI3,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ3,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI3,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ3,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS TOTAL_RISK_LIMIT,
				0 AS FORWARD_SALE_LIMIT3,
				0 AS OPEN_ACCOUNT_RISK_LIMIT3,
				0 AS TOTAL_RISK_LIMIT3,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE3,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE3,
				CHEQUE.COMPANY_ID,
				ISNULL(CHEQUE.CH_OTHER_MONEY,CHEQUE.CURRENCY_ID) OTHER_MONEY
			FROM
				CHEQUE
			WHERE
				CHEQUE.CHEQUE_ID IS NOT NULL AND
				CHEQUE.CHEQUE_STATUS_ID IN (1,2,13)
				AND CHEQUE.COMPANY_ID IS NOT NULL 
			GROUP BY
				CHEQUE.COMPANY_ID,
				ISNULL(CHEQUE.CH_OTHER_MONEY,CHEQUE.CURRENCY_ID)
		UNION ALL
			SELECT
				0 AS BORC,
				0 AS BORC3,
				0 AS ALACAK,
				0 AS ALACAK3,
				0 AS BAKIYE,
				0 AS BAKIYE3,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				SUM(CHEQUE.OTHER_MONEY_VALUE) AS CEK_ODENMEDI,
				SUM(ISNULL(CHEQUE.CH_OTHER_MONEY_VALUE,CHEQUE.CHEQUE_VALUE)) AS CEK_ODENMEDI3,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ3,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI3,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ3,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS TOTAL_RISK_LIMIT,
				0 AS FORWARD_SALE_LIMIT3,
				0 AS OPEN_ACCOUNT_RISK_LIMIT3,
				0 AS TOTAL_RISK_LIMIT3,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE3,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE3,
				CHEQUE.OWNER_COMPANY_ID COMPANY_ID,
				ISNULL(CHEQUE.CH_OTHER_MONEY,CHEQUE.CURRENCY_ID) OTHER_MONEY
			FROM
				CHEQUE
			WHERE
				CHEQUE.CHEQUE_ID IS NOT NULL AND
				CHEQUE.CHEQUE_STATUS_ID = 4 AND
				CHEQUE.CHEQUE_DUEDATE > GETDATE()
				AND CHEQUE.OWNER_COMPANY_ID IS NOT NULL 
			GROUP BY
				CHEQUE.OWNER_COMPANY_ID,
				ISNULL(CHEQUE.CH_OTHER_MONEY,CHEQUE.CURRENCY_ID)
		UNION ALL
			SELECT
				0 AS BORC,
				0 AS BORC3,
				0 AS ALACAK,
				0 AS ALACAK3,
				0 AS BAKIYE,
				0 AS BAKIYE3,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI3,
				SUM(CHEQUE.OTHER_MONEY_VALUE) AS CEK_KARSILIKSIZ,
				SUM(ISNULL(CHEQUE.CH_OTHER_MONEY_VALUE,CHEQUE.CHEQUE_VALUE)) AS CEK_KARSILIKSIZ3,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI3,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ3,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,	
				0 AS TOTAL_RISK_LIMIT,
				0 AS FORWARD_SALE_LIMIT3,
				0 AS OPEN_ACCOUNT_RISK_LIMIT3,
				0 AS TOTAL_RISK_LIMIT3,
				0 AS SECURE_TOTAL_TAKE,

				0 AS SECURE_TOTAL_TAKE3,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE3,
				CHEQUE.COMPANY_ID,
				ISNULL(CHEQUE.CH_OTHER_MONEY,CHEQUE.CURRENCY_ID) OTHER_MONEY
			FROM
				CHEQUE
			WHERE
				CHEQUE.CHEQUE_ID IS NOT NULL AND
				CHEQUE.CHEQUE_STATUS_ID = 5 
			GROUP BY
				CHEQUE.COMPANY_ID,
				ISNULL(CHEQUE.CH_OTHER_MONEY,CHEQUE.CURRENCY_ID)
		UNION ALL
			SELECT
				0 AS BORC,
				0 AS BORC3,
				0 AS ALACAK,
				0 AS ALACAK3,
				0 AS BAKIYE,
				0 AS BAKIYE3,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI3,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ3,
				(SELECT OTHER_REMAINING_VALUE FROM VOUCHER_REMAINING_AMOUNT WHERE VOUCHER_ID = V.VOUCHER_ID) AS SENET_ODENMEDI,
				(SELECT REMAINING_VALUE FROM VOUCHER_REMAINING_AMOUNT WHERE VOUCHER_ID = V.VOUCHER_ID) AS SENET_ODENMEDI3,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ3,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS TOTAL_RISK_LIMIT,
				0 AS FORWARD_SALE_LIMIT3,
				0 AS OPEN_ACCOUNT_RISK_LIMIT3,
				0 AS TOTAL_RISK_LIMIT3,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE3,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE3,
				V.COMPANY_ID,
				ISNULL(V.CH_OTHER_MONEY,V.CURRENCY_ID) OTHER_MONEY
			FROM
				VOUCHER V
			WHERE
				V.VOUCHER_ID IS NOT NULL AND
				V.VOUCHER_STATUS_ID IN (1,2,13,11)
				AND V.COMPANY_ID IS NOT NULL 
		UNION ALL
			SELECT
				0 AS BORC,
				0 AS BORC3,
				0 AS ALACAK,
				0 AS ALACAK3,
				0 AS BAKIYE,
				0 AS BAKIYE3,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI3,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ3,
				(SELECT OTHER_REMAINING_VALUE FROM VOUCHER_REMAINING_AMOUNT WHERE VOUCHER_ID = V.VOUCHER_ID) AS SENET_ODENMEDI,
				(SELECT REMAINING_VALUE FROM VOUCHER_REMAINING_AMOUNT WHERE VOUCHER_ID = V.VOUCHER_ID) AS SENET_ODENMEDI3,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ3,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS TOTAL_RISK_LIMIT,
				0 AS FORWARD_SALE_LIMIT3,
				0 AS OPEN_ACCOUNT_RISK_LIMIT3,
				0 AS TOTAL_RISK_LIMIT3,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE3,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE3,
				V.OWNER_COMPANY_ID COMPANY_ID,
				ISNULL(V.CH_OTHER_MONEY,V.CURRENCY_ID) OTHER_MONEY
			FROM
				VOUCHER V
			WHERE
				V.VOUCHER_ID IS NOT NULL AND
				V.VOUCHER_STATUS_ID = 4 AND
				V.VOUCHER_DUEDATE > GETDATE()	
				AND V.OWNER_COMPANY_ID IS NOT NULL 
		UNION ALL
			SELECT
				0 AS BORC,
				0 AS BORC3,
				0 AS ALACAK,
				0 AS ALACAK3,
				0 AS BAKIYE,
				0 AS BAKIYE3,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI3,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ3,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI3,
				(SELECT OTHER_REMAINING_VALUE FROM VOUCHER_REMAINING_AMOUNT WHERE VOUCHER_ID = V.VOUCHER_ID) AS SENET_KARSILIKSIZ,
				(SELECT REMAINING_VALUE FROM VOUCHER_REMAINING_AMOUNT WHERE VOUCHER_ID = V.VOUCHER_ID) AS SENET_KARSILIKSIZ3,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS TOTAL_RISK_LIMIT,
				0 AS FORWARD_SALE_LIMIT3,
				0 AS OPEN_ACCOUNT_RISK_LIMIT3,
				0 AS TOTAL_RISK_LIMIT3,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE3,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE3,
				V.COMPANY_ID,
				ISNULL(V.CH_OTHER_MONEY,V.CURRENCY_ID) OTHER_MONEY
			FROM
				VOUCHER V
			WHERE
				V.VOUCHER_ID IS NOT NULL AND
				V.VOUCHER_STATUS_ID= 5 
						
			UNION ALL
				
				SELECT 
					0 AS BORC,
					0 AS BORC3,
					0 AS ALACAK,
					0 AS ALACAK3,
					0 AS BAKIYE,
					0 AS BAKIYE3,
					0 AS VADE_BORC,
					0 AS VADE_ALACAK,
					0 AS VADE_BORC_NEW,
					0 AS VADE_ALACAK_NEW,
					0 AS CEK_ODENMEDI,
					0 AS CEK_ODENMEDI3,
					0 AS CEK_KARSILIKSIZ,
					0 AS CEK_KARSILIKSIZ3,
					0 AS SENET_ODENMEDI,
					0 AS SENET_ODENMEDI3,
					0 AS SENET_KARSILIKSIZ,
					0 AS SENET_KARSILIKSIZ3,
					CC.FORWARD_SALE_LIMIT_OTHER*(SM.RATE2/SM.RATE1) FORWARD_SALE_LIMIT,
					CC.OPEN_ACCOUNT_RISK_LIMIT_OTHER*(SM.RATE2/SM.RATE1) OPEN_ACCOUNT_RISK_LIMIT,
					CC.TOTAL_RISK_LIMIT_OTHER*(SM.RATE2/SM.RATE1) TOTAL_RISK_LIMIT,
					CC.FORWARD_SALE_LIMIT_OTHER FORWARD_SALE_LIMIT3,
					CC.OPEN_ACCOUNT_RISK_LIMIT_OTHER OPEN_ACCOUNT_RISK_LIMIT3,
					CC.TOTAL_RISK_LIMIT_OTHER TOTAL_RISK_LIMIT3,
					0 AS SECURE_TOTAL_TAKE,
					0 AS SECURE_TOTAL_TAKE3,
					0 AS SECURE_TOTAL_GIVE,
					0 AS SECURE_TOTAL_GIVE3,
					CC.COMPANY_ID,
					CC.MONEY OTHER_MONEY
				FROM 
					#attributes.dsn#.COMPANY_CREDIT CC,
					SETUP_MONEY SM
				WHERE
					CC.MONEY = SM.MONEY AND					
					CC.OUR_COMPANY_ID = #get_period.our_company_id# AND
					CC.COMPANY_ID IS NOT NULL	
				
			UNION ALL
			
				SELECT 
					0 AS BORC,
					0 AS BORC3,
					0 AS ALACAK,
					0 AS ALACAK3,
					0 AS BAKIYE,
					0 AS BAKIYE3,
					0 AS VADE_BORC,
					0 AS VADE_ALACAK,
					0 AS VADE_BORC_NEW,
					0 AS VADE_ALACAK_NEW,
					0 AS CEK_ODENMEDI,
					0 AS CEK_ODENMEDI3,
					0 AS CEK_KARSILIKSIZ,
					0 AS CEK_KARSILIKSIZ3,
					0 AS SENET_ODENMEDI,
					0 AS SENET_ODENMEDI3,
					0 AS SENET_KARSILIKSIZ,
					0 AS SENET_KARSILIKSIZ3,
					0 AS FORWARD_SALE_LIMIT,
					0 AS OPEN_ACCOUNT_RISK_LIMIT,
					0 AS TOTAL_RISK_LIMIT,
					0 AS FORWARD_SALE_LIMIT3,
					0 AS OPEN_ACCOUNT_RISK_LIMIT3,
					0 AS TOTAL_RISK_LIMIT3,
					SUM(CS.ACTION_VALUE) AS SECURE_TOTAL_TAKE,
					SUM(CS.SECUREFUND_TOTAL) AS SECURE_TOTAL_TAKE3,
					0 AS SECURE_TOTAL_GIVE,
					0 AS SECURE_TOTAL_GIVE3,
					CS.COMPANY_ID,
					CS.MONEY_CAT OTHER_MONEY
				FROM 
					#attributes.dsn#.COMPANY_SECUREFUND CS
				WHERE 
					CS.GIVE_TAKE = 0 AND
					CS.FINISH_DATE > GETDATE() AND
					CS.OUR_COMPANY_ID=1 AND
					CS.SECUREFUND_STATUS = 1 AND
                    CS.IS_RETURN IS NULL AND --iade edilen teminatlarin risk tutarından dusulmesi gerekir
					CS.COMPANY_ID IS NOT NULL
				GROUP BY
					CS.COMPANY_ID,
					CS.MONEY_CAT
				
			UNION ALL
			
				SELECT 
					0 AS BORC,
					0 AS BORC3,
					0 AS ALACAK,
					0 AS ALACAK3,
					0 AS BAKIYE,
					0 AS BAKIYE3,
					0 AS VADE_BORC,
					0 AS VADE_ALACAK,
					0 AS VADE_BORC_NEW,
					0 AS VADE_ALACAK_NEW,
					0 AS CEK_ODENMEDI,
					0 AS CEK_ODENMEDI3,
					0 AS CEK_KARSILIKSIZ,
					0 AS CEK_KARSILIKSIZ3,
					0 AS SENET_ODENMEDI,
					0 AS SENET_ODENMEDI3,
					0 AS SENET_KARSILIKSIZ,
					0 AS SENET_KARSILIKSIZ3,
					0 AS FORWARD_SALE_LIMIT,
					0 AS OPEN_ACCOUNT_RISK_LIMIT,
					0 AS TOTAL_RISK_LIMIT,
					0 AS FORWARD_SALE_LIMIT3,
					0 AS OPEN_ACCOUNT_RISK_LIMIT3,
					0 AS TOTAL_RISK_LIMIT3,
					0 AS SECURE_TOTAL_TAKE,
					0 AS SECURE_TOTAL_TAKE3,
					SUM(CS.ACTION_VALUE) AS SECURE_TOTAL_GIVE,
					SUM(CS.SECUREFUND_TOTAL) AS SECURE_TOTAL_GIVE3,
					CS.COMPANY_ID,
					CS.MONEY_CAT OTHER_MONEY
				FROM 
					#attributes.dsn#.COMPANY_SECUREFUND CS
				WHERE 
					CS.GIVE_TAKE = 1 AND
					CS.FINISH_DATE > GETDATE() AND
					CS.OUR_COMPANY_ID=#get_period.our_company_id# AND
					CS.SECUREFUND_STATUS = 1 AND
                    CS.IS_RETURN IS NULL AND --iade edilen teminatlarin risk tutarından dusulmesi gerekir
					CS.COMPANY_ID IS NOT NULL
				GROUP BY
					CS.COMPANY_ID,
					CS.MONEY_CAT
					) AS Q1
				GROUP BY
					Q1.COMPANY_ID,
					Q1.OTHER_MONEY

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CONSUMER_REMAINDER] AS
			SELECT
				CONSUMER_ID, 
				ROUND(SUM(BORC-ALACAK),5) AS BAKIYE, 
				ROUND(SUM(BORC2-ALACAK2),5) AS BAKIYE2,
				ROUND(SUM(BORC),5) AS BORC,
				ROUND(SUM(BORC2),5) AS BORC2,
				ROUND(SUM(ALACAK),5) AS ALACAK,
				ROUND(SUM(ALACAK2),5) AS ALACAK2,
				CASE WHEN SUM(BORC)= 0 THEN SUM((BORC*DATE_DIFF)) ELSE ROUND((SUM((BORC*DATE_DIFF))/SUM(BORC)),0) END AS VADE_BORC,
				CASE WHEN SUM(ALACAK)= 0 THEN SUM((ALACAK*DATE_DIFF)) ELSE ROUND((SUM((ALACAK*DATE_DIFF))/SUM(ALACAK)),0) END AS VADE_ALACAK,	
				CASE WHEN SUM(BORC)= 0 THEN SUM((BORC*DUE_DATE_DIFF)) ELSE ROUND((SUM((BORC*DUE_DATE_DIFF))/SUM(BORC)),0) END AS VADE_BORC_NEW,
				CASE WHEN SUM(ALACAK)= 0 THEN SUM((ALACAK*DUE_DATE_DIFF)) ELSE ROUND((SUM((ALACAK*DUE_DATE_DIFF))/SUM(ALACAK)),0) END AS VADE_ALACAK_NEW
			FROM
				CARI_ROWS_CONSUMER
			GROUP BY
				CONSUMER_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CONSUMER_REMAINDER_MONEY] AS
			SELECT
				CONSUMER_ID, 
				SUM(BORC-ALACAK) AS BAKIYE, 
				SUM(BORC2-ALACAK2) AS BAKIYE2,
				SUM(BORC3-ALACAK3) AS BAKIYE3,
				SUM(BORC) AS BORC,
				SUM(BORC2) AS BORC2,
				SUM(BORC3) AS BORC3,
				SUM(ALACAK) AS ALACAK,
				SUM(ALACAK2) AS ALACAK2,
				SUM(ALACAK3) AS ALACAK3,
				OTHER_MONEY,
				CASE WHEN SUM(BORC3)= 0 THEN SUM((BORC3*DATE_DIFF)) ELSE ROUND((SUM((BORC3*DATE_DIFF))/SUM(BORC3)),0) END AS VADE_BORC3,
				CASE WHEN SUM(ALACAK3)= 0 THEN SUM((ALACAK3*DATE_DIFF)) ELSE ROUND((SUM((ALACAK3*DATE_DIFF))/SUM(ALACAK3)),0) END AS VADE_ALACAK3,
				CASE WHEN SUM(BORC3)= 0 THEN SUM((BORC3*DUE_DATE_DIFF)) ELSE ROUND((SUM((BORC3*DUE_DATE_DIFF))/SUM(BORC3)),0) END AS VADE_BORC_NEW3,
				CASE WHEN SUM(ALACAK3)= 0 THEN SUM((ALACAK3*DUE_DATE_DIFF)) ELSE ROUND((SUM((ALACAK3*DUE_DATE_DIFF))/SUM(ALACAK3)),0) END AS VADE_ALACAK_NEW3
			FROM
				CARI_ROWS_CONSUMER
			GROUP BY
				CONSUMER_ID,
				OTHER_MONEY

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CONSUMER_REMAINDER_PROJECT] AS
			SELECT
				CONSUMER_ID, 
				PROJECT_ID,
				ROUND(SUM(BORC-ALACAK),5) AS BAKIYE, 
				ROUND(SUM(BORC2-ALACAK2),5) AS BAKIYE2,
				ROUND(SUM(BORC),5) AS BORC,
				ROUND(SUM(BORC2),5) AS BORC2,
				ROUND(SUM(ALACAK),5) AS ALACAK,
				ROUND(SUM(ALACAK2),5) AS ALACAK2,
				CASE WHEN SUM(BORC)= 0 THEN SUM((BORC*DATE_DIFF)) ELSE ROUND((SUM((BORC*DATE_DIFF))/SUM(BORC)),0) END AS VADE_BORC,
				CASE WHEN SUM(ALACAK)= 0 THEN SUM((ALACAK*DATE_DIFF)) ELSE ROUND((SUM((ALACAK*DATE_DIFF))/SUM(ALACAK)),0) END AS VADE_ALACAK	
			FROM
				CARI_ROWS_CONSUMER
			GROUP BY
				CONSUMER_ID,
				PROJECT_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CONSUMER_REMAINDER_MONEY_PROJECT] AS
			SELECT
				CONSUMER_ID, 
				OTHER_MONEY,
				PROJECT_ID,			
				SUM(BORC-ALACAK) AS BAKIYE, 
				SUM(BORC2-ALACAK2) AS BAKIYE2,
				SUM(BORC3-ALACAK3) AS BAKIYE3,
				SUM(BORC) AS BORC,
				SUM(BORC2) AS BORC2,
				SUM(BORC3) AS BORC3,
				SUM(ALACAK) AS ALACAK,
				SUM(ALACAK2) AS ALACAK2,
				SUM(ALACAK3) AS ALACAK3,
				CASE WHEN SUM(BORC3)= 0 THEN SUM((BORC3*DATE_DIFF)) ELSE ROUND((SUM((BORC3*DATE_DIFF))/SUM(BORC3)),0) END AS VADE_BORC3,
				CASE WHEN SUM(ALACAK3)= 0 THEN SUM((ALACAK3*DATE_DIFF)) ELSE ROUND((SUM((ALACAK3*DATE_DIFF))/SUM(ALACAK3)),0) END AS VADE_ALACAK3
			FROM
				CARI_ROWS_CONSUMER
			GROUP BY
				CONSUMER_ID,
				OTHER_MONEY,
				PROJECT_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CONSUMER_RISK] AS	
		SELECT 
			SUM( Q1.BORC ) AS BORC,
			SUM( Q1.BORC2 ) AS BORC2,
			SUM( Q1.ALACAK ) AS ALACAK,
			SUM( Q1.ALACAK2 ) AS ALACAK2,
			SUM( Q1.BAKIYE ) AS BAKIYE,
			SUM( Q1.BAKIYE2 ) AS BAKIYE2,
			SUM( Q1.VADE_BORC ) AS VADE_BORC,
			SUM( Q1.VADE_ALACAK ) AS VADE_ALACAK,
			SUM( Q1.VADE_BORC_NEW ) AS VADE_BORC_NEW,
			SUM( Q1.VADE_ALACAK_NEW ) AS VADE_ALACAK_NEW,
			SUM( Q1.CEK_ODENMEDI ) AS CEK_ODENMEDI,
			SUM( Q1.CEK_ODENMEDI2 ) AS CEK_ODENMEDI2,
			SUM( Q1.CEK_KARSILIKSIZ ) AS CEK_KARSILIKSIZ,
			SUM( Q1.CEK_KARSILIKSIZ2 ) AS CEK_KARSILIKSIZ2,
			SUM( Q1.SENET_ODENMEDI ) AS SENET_ODENMEDI,
			SUM( Q1.SENET_ODENMEDI2 ) AS SENET_ODENMEDI2,
			SUM( Q1.SENET_KARSILIKSIZ ) AS SENET_KARSILIKSIZ,
			SUM( Q1.SENET_KARSILIKSIZ2) AS SENET_KARSILIKSIZ2,
			SUM( Q1.KEFIL_SENET_ODENMEDI ) AS KEFIL_SENET_ODENMEDI,
			SUM( Q1.KEFIL_SENET_ODENMEDI2 ) AS KEFIL_SENET_ODENMEDI2,
			SUM( Q1.KEFIL_SENET_KARSILIKSIZ ) AS KEFIL_SENET_KARSILIKSIZ,
			SUM( Q1.KEFIL_SENET_KARSILIKSIZ2) AS KEFIL_SENET_KARSILIKSIZ2,
			SUM( Q1.FORWARD_SALE_LIMIT ) AS FORWARD_SALE_LIMIT,
			SUM( Q1.OPEN_ACCOUNT_RISK_LIMIT ) AS OPEN_ACCOUNT_RISK_LIMIT,
			SUM( Q1.PAYMENT_BLOKAJ ) AS PAYMENT_BLOKAJ,
			SUM( Q1.TOTAL_RISK_LIMIT ) AS TOTAL_RISK_LIMIT,
			SUM( Q1.SECURE_TOTAL_TAKE ) AS SECURE_TOTAL_TAKE,
			SUM( Q1.SECURE_TOTAL_TAKE2 ) AS SECURE_TOTAL_TAKE2,
			SUM( Q1.SECURE_TOTAL_GIVE ) AS SECURE_TOTAL_GIVE,
			SUM( Q1.SECURE_TOTAL_GIVE2 ) AS SECURE_TOTAL_GIVE2,
			Q1.CONSUMER_ID
		FROM
			(
			SELECT 
				BORC,
				BORC2,
				ALACAK,
				ALACAK2,
				BAKIYE,
				BAKIYE2,
				VADE_BORC,
				VADE_ALACAK,
				VADE_BORC_NEW,
				VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI2,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ2,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI2,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ2,
				0 AS KEFIL_SENET_ODENMEDI,
				0 AS KEFIL_SENET_ODENMEDI2,
				0 AS KEFIL_SENET_KARSILIKSIZ,
				0 AS KEFIL_SENET_KARSILIKSIZ2,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS PAYMENT_BLOKAJ,
				0 AS TOTAL_RISK_LIMIT,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE2,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE2,
				CONSUMER_ID
			FROM 
				CONSUMER_REMAINDER
		UNION ALL
			SELECT
				0 AS BORC,
				0 AS BORC2,
				0 AS ALACAK,
				0 AS ALACAK2,
				0 AS BAKIYE,
				0 AS BAKIYE2,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				SUM(CHEQUE.OTHER_MONEY_VALUE) AS CEK_ODENMEDI,
				SUM(CHEQUE.OTHER_MONEY_VALUE2) AS CEK_ODENMEDI2,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ2,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI2,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ2,
				0 AS KEFIL_SENET_ODENMEDI,
				0 AS KEFIL_SENET_ODENMEDI2,
				0 AS KEFIL_SENET_KARSILIKSIZ,
				0 AS KEFIL_SENET_KARSILIKSIZ2,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS PAYMENT_BLOKAJ,
				0 AS TOTAL_RISK_LIMIT,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE2,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE2,
				CHEQUE.CONSUMER_ID
			FROM
				CHEQUE
			WHERE
				CHEQUE.CHEQUE_ID IS NOT NULL AND
				CHEQUE.CHEQUE_STATUS_ID IN (1,2,13)
				AND CHEQUE.CONSUMER_ID IS NOT NULL 
			GROUP BY
				CHEQUE.CONSUMER_ID
		UNION ALL
			SELECT
				0 AS BORC,
				0 AS BORC2,
				0 AS ALACAK,
				0 AS ALACAK2,
				0 AS BAKIYE,
				0 AS BAKIYE2,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				SUM(CHEQUE.OTHER_MONEY_VALUE) AS CEK_ODENMEDI,
				SUM(CHEQUE.OTHER_MONEY_VALUE2) AS CEK_ODENMEDI2,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ2,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI2,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ2,
				0 AS KEFIL_SENET_ODENMEDI,
				0 AS KEFIL_SENET_ODENMEDI2,
				0 AS KEFIL_SENET_KARSILIKSIZ,
				0 AS KEFIL_SENET_KARSILIKSIZ2,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS PAYMENT_BLOKAJ,
				0 AS TOTAL_RISK_LIMIT,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE2,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE2,
				CHEQUE.OWNER_CONSUMER_ID CONSUMER_ID
			FROM
				CHEQUE
			WHERE
				CHEQUE.CHEQUE_ID IS NOT NULL AND
				CHEQUE.CHEQUE_STATUS_ID = 4 AND
				CHEQUE.OWNER_CONSUMER_ID > GETDATE()	
				AND CHEQUE.CONSUMER_ID IS NOT NULL 
			GROUP BY
				CHEQUE.OWNER_CONSUMER_ID
		UNION ALL
			SELECT
				0 AS BORC,
				0 AS BORC2,
				0 AS ALACAK,
				0 AS ALACAK2,
				0 AS BAKIYE,
				0 AS BAKIYE2,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI2,
				SUM(CHEQUE.OTHER_MONEY_VALUE) AS CEK_KARSILIKSIZ,
				SUM(CHEQUE.OTHER_MONEY_VALUE2) AS CEK_KARSILIKSIZ2,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI2,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ2,
				0 AS KEFIL_SENET_ODENMEDI,
				0 AS KEFIL_SENET_ODENMEDI2,
				0 AS KEFIL_SENET_KARSILIKSIZ,
				0 AS KEFIL_SENET_KARSILIKSIZ2,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS PAYMENT_BLOKAJ,
	
				0 AS TOTAL_RISK_LIMIT,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE2,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE2,
				CHEQUE.CONSUMER_ID
			FROM
				CHEQUE
			WHERE
				CHEQUE.CHEQUE_ID IS NOT NULL AND
				CHEQUE.CHEQUE_STATUS_ID = 5 
			GROUP BY
				CHEQUE.CONSUMER_ID
		UNION ALL
			SELECT
				0 AS BORC,
				0 AS BORC2,
				0 AS ALACAK,
				0 AS ALACAK2,
				0 AS BAKIYE,
				0 AS BAKIYE2,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI2,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ2,
				(SELECT OTHER_REMAINING_VALUE FROM VOUCHER_REMAINING_AMOUNT WHERE VOUCHER_ID = V.VOUCHER_ID) AS SENET_ODENMEDI,
				(SELECT OTHER_REMAINING_VALUE2 FROM VOUCHER_REMAINING_AMOUNT WHERE VOUCHER_ID = V.VOUCHER_ID) AS SENET_ODENMEDI2,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ2,
				0 AS KEFIL_SENET_ODENMEDI,
				0 AS KEFIL_SENET_ODENMEDI2,
				0 AS KEFIL_SENET_KARSILIKSIZ,
				0 AS KEFIL_SENET_KARSILIKSIZ2,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS PAYMENT_BLOKAJ,
				0 AS TOTAL_RISK_LIMIT,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE2,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE2,
				V.CONSUMER_ID
			FROM
				VOUCHER V
			WHERE
				V.VOUCHER_ID IS NOT NULL AND
				V.VOUCHER_STATUS_ID IN (1,2,13,11)
				AND V.CONSUMER_ID IS NOT NULL 

		UNION ALL
			SELECT
				0 AS BORC,
				0 AS BORC2,
				0 AS ALACAK,
				0 AS ALACAK2,
				0 AS BAKIYE,
				0 AS BAKIYE2,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,

				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI2,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ2,
				(SELECT OTHER_REMAINING_VALUE FROM VOUCHER_REMAINING_AMOUNT WHERE VOUCHER_ID = V.VOUCHER_ID) AS SENET_ODENMEDI,
				(SELECT OTHER_REMAINING_VALUE2 FROM VOUCHER_REMAINING_AMOUNT WHERE VOUCHER_ID = V.VOUCHER_ID) AS SENET_ODENMEDI2,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ2,
				0 AS KEFIL_SENET_ODENMEDI,
				0 AS KEFIL_SENET_ODENMEDI2,
				0 AS KEFIL_SENET_KARSILIKSIZ,
				0 AS KEFIL_SENET_KARSILIKSIZ2,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS PAYMENT_BLOKAJ,
				0 AS TOTAL_RISK_LIMIT,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE2,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE2,
				V.OWNER_CONSUMER_ID CONSUMER_ID
			FROM
				VOUCHER V
			WHERE
				V.VOUCHER_ID IS NOT NULL AND
				V.VOUCHER_STATUS_ID = 4 AND
				V.VOUCHER_DUEDATE > GETDATE()
				AND V.OWNER_CONSUMER_ID IS NOT NULL 

		UNION ALL
			SELECT
				0 AS BORC,
				0 AS BORC2,
				0 AS ALACAK,
				0 AS ALACAK2,
				0 AS BAKIYE,
				0 AS BAKIYE2,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI2,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ2,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI2,
				(SELECT OTHER_REMAINING_VALUE FROM VOUCHER_REMAINING_AMOUNT WHERE VOUCHER_ID = V.VOUCHER_ID) AS SENET_KARSILIKSIZ,
				(SELECT OTHER_REMAINING_VALUE2 FROM VOUCHER_REMAINING_AMOUNT WHERE VOUCHER_ID = V.VOUCHER_ID) AS SENET_KARSILIKSIZ2,
				0 AS KEFIL_SENET_ODENMEDI,
				0 AS KEFIL_SENET_ODENMEDI2,
				0 AS KEFIL_SENET_KARSILIKSIZ,
				0 AS KEFIL_SENET_KARSILIKSIZ2,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS PAYMENT_BLOKAJ,
				0 AS TOTAL_RISK_LIMIT,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE2,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE2,
				V.CONSUMER_ID
			FROM
				VOUCHER V
			WHERE
				V.VOUCHER_ID IS NOT NULL AND
				V.VOUCHER_STATUS_ID= 5
		UNION ALL
			SELECT
				0 AS BORC,
				0 AS BORC2,
				0 AS ALACAK,
				0 AS ALACAK2,
				0 AS BAKIYE,
				0 AS BAKIYE2,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI2,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ2,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI2,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ2,
				SUM(VG.AMOUNT) AS KEFIL_SENET_ODENMEDI,
				SUM(VG.AMOUNT2) AS KEFIL_SENET_ODENMEDI2,
				0 AS KEFIL_SENET_KARSILIKSIZ,
				0 AS KEFIL_SENET_KARSILIKSIZ2,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS PAYMENT_BLOKAJ,
				0 AS TOTAL_RISK_LIMIT,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE2,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE2,
				VG.CONSUMER_ID
			FROM
				VOUCHER V,
				VOUCHER_GUARANTORS VG
			WHERE
				V.VOUCHER_ID IS NOT NULL AND
				(
				V.VOUCHER_STATUS_ID IN (1,2)
				OR
					(
					V.VOUCHER_STATUS_ID = 4 AND
					
					V.VOUCHER_DUEDATE > GETDATE()
					
					)
				)
				AND V.VOUCHER_ID = VG.VOUCHER_ID
			GROUP BY
				VG.CONSUMER_ID
		UNION ALL
			SELECT
				0 AS BORC,
				0 AS BORC2,
				0 AS ALACAK,
				0 AS ALACAK2,
				0 AS BAKIYE,
				0 AS BAKIYE2,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI2,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ2,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI2,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ2,
				0 AS KEFIL_SENET_ODENMEDI,
				0 AS KEFIL_SENET_ODENMEDI2,
				SUM(VG.AMOUNT) AS KEFIL_SENET_KARSILIKSIZ,
				SUM(VG.AMOUNT2) AS KEFIL_SENET_KARSILIKSIZ,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS PAYMENT_BLOKAJ,
				0 AS TOTAL_RISK_LIMIT,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE2,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE2,
				VG.CONSUMER_ID
			FROM
				VOUCHER V,
				VOUCHER_GUARANTORS VG
			WHERE
				V.VOUCHER_STATUS_ID= 5 
				AND V.VOUCHER_ID = VG.VOUCHER_ID
			GROUP BY
				VG.CONSUMER_ID
		UNION ALL
			SELECT 
				0 AS BORC,
				0 AS BORC2,
				0 AS ALACAK,
				0 AS ALACAK2,
				0 AS BAKIYE,
				0 AS BAKIYE2,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI2,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ2,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI2,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ2,
				0 AS KEFIL_SENET_ODENMEDI,
				0 AS KEFIL_SENET_ODENMEDI2,
				0 AS KEFIL_SENET_KARSILIKSIZ,
				0 AS KEFIL_SENET_KARSILIKSIZ2,
				CC.FORWARD_SALE_LIMIT_OTHER*(SM.RATE2/SM.RATE1) FORWARD_SALE_LIMIT,
				CC.OPEN_ACCOUNT_RISK_LIMIT_OTHER*(SM.RATE2/SM.RATE1) OPEN_ACCOUNT_RISK_LIMIT,
				CC.PAYMENT_BLOKAJ*(SM.RATE2/SM.RATE1) PAYMENT_BLOKAJ,
				CC.TOTAL_RISK_LIMIT_OTHER*(SM.RATE2/SM.RATE1) TOTAL_RISK_LIMIT,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE2,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE2,
				CC.CONSUMER_ID
			FROM 
				#attributes.dsn#.COMPANY_CREDIT CC,
				SETUP_MONEY SM
			WHERE
				CC.MONEY = SM.MONEY AND			
				CC.OUR_COMPANY_ID=1 AND
				CC.CONSUMER_ID IS NOT NULL
		UNION ALL
			SELECT 
				0 AS BORC,
				0 AS BORC2,
				0 AS ALACAK,
				0 AS ALACAK2,
				0 AS BAKIYE,
				0 AS BAKIYE2,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI2,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ2,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI2,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ2,
				0 AS KEFIL_SENET_ODENMEDI,
				0 AS KEFIL_SENET_ODENMEDI2,
				0 AS KEFIL_SENET_KARSILIKSIZ,
				0 AS KEFIL_SENET_KARSILIKSIZ2,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS PAYMENT_BLOKAJ,
				0 AS TOTAL_RISK_LIMIT,
				SUM(CS.ACTION_VALUE) AS SECURE_TOTAL_TAKE,
				SUM(CS.ACTION_VALUE2) AS SECURE_TOTAL_TAKE2,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE2,
				CS.CONSUMER_ID
			FROM 
				#attributes.dsn#.COMPANY_SECUREFUND CS
			WHERE 
				CS.GIVE_TAKE = 0 AND
				CS.OUR_COMPANY_ID=1 AND
				CS.FINISH_DATE > GETDATE() AND
				CS.SECUREFUND_STATUS = 1 AND
                CS.IS_RETURN IS NULL AND --iade edilen teminatlarin risk tutarından dusulmesi gerekir
				CS.CONSUMER_ID IS NOT NULL
			GROUP BY
				CS.CONSUMER_ID
		UNION ALL
			SELECT 
				0 AS BORC,
				0 AS BORC2,
				0 AS ALACAK,
				0 AS ALACAK2,
				0 AS BAKIYE,
				0 AS BAKIYE2,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI2,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ2,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI2,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ2,
				0 AS KEFIL_SENET_ODENMEDI,
				0 AS KEFIL_SENET_ODENMEDI2,
				0 AS KEFIL_SENET_KARSILIKSIZ,
				0 AS KEFIL_SENET_KARSILIKSIZ2,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS PAYMENT_BLOKAJ,
				0 AS TOTAL_RISK_LIMIT,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE2,
				SUM(CS.ACTION_VALUE) AS SECURE_TOTAL_GIVE,
				SUM(CS.ACTION_VALUE2) AS SECURE_TOTAL_GIVE2,
				CS.CONSUMER_ID
			FROM 
				#attributes.dsn#.COMPANY_SECUREFUND CS
			WHERE 
				CS.GIVE_TAKE = 1 AND
				CS.OUR_COMPANY_ID=#get_period.our_company_id# AND
				CS.FINISH_DATE > GETDATE() AND
				CS.SECUREFUND_STATUS = 1 AND
                CS.IS_RETURN IS NULL AND --iade edilen teminatlarin risk tutarından dusulmesi gerekir
				CS.CONSUMER_ID IS NOT NULL
	
			GROUP BY
				CS.CONSUMER_ID
				) AS Q1
			GROUP BY
				Q1.CONSUMER_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CONSUMER_RISK_MONEY] AS
		SELECT 
			SUM( Q1.BORC ) AS BORC,
			SUM( Q1.BORC3 ) AS BORC2,
			SUM( Q1.ALACAK ) AS ALACAK,
			SUM( Q1.ALACAK3 ) AS ALACAK2,
			SUM( Q1.BAKIYE ) AS BAKIYE,
			SUM( Q1.BAKIYE3 ) AS BAKIYE2,
			SUM( Q1.VADE_BORC ) AS VADE_BORC,
			SUM( Q1.VADE_ALACAK ) AS VADE_ALACAK,
			SUM( Q1.VADE_BORC_NEW ) AS VADE_BORC_NEW,
			SUM( Q1.VADE_ALACAK_NEW ) AS VADE_ALACAK_NEW,
			SUM( Q1.CEK_ODENMEDI ) AS CEK_ODENMEDI,
			SUM( Q1.CEK_ODENMEDI3 ) AS CEK_ODENMEDI2,
			SUM( Q1.CEK_KARSILIKSIZ ) AS CEK_KARSILIKSIZ,
			SUM( Q1.CEK_KARSILIKSIZ3 ) AS CEK_KARSILIKSIZ2,
			SUM( Q1.SENET_ODENMEDI ) AS SENET_ODENMEDI,
			SUM( Q1.SENET_ODENMEDI3 ) AS SENET_ODENMEDI2,
			SUM( Q1.SENET_KARSILIKSIZ ) AS SENET_KARSILIKSIZ,
			SUM( Q1.SENET_KARSILIKSIZ3) AS SENET_KARSILIKSIZ2,
			SUM( Q1.FORWARD_SALE_LIMIT ) AS FORWARD_SALE_LIMIT,
			SUM( Q1.OPEN_ACCOUNT_RISK_LIMIT ) AS OPEN_ACCOUNT_RISK_LIMIT,
			SUM( Q1.TOTAL_RISK_LIMIT ) AS TOTAL_RISK_LIMIT,
			SUM( Q1.FORWARD_SALE_LIMIT3 ) AS FORWARD_SALE_LIMIT3,
			SUM( Q1.OPEN_ACCOUNT_RISK_LIMIT3 ) AS OPEN_ACCOUNT_RISK_LIMIT3,
			SUM( Q1.TOTAL_RISK_LIMIT3 ) AS TOTAL_RISK_LIMIT3,
			SUM( Q1.SECURE_TOTAL_TAKE ) AS SECURE_TOTAL_TAKE,
			SUM( Q1.SECURE_TOTAL_TAKE3 ) AS SECURE_TOTAL_TAKE2,
			SUM( Q1.SECURE_TOTAL_GIVE ) AS SECURE_TOTAL_GIVE,
			SUM( Q1.SECURE_TOTAL_GIVE3 ) AS SECURE_TOTAL_GIVE2,
			Q1.CONSUMER_ID,
			Q1.OTHER_MONEY
		FROM
			(
			SELECT 
				BORC,
				BORC3,
				ALACAK,
				ALACAK3,
				BAKIYE,
				BAKIYE3,
				VADE_BORC3 VADE_BORC,
				VADE_ALACAK3 VADE_ALACAK,
				VADE_BORC_NEW3 VADE_BORC_NEW,
				VADE_ALACAK_NEW3 VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI3,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ3,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI3,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ3,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS TOTAL_RISK_LIMIT,
				0 AS FORWARD_SALE_LIMIT3,
				0 AS OPEN_ACCOUNT_RISK_LIMIT3,
				0 AS TOTAL_RISK_LIMIT3,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE3,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE3,
				CONSUMER_ID,
				OTHER_MONEY
			FROM 
				CONSUMER_REMAINDER_MONEY
		UNION ALL
			SELECT
				0 AS BORC,
				0 AS BORC3,
				0 AS ALACAK,
				0 AS ALACAK3,
				0 AS BAKIYE,
				0 AS BAKIYE3,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				SUM(CHEQUE.OTHER_MONEY_VALUE) AS CEK_ODENMEDI,
				SUM(CHEQUE.CHEQUE_VALUE) AS CEK_ODENMEDI3,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ3,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI3,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ3,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS TOTAL_RISK_LIMIT,
				0 AS FORWARD_SALE_LIMIT3,
				0 AS OPEN_ACCOUNT_RISK_LIMIT3,
				0 AS TOTAL_RISK_LIMIT3,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE3,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE3,
				CHEQUE.CONSUMER_ID,
				CHEQUE.CURRENCY_ID OTHER_MONEY
			FROM
				CHEQUE
			WHERE
				CHEQUE.CHEQUE_ID IS NOT NULL AND
				CHEQUE.CHEQUE_STATUS_ID IN (1,2,13)
				AND CHEQUE.CONSUMER_ID IS NOT NULL 
			GROUP BY
				CHEQUE.CONSUMER_ID,
				CHEQUE.CURRENCY_ID
		UNION ALL
			SELECT
				0 AS BORC,
				0 AS BORC3,
				0 AS ALACAK,
				0 AS ALACAK3,
				0 AS BAKIYE,
				0 AS BAKIYE3,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				SUM(CHEQUE.OTHER_MONEY_VALUE) AS CEK_ODENMEDI,
				SUM(CHEQUE.CHEQUE_VALUE) AS CEK_ODENMEDI3,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ3,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI3,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ3,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS TOTAL_RISK_LIMIT,
				0 AS FORWARD_SALE_LIMIT3,
				0 AS OPEN_ACCOUNT_RISK_LIMIT3,
				0 AS TOTAL_RISK_LIMIT3,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE3,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE3,
				CHEQUE.OWNER_CONSUMER_ID CONSUMER_ID,
				CHEQUE.CURRENCY_ID OTHER_MONEY
			FROM
				CHEQUE
			WHERE
				CHEQUE.CHEQUE_ID IS NOT NULL AND
				CHEQUE.CHEQUE_STATUS_ID = 4 AND
				CHEQUE.CHEQUE_DUEDATE > GETDATE()
				AND CHEQUE.OWNER_CONSUMER_ID IS NOT NULL 
			GROUP BY
				CHEQUE.OWNER_CONSUMER_ID,
				CHEQUE.CURRENCY_ID
		UNION ALL
			SELECT
				0 AS BORC,
				0 AS BORC3,
				0 AS ALACAK,
				0 AS ALACAK3,
				0 AS BAKIYE,
				0 AS BAKIYE3,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI3,
				SUM(CHEQUE.OTHER_MONEY_VALUE) AS CEK_KARSILIKSIZ,
				SUM(CHEQUE.CHEQUE_VALUE) AS CEK_KARSILIKSIZ3,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI3,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ3,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,	
				0 AS TOTAL_RISK_LIMIT,
				0 AS FORWARD_SALE_LIMIT3,
				0 AS OPEN_ACCOUNT_RISK_LIMIT3,
				0 AS TOTAL_RISK_LIMIT3,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE3,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE3,
				CHEQUE.CONSUMER_ID,
				CHEQUE.CURRENCY_ID OTHER_MONEY
			FROM
				CHEQUE
			WHERE
				CHEQUE.CHEQUE_ID IS NOT NULL AND
				CHEQUE.CHEQUE_STATUS_ID = 5 
			GROUP BY
				CHEQUE.CONSUMER_ID,
				CHEQUE.CURRENCY_ID
		UNION ALL
			SELECT
				0 AS BORC,
				0 AS BORC3,
				0 AS ALACAK,
				0 AS ALACAK3,
				0 AS BAKIYE,
				0 AS BAKIYE3,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI3,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ3,
				(SELECT OTHER_REMAINING_VALUE FROM VOUCHER_REMAINING_AMOUNT WHERE VOUCHER_ID = V.VOUCHER_ID) AS SENET_ODENMEDI,
				(SELECT REMAINING_VALUE FROM VOUCHER_REMAINING_AMOUNT WHERE VOUCHER_ID = V.VOUCHER_ID) AS SENET_ODENMEDI3,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ3,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS TOTAL_RISK_LIMIT,
				0 AS FORWARD_SALE_LIMIT3,
				0 AS OPEN_ACCOUNT_RISK_LIMIT3,
				0 AS TOTAL_RISK_LIMIT3,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE3,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE3,
				V.CONSUMER_ID,
				V.CURRENCY_ID OTHER_MONEY
			FROM
				VOUCHER V
			WHERE
				V.VOUCHER_ID IS NOT NULL AND
				V.VOUCHER_STATUS_ID IN (1,2,13,11)
				AND V.CONSUMER_ID IS NOT NULL 

		UNION ALL
			SELECT
				0 AS BORC,
				0 AS BORC3,
				0 AS ALACAK,
				0 AS ALACAK3,
				0 AS BAKIYE,
				0 AS BAKIYE3,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI3,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ3,
				(SELECT OTHER_REMAINING_VALUE FROM VOUCHER_REMAINING_AMOUNT WHERE VOUCHER_ID = V.VOUCHER_ID) AS SENET_ODENMEDI,
				(SELECT REMAINING_VALUE FROM VOUCHER_REMAINING_AMOUNT WHERE VOUCHER_ID = V.VOUCHER_ID) AS SENET_ODENMEDI3,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ3,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS TOTAL_RISK_LIMIT,
				0 AS FORWARD_SALE_LIMIT3,
				0 AS OPEN_ACCOUNT_RISK_LIMIT3,
				0 AS TOTAL_RISK_LIMIT3,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE3,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE3,
				V.OWNER_CONSUMER_ID CONSUMER_ID,
				V.CURRENCY_ID OTHER_MONEY
			FROM
				VOUCHER V
			WHERE
				V.VOUCHER_ID IS NOT NULL AND
				V.VOUCHER_STATUS_ID = 4 AND
				V.VOUCHER_DUEDATE > GETDATE()	
				AND V.OWNER_CONSUMER_ID IS NOT NULL 
	
		UNION ALL
			SELECT
				0 AS BORC,
				0 AS BORC3,
				0 AS ALACAK,
				0 AS ALACAK3,
				0 AS BAKIYE,

				0 AS BAKIYE3,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI3,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ3,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI3,
				(SELECT OTHER_REMAINING_VALUE FROM VOUCHER_REMAINING_AMOUNT WHERE VOUCHER_ID = V.VOUCHER_ID) AS SENET_KARSILIKSIZ,
				(SELECT REMAINING_VALUE FROM VOUCHER_REMAINING_AMOUNT WHERE VOUCHER_ID = V.VOUCHER_ID) AS SENET_KARSILIKSIZ3,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS TOTAL_RISK_LIMIT,
				0 AS FORWARD_SALE_LIMIT3,
				0 AS OPEN_ACCOUNT_RISK_LIMIT3,
				0 AS TOTAL_RISK_LIMIT3,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE3,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE3,
				V.CONSUMER_ID,
				V.CURRENCY_ID OTHER_MONEY
			FROM
				VOUCHER V
			WHERE
				V.VOUCHER_ID IS NOT NULL AND
				V.VOUCHER_STATUS_ID= 5 
		UNION ALL
			SELECT 
				0 AS BORC,
				0 AS BORC3,
				0 AS ALACAK,
				0 AS ALACAK3,
				0 AS BAKIYE,
				0 AS BAKIYE3,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI3,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ3,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI3,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ3,
				CC.FORWARD_SALE_LIMIT_OTHER*(SM.RATE2/SM.RATE1) FORWARD_SALE_LIMIT,
				CC.OPEN_ACCOUNT_RISK_LIMIT_OTHER*(SM.RATE2/SM.RATE1) OPEN_ACCOUNT_RISK_LIMIT,
				CC.TOTAL_RISK_LIMIT_OTHER*(SM.RATE2/SM.RATE1) TOTAL_RISK_LIMIT,
				CC.FORWARD_SALE_LIMIT_OTHER FORWARD_SALE_LIMIT3,
				CC.OPEN_ACCOUNT_RISK_LIMIT_OTHER OPEN_ACCOUNT_RISK_LIMIT3,
				CC.TOTAL_RISK_LIMIT_OTHER TOTAL_RISK_LIMIT3,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE3,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE3,
				CC.CONSUMER_ID,
				CC.MONEY OTHER_MONEY
			FROM 
				#attributes.dsn#.COMPANY_CREDIT CC,
				SETUP_MONEY SM
			WHERE
				CC.MONEY = SM.MONEY AND			
				CC.OUR_COMPANY_ID=1 AND
				CC.CONSUMER_ID IS NOT NULL
		UNION ALL
			SELECT 
				0 AS BORC,
				0 AS BORC3,
				0 AS ALACAK,
				0 AS ALACAK3,
				0 AS BAKIYE,
				0 AS BAKIYE3,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI3,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ3,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI3,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ3,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS TOTAL_RISK_LIMIT,
				0 AS FORWARD_SALE_LIMIT3,
				0 AS OPEN_ACCOUNT_RISK_LIMIT3,
				0 AS TOTAL_RISK_LIMIT3,
				SUM(CS.ACTION_VALUE) AS SECURE_TOTAL_TAKE,
				SUM(CS.SECUREFUND_TOTAL) AS SECURE_TOTAL_TAKE3,
				0 AS SECURE_TOTAL_GIVE,
				0 AS SECURE_TOTAL_GIVE3,
				CS.CONSUMER_ID,
				CS.MONEY_CAT OTHER_MONEY
			FROM 
				#attributes.dsn#.COMPANY_SECUREFUND CS
			WHERE 
				CS.GIVE_TAKE = 0 AND
				CS.OUR_COMPANY_ID=1 AND
				CS.FINISH_DATE > GETDATE() AND
				CS.SECUREFUND_STATUS = 1 AND
                CS.IS_RETURN IS NULL AND --iade edilen teminatlarin risk tutarından dusulmesi gerekir
				CS.CONSUMER_ID IS NOT NULL
			GROUP BY
				CS.CONSUMER_ID,
				CS.MONEY_CAT
		UNION ALL
			SELECT 
				0 AS BORC,
				0 AS BORC3,
				0 AS ALACAK,
				0 AS ALACAK3,
				0 AS BAKIYE,
				0 AS BAKIYE3,
				0 AS VADE_BORC,
				0 AS VADE_ALACAK,
				0 AS VADE_BORC_NEW,
				0 AS VADE_ALACAK_NEW,
				0 AS CEK_ODENMEDI,
				0 AS CEK_ODENMEDI3,
				0 AS CEK_KARSILIKSIZ,
				0 AS CEK_KARSILIKSIZ3,
				0 AS SENET_ODENMEDI,
				0 AS SENET_ODENMEDI3,
				0 AS SENET_KARSILIKSIZ,
				0 AS SENET_KARSILIKSIZ3,
				0 AS FORWARD_SALE_LIMIT,
				0 AS OPEN_ACCOUNT_RISK_LIMIT,
				0 AS TOTAL_RISK_LIMIT,
				0 AS FORWARD_SALE_LIMIT3,
				0 AS OPEN_ACCOUNT_RISK_LIMIT3,
				0 AS TOTAL_RISK_LIMIT3,
				0 AS SECURE_TOTAL_TAKE,
				0 AS SECURE_TOTAL_TAKE3,
				SUM(CS.ACTION_VALUE) AS SECURE_TOTAL_GIVE,
				SUM(CS.SECUREFUND_TOTAL) AS SECURE_TOTAL_GIVE3,
				CS.CONSUMER_ID,
				CS.MONEY_CAT OTHER_MONEY
			FROM 
				#attributes.dsn#.COMPANY_SECUREFUND CS
			WHERE 
				CS.GIVE_TAKE = 1 AND
				CS.OUR_COMPANY_ID=#get_period.our_company_id# AND
				CS.FINISH_DATE > GETDATE() AND
				CS.SECUREFUND_STATUS = 1 AND
                CS.IS_RETURN IS NULL AND --iade edilen teminatlarin risk tutarından dusulmesi gerekir
				CS.CONSUMER_ID IS NOT NULL
	
			GROUP BY
				CS.CONSUMER_ID,
				CS.MONEY_CAT
				) AS Q1
			GROUP BY
				Q1.CONSUMER_ID,
				Q1.OTHER_MONEY

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CARI_ROWS_EMPLOYEE] AS
		SELECT DISTINCT
			CASE WHEN C.TO_EMPLOYEE_ID IS NOT NULL THEN  SUM(C.ACTION_VALUE)ELSE 0 END AS BORC,
			CASE WHEN C.TO_EMPLOYEE_ID IS NOT NULL THEN SUM(C.ACTION_VALUE_2) ELSE 0 END AS BORC2,
			CASE WHEN C.TO_EMPLOYEE_ID IS NOT NULL THEN SUM(ISNULL(OTHER_CASH_ACT_VALUE,0))  ELSE 0 END AS BORC3,
			CASE WHEN C.FROM_EMPLOYEE_ID IS NOT NULL THEN SUM(C.ACTION_VALUE) ELSE 0 END AS ALACAK,
			CASE WHEN C.FROM_EMPLOYEE_ID IS NOT NULL THEN SUM(C.ACTION_VALUE_2)  ELSE 0 END AS ALACAK2,
			CASE WHEN C.FROM_EMPLOYEE_ID IS NOT NULL THEN SUM(ISNULL(OTHER_CASH_ACT_VALUE,0)) ELSE 0 END AS ALACAK3,	
			CASE WHEN C.TO_EMPLOYEE_ID IS NOT NULL THEN C.TO_EMPLOYEE_ID ELSE C.FROM_EMPLOYEE_ID END AS EMPLOYEE_ID,				
			OTHER_MONEY,
			CASE WHEN DATEDIFF(day,ACTION_DATE,ISNULL(DUE_DATE,ACTION_DATE)) = 0 THEN 1 ELSE  DATEDIFF(day,ACTION_DATE,ISNULL(DUE_DATE,ACTION_DATE)) END AS DATE_DIFF,
            CASE WHEN DATEDIFF(day,ISNULL(DUE_DATE,ACTION_DATE),GETDATE()) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(DUE_DATE,ACTION_DATE),GETDATE()) END AS DUE_DATE_DIFF,
			ACTION_DATE,
			DUE_DATE,
			PROJECT_ID,
            SUBSCRIPTION_ID,
			ACC_TYPE_ID,
            ISNULL(TO_BRANCH_ID,FROM_BRANCH_ID) BRANCH_ID,
			C.TO_EMPLOYEE_ID,
			C.FROM_EMPLOYEE_ID
		FROM
			CARI_ROWS C
		WHERE
			(C.TO_EMPLOYEE_ID IS NOT NULL) OR ( C.FROM_EMPLOYEE_ID IS NOT NULL)
		GROUP BY
			C.TO_EMPLOYEE_ID,
			C.FROM_EMPLOYEE_ID,
			OTHER_MONEY,
			ACTION_DATE,
			DUE_DATE,
			PROJECT_ID,
            SUBSCRIPTION_ID,
			ACC_TYPE_ID,
            ISNULL(TO_BRANCH_ID,FROM_BRANCH_ID)

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EMPLOYEE_REMAINDER] AS
			SELECT
				EMPLOYEE_ID, 
				ROUND(SUM(BORC-ALACAK),5) AS BAKIYE, 
				ROUND(SUM(BORC2-ALACAK2),5) AS BAKIYE2, 
				SUM(BORC) AS BORC,
				SUM(BORC2) AS BORC2,
				SUM(ALACAK) AS ALACAK,
				SUM(ALACAK2) AS ALACAK2,
				CASE WHEN SUM(BORC)= 0 THEN SUM((BORC*DATE_DIFF)) ELSE ROUND((SUM((BORC*DATE_DIFF))/SUM(BORC)),0) END AS VADE_BORC,
				CASE WHEN SUM(ALACAK)= 0 THEN SUM((ALACAK*DATE_DIFF)) ELSE ROUND((SUM((ALACAK*DATE_DIFF))/SUM(ALACAK)),0) END AS VADE_ALACAK,
				ACC_TYPE_ID
			FROM
				CARI_ROWS_EMPLOYEE
			GROUP BY
				EMPLOYEE_ID,
				ACC_TYPE_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EMPLOYEE_REMAINDER_MONEY] AS
			SELECT
				EMPLOYEE_ID, 
				SUM(BORC-ALACAK) AS BAKIYE, 
				SUM(BORC2-ALACAK2) AS BAKIYE2,
				SUM(BORC3-ALACAK3) AS BAKIYE3,
				SUM(BORC) AS BORC,
				SUM(BORC2) AS BORC2,
				SUM(BORC3) AS BORC3,
				SUM(ALACAK) AS ALACAK,
				SUM(ALACAK2) AS ALACAK2,
				SUM(ALACAK3) AS ALACAK3,
				OTHER_MONEY,
				CASE WHEN SUM(BORC3)= 0 THEN SUM((BORC3*DATE_DIFF)) ELSE ROUND((SUM((BORC3*DATE_DIFF))/SUM(BORC3)),0) END AS VADE_BORC3,
				CASE WHEN SUM(ALACAK3)= 0 THEN SUM((ALACAK3*DATE_DIFF)) ELSE ROUND((SUM((ALACAK3*DATE_DIFF))/SUM(ALACAK3)),0) END AS VADE_ALACAK3,
				ACC_TYPE_ID
			FROM
				CARI_ROWS_EMPLOYEE
			GROUP BY
				EMPLOYEE_ID,
				OTHER_MONEY,
				ACC_TYPE_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EMPLOYEE_REMAINDER_PROJECT] AS
			SELECT
				EMPLOYEE_ID, 
				PROJECT_ID,
				SUM(BORC-ALACAK) AS BAKIYE, 
				SUM(BORC) AS BORC,
				SUM(BORC2) AS BORC2,
				SUM(ALACAK) AS ALACAK,
				SUM(ALACAK2) AS ALACAK2,
				CASE WHEN SUM(BORC)= 0 THEN SUM((BORC*DATE_DIFF)) ELSE ROUND((SUM((BORC*DATE_DIFF))/SUM(BORC)),0) END AS VADE_BORC,
				CASE WHEN SUM(ALACAK)= 0 THEN SUM((ALACAK*DATE_DIFF)) ELSE ROUND((SUM((ALACAK*DATE_DIFF))/SUM(ALACAK)),0) END AS VADE_ALACAK,
				ACC_TYPE_ID
			FROM
				CARI_ROWS_EMPLOYEE
			GROUP BY
				EMPLOYEE_ID,
				PROJECT_ID,
				ACC_TYPE_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EMPLOYEE_REMAINDER_MONEY_PROJECT] AS
			SELECT
				EMPLOYEE_ID, 
				SUM(BORC-ALACAK) AS BAKIYE, 
				SUM(BORC2-ALACAK2) AS BAKIYE2,
				SUM(BORC3-ALACAK3) AS BAKIYE3,
				SUM(BORC) AS BORC,
				SUM(BORC2) AS BORC2,
				SUM(BORC3) AS BORC3,
				SUM(ALACAK) AS ALACAK,
				SUM(ALACAK2) AS ALACAK2,
				SUM(ALACAK3) AS ALACAK3,
				OTHER_MONEY,
				PROJECT_ID,
				CASE WHEN SUM(BORC3)= 0 THEN SUM((BORC3*DATE_DIFF)) ELSE ROUND((SUM((BORC3*DATE_DIFF))/SUM(BORC3)),0) END AS VADE_BORC3,
				CASE WHEN SUM(ALACAK3)= 0 THEN SUM((ALACAK3*DATE_DIFF)) ELSE ROUND((SUM((ALACAK3*DATE_DIFF))/SUM(ALACAK3)),0) END AS VADE_ALACAK3,
				ACC_TYPE_ID
			FROM
				CARI_ROWS_EMPLOYEE
			GROUP BY
				EMPLOYEE_ID,
				OTHER_MONEY,
				PROJECT_ID,
				ACC_TYPE_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EMPLOYEE_REMAINDER_BRANCH] AS
			SELECT
				EMPLOYEE_ID,
				BRANCH_ID,
				ROUND(SUM(BORC-ALACAK),5) AS BAKIYE, 
				ROUND(SUM(BORC2-ALACAK2),5) AS BAKIYE2,
				ROUND(SUM(BORC),5) AS BORC,
				ROUND(SUM(BORC2),5) AS BORC2,
				ROUND(SUM(ALACAK),5) AS ALACAK,
				ROUND(SUM(ALACAK2),5) AS ALACAK2,
				CASE WHEN SUM(BORC)= 0 THEN SUM((BORC*DATE_DIFF)) ELSE ROUND((SUM((BORC*DATE_DIFF))/SUM(BORC)),0) END AS VADE_BORC,
				CASE WHEN SUM(ALACAK)= 0 THEN SUM((ALACAK*DATE_DIFF)) ELSE ROUND((SUM((ALACAK*DATE_DIFF))/SUM(ALACAK)),0) END AS VADE_ALACAK,	
				CASE WHEN SUM(BORC)= 0 THEN SUM((BORC*DUE_DATE_DIFF)) ELSE ROUND((SUM((BORC*DUE_DATE_DIFF))/SUM(BORC)),0) END AS VADE_BORC_NEW,
				CASE WHEN SUM(ALACAK)= 0 THEN SUM((ALACAK*DUE_DATE_DIFF)) ELSE ROUND((SUM((ALACAK*DUE_DATE_DIFF))/SUM(ALACAK)),0) END AS VADE_ALACAK_NEW
			FROM
				CARI_ROWS_EMPLOYEE
			GROUP BY
				EMPLOYEE_ID,
				BRANCH_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EMPLOYEE_REMAINDER_MONEY_BRANCH] AS
			SELECT
				EMPLOYEE_ID, 
				BRANCH_ID,
				SUM(BORC-ALACAK) AS BAKIYE, 
				SUM(BORC2-ALACAK2) AS BAKIYE2,
				SUM(BORC3-ALACAK3) AS BAKIYE3,
				SUM(BORC) AS BORC,
				SUM(BORC2) AS BORC2,
				SUM(BORC3) AS BORC3,
				SUM(ALACAK) AS ALACAK,
				SUM(ALACAK2) AS ALACAK2,
				SUM(ALACAK3) AS ALACAK3,
				OTHER_MONEY,
				CASE WHEN SUM(BORC3)= 0 THEN SUM((BORC3*DATE_DIFF)) ELSE ROUND((SUM((BORC3*DATE_DIFF))/SUM(BORC3)),0) END AS VADE_BORC3,
				CASE WHEN SUM(ALACAK3)= 0 THEN SUM((ALACAK3*DATE_DIFF)) ELSE ROUND((SUM((ALACAK3*DATE_DIFF))/SUM(ALACAK3)),0) END AS VADE_ALACAK3,
				CASE WHEN SUM(BORC3)= 0 THEN SUM((BORC3*DUE_DATE_DIFF)) ELSE ROUND((SUM((BORC3*DUE_DATE_DIFF))/SUM(BORC3)),0) END AS VADE_BORC_NEW3,
				CASE WHEN SUM(ALACAK3)= 0 THEN SUM((ALACAK3*DUE_DATE_DIFF)) ELSE ROUND((SUM((ALACAK3*DUE_DATE_DIFF))/SUM(ALACAK3)),0) END AS VADE_ALACAK_NEW3
			FROM
				CARI_ROWS_EMPLOYEE
			GROUP BY
				EMPLOYEE_ID,
				BRANCH_ID,
				OTHER_MONEY

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EMPLOYEE_REMAINDER_MONEY_PROJECT_BRANCH] AS
			SELECT
				EMPLOYEE_ID, 
				OTHER_MONEY,
				PROJECT_ID,
				BRANCH_ID,		
				SUM(BORC-ALACAK) AS BAKIYE, 
				SUM(BORC2-ALACAK2) AS BAKIYE2,
				SUM(BORC3-ALACAK3) AS BAKIYE3,
				SUM(BORC) AS BORC,
				SUM(BORC2) AS BORC2,
				SUM(BORC3) AS BORC3,
				SUM(ALACAK) AS ALACAK,
				SUM(ALACAK2) AS ALACAK2,
				SUM(ALACAK3) AS ALACAK3,
				CASE WHEN SUM(BORC3)= 0 THEN SUM((BORC3*DATE_DIFF)) ELSE ROUND((SUM((BORC3*DATE_DIFF))/SUM(BORC3)),0) END AS VADE_BORC3,
				CASE WHEN SUM(ALACAK3)= 0 THEN SUM((ALACAK3*DATE_DIFF)) ELSE ROUND((SUM((ALACAK3*DATE_DIFF))/SUM(ALACAK3)),0) END AS VADE_ALACAK3
			FROM
				CARI_ROWS_EMPLOYEE
			GROUP BY
				EMPLOYEE_ID,
				OTHER_MONEY,
				PROJECT_ID,
				BRANCH_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EMPLOYEE_REMAINDER_PROJECT_BRANCH] AS
			SELECT
				EMPLOYEE_ID, 
				PROJECT_ID,
				BRANCH_ID,
				ROUND(SUM(BORC-ALACAK),5) AS BAKIYE, 
				ROUND(SUM(BORC2-ALACAK2),5) AS BAKIYE2,
				ROUND(SUM(BORC),5) AS BORC,
				ROUND(SUM(BORC2),5) AS BORC2,
				ROUND(SUM(ALACAK),5) AS ALACAK,
				ROUND(SUM(ALACAK2),5) AS ALACAK2,
				CASE WHEN SUM(BORC)= 0 THEN SUM((BORC*DATE_DIFF)) ELSE ROUND((SUM((BORC*DATE_DIFF))/SUM(BORC)),0) END AS VADE_BORC,
				CASE WHEN SUM(ALACAK)= 0 THEN SUM((ALACAK*DATE_DIFF)) ELSE ROUND((SUM((ALACAK*DATE_DIFF))/SUM(ALACAK)),0) END AS VADE_ALACAK	
			FROM
				CARI_ROWS_EMPLOYEE
			GROUP BY
				EMPLOYEE_ID,
				PROJECT_ID,
				BRANCH_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[COMPANY_REMAINDER_SUBSCRIPTION] AS
            SELECT     
                COMPANY_ID, 
                SUBSCRIPTION_ID,
                ROUND(SUM(BORC-ALACAK),5) AS BAKIYE, 
                ROUND(SUM(BORC2-ALACAK2),5) AS BAKIYE2, 
                SUM(BORC) AS BORC,
                SUM(BORC2) AS BORC2,
                SUM(ALACAK) AS ALACAK,
                SUM(ALACAK2) AS ALACAK2,
                CASE WHEN SUM(BORC)= 0 THEN SUM((BORC*DATE_DIFF)) ELSE ROUND((SUM((BORC*DATE_DIFF))/SUM(BORC)),0) END AS VADE_BORC,
                CASE WHEN SUM(ALACAK)= 0 THEN SUM((ALACAK*DATE_DIFF)) ELSE ROUND((SUM((ALACAK*DATE_DIFF))/SUM(ALACAK)),0) END AS VADE_ALACAK
            FROM         
                CARI_ROWS_TOPLAM
            GROUP BY 
                COMPANY_ID, 
                SUBSCRIPTION_ID
</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[COMPANY_REMAINDER_MONEY_SUBSCRIPTION] AS
            SELECT     
                COMPANY_ID, 
                OTHER_MONEY,
                SUBSCRIPTION_ID,
                SUM(BORC-ALACAK) AS BAKIYE, 
                SUM(BORC2-ALACAK2) AS BAKIYE2,
                SUM(BORC3-ALACAK3) AS BAKIYE3,
                SUM(BORC) AS BORC,
                SUM(BORC2) AS BORC2,
                SUM(BORC3) AS BORC3,
                SUM(ALACAK) AS ALACAK,
                SUM(ALACAK2) AS ALACAK2,
                SUM(ALACAK3) AS ALACAK3,
                CASE WHEN SUM(BORC3)= 0 THEN SUM((BORC3*DATE_DIFF)) ELSE ROUND((SUM((BORC3*DATE_DIFF))/SUM(BORC3)),0) END AS VADE_BORC3,
                CASE WHEN SUM(ALACAK3)= 0 THEN SUM((ALACAK3*DATE_DIFF)) ELSE ROUND((SUM((ALACAK3*DATE_DIFF))/SUM(ALACAK3)),0) END AS VADE_ALACAK3
            FROM         
                CARI_ROWS_TOPLAM
            GROUP BY 
                COMPANY_ID, 	
                OTHER_MONEY,
                SUBSCRIPTION_ID 
</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[COMPANY_REMAINDER_ACC_TYPE] AS
        SELECT     
            COMPANY_ID, 
            ACC_TYPE_ID,
            ROUND(SUM(BORC-ALACAK),5) AS BAKIYE, 
            ROUND(SUM(BORC2-ALACAK2),5) AS BAKIYE2, 
            SUM(BORC) AS BORC,
            SUM(BORC2) AS BORC2,
            SUM(ALACAK) AS ALACAK,
            SUM(ALACAK2) AS ALACAK2,
            CASE WHEN SUM(BORC)= 0 THEN SUM((BORC*DATE_DIFF)) ELSE ROUND((SUM((BORC*DATE_DIFF))/SUM(BORC)),0) END AS VADE_BORC,
            CASE WHEN SUM(ALACAK)= 0 THEN SUM((ALACAK*DATE_DIFF)) ELSE ROUND((SUM((ALACAK*DATE_DIFF))/SUM(ALACAK)),0) END AS VADE_ALACAK
        FROM         
            CARI_ROWS_TOPLAM
        GROUP BY 
            COMPANY_ID, 
            ACC_TYPE_ID
</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[COMPANY_REMAINDER_MONEY_ACC_TYPE] AS
        SELECT     
            COMPANY_ID, 
            OTHER_MONEY,
            ACC_TYPE_ID,
            SUM(BORC-ALACAK) AS BAKIYE, 
            SUM(BORC2-ALACAK2) AS BAKIYE2,
            SUM(BORC3-ALACAK3) AS BAKIYE3,
            SUM(BORC) AS BORC,
            SUM(BORC2) AS BORC2,
            SUM(BORC3) AS BORC3,
            SUM(ALACAK) AS ALACAK,
            SUM(ALACAK2) AS ALACAK2,
            SUM(ALACAK3) AS ALACAK3,
            CASE WHEN SUM(BORC3)= 0 THEN SUM((BORC3*DATE_DIFF)) ELSE ROUND((SUM((BORC3*DATE_DIFF))/SUM(BORC3)),0) END AS VADE_BORC3,
            CASE WHEN SUM(ALACAK3)= 0 THEN SUM((ALACAK3*DATE_DIFF)) ELSE ROUND((SUM((ALACAK3*DATE_DIFF))/SUM(ALACAK3)),0) END AS VADE_ALACAK3
        FROM         
            CARI_ROWS_TOPLAM
        GROUP BY 
            COMPANY_ID, 	
            OTHER_MONEY,
            ACC_TYPE_ID
</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CONSUMER_REMAINDER_SUBSCRIPTION] AS
        SELECT     
            CONSUMER_ID, 
            SUBSCRIPTION_ID,
            ROUND(SUM(BORC-ALACAK),5) AS BAKIYE, 
            ROUND(SUM(BORC2-ALACAK2),5) AS BAKIYE2, 
            SUM(BORC) AS BORC,
            SUM(BORC2) AS BORC2,
            SUM(ALACAK) AS ALACAK,
            SUM(ALACAK2) AS ALACAK2,
            CASE WHEN SUM(BORC)= 0 THEN SUM((BORC*DATE_DIFF)) ELSE ROUND((SUM((BORC*DATE_DIFF))/SUM(BORC)),0) END AS VADE_BORC,
            CASE WHEN SUM(ALACAK)= 0 THEN SUM((ALACAK*DATE_DIFF)) ELSE ROUND((SUM((ALACAK*DATE_DIFF))/SUM(ALACAK)),0) END AS VADE_ALACAK
        FROM         
            CARI_ROWS_CONSUMER
        GROUP BY 
            CONSUMER_ID, 
            SUBSCRIPTION_ID
</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CONSUMER_REMAINDER_MONEY_SUBSCRIPTION] AS
        SELECT     
            CONSUMER_ID, 
            OTHER_MONEY,
            SUBSCRIPTION_ID,
            SUM(BORC-ALACAK) AS BAKIYE, 
            SUM(BORC2-ALACAK2) AS BAKIYE2,
            SUM(BORC3-ALACAK3) AS BAKIYE3,
            SUM(BORC) AS BORC,
            SUM(BORC2) AS BORC2,
            SUM(BORC3) AS BORC3,
            SUM(ALACAK) AS ALACAK,
            SUM(ALACAK2) AS ALACAK2,
            SUM(ALACAK3) AS ALACAK3,
            CASE WHEN SUM(BORC3)= 0 THEN SUM((BORC3*DATE_DIFF)) ELSE ROUND((SUM((BORC3*DATE_DIFF))/SUM(BORC3)),0) END AS VADE_BORC3,
            CASE WHEN SUM(ALACAK3)= 0 THEN SUM((ALACAK3*DATE_DIFF)) ELSE ROUND((SUM((ALACAK3*DATE_DIFF))/SUM(ALACAK3)),0) END AS VADE_ALACAK3
        FROM         
            CARI_ROWS_CONSUMER
        GROUP BY 
            CONSUMER_ID, 	
            OTHER_MONEY,
            SUBSCRIPTION_ID
</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CONSUMER_REMAINDER_ACC_TYPE] AS
        SELECT
            CONSUMER_ID, 
            ACC_TYPE_ID,
            ROUND(SUM(BORC-ALACAK),5) AS BAKIYE, 
            ROUND(SUM(BORC2-ALACAK2),5) AS BAKIYE2,
            ROUND(SUM(BORC),5) AS BORC,
            ROUND(SUM(BORC2),5) AS BORC2,
            ROUND(SUM(ALACAK),5) AS ALACAK,
            ROUND(SUM(ALACAK2),5) AS ALACAK2,
            CASE WHEN SUM(BORC)= 0 THEN SUM((BORC*DATE_DIFF)) ELSE ROUND((SUM((BORC*DATE_DIFF))/SUM(BORC)),0) END AS VADE_BORC,
            CASE WHEN SUM(ALACAK)= 0 THEN SUM((ALACAK*DATE_DIFF)) ELSE ROUND((SUM((ALACAK*DATE_DIFF))/SUM(ALACAK)),0) END AS VADE_ALACAK	
        FROM
            CARI_ROWS_CONSUMER
        GROUP BY
            CONSUMER_ID,
            ACC_TYPE_ID
</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CONSUMER_REMAINDER_MONEY_ACC_TYPE] AS
        SELECT     
            CONSUMER_ID, 
            OTHER_MONEY,
            ACC_TYPE_ID,
            SUM(BORC-ALACAK) AS BAKIYE, 
            SUM(BORC2-ALACAK2) AS BAKIYE2,
            SUM(BORC3-ALACAK3) AS BAKIYE3,
            SUM(BORC) AS BORC,
            SUM(BORC2) AS BORC2,
            SUM(BORC3) AS BORC3,
            SUM(ALACAK) AS ALACAK,
            SUM(ALACAK2) AS ALACAK2,
            SUM(ALACAK3) AS ALACAK3,
            CASE WHEN SUM(BORC3)= 0 THEN SUM((BORC3*DATE_DIFF)) ELSE ROUND((SUM((BORC3*DATE_DIFF))/SUM(BORC3)),0) END AS VADE_BORC3,
            CASE WHEN SUM(ALACAK3)= 0 THEN SUM((ALACAK3*DATE_DIFF)) ELSE ROUND((SUM((ALACAK3*DATE_DIFF))/SUM(ALACAK3)),0) END AS VADE_ALACAK3
        FROM         
            CARI_ROWS_CONSUMER
        GROUP BY 
            CONSUMER_ID, 	
            OTHER_MONEY,
            ACC_TYPE_ID
</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EMPLOYEE_REMAINDER_SUBSCRIPTION] AS
        SELECT
            EMPLOYEE_ID, 
            SUBSCRIPTION_ID,
            SUM(BORC-ALACAK) AS BAKIYE, 
            SUM(BORC) AS BORC,
            SUM(BORC2) AS BORC2,
            SUM(ALACAK) AS ALACAK,
            SUM(ALACAK2) AS ALACAK2,
            CASE WHEN SUM(BORC)= 0 THEN SUM((BORC*DATE_DIFF)) ELSE ROUND((SUM((BORC*DATE_DIFF))/SUM(BORC)),0) END AS VADE_BORC,
            CASE WHEN SUM(ALACAK)= 0 THEN SUM((ALACAK*DATE_DIFF)) ELSE ROUND((SUM((ALACAK*DATE_DIFF))/SUM(ALACAK)),0) END AS VADE_ALACAK,
            ACC_TYPE_ID
        FROM
            CARI_ROWS_EMPLOYEE
        GROUP BY
            EMPLOYEE_ID,
            SUBSCRIPTION_ID,
            ACC_TYPE_ID
</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[EMPLOYEE_REMAINDER_MONEY_SUBSCRIPTION] AS
        SELECT
            EMPLOYEE_ID, 
            SUM(BORC-ALACAK) AS BAKIYE, 
            SUM(BORC2-ALACAK2) AS BAKIYE2,
            SUM(BORC3-ALACAK3) AS BAKIYE3,
            SUM(BORC) AS BORC,
            SUM(BORC2) AS BORC2,
            SUM(BORC3) AS BORC3,
            SUM(ALACAK) AS ALACAK,
            SUM(ALACAK2) AS ALACAK2,
            SUM(ALACAK3) AS ALACAK3,
            OTHER_MONEY,
            SUBSCRIPTION_ID,
            CASE WHEN SUM(BORC3)= 0 THEN SUM((BORC3*DATE_DIFF)) ELSE ROUND((SUM((BORC3*DATE_DIFF))/SUM(BORC3)),0) END AS VADE_BORC3,
            CASE WHEN SUM(ALACAK3)= 0 THEN SUM((ALACAK3*DATE_DIFF)) ELSE ROUND((SUM((ALACAK3*DATE_DIFF))/SUM(ALACAK3)),0) END AS VADE_ALACAK3,
            ACC_TYPE_ID
        FROM
            CARI_ROWS_EMPLOYEE
        GROUP BY
            EMPLOYEE_ID,
            OTHER_MONEY,
            SUBSCRIPTION_ID,
            ACC_TYPE_ID
</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_ACCOUNT_CARD] AS
			SELECT 
				ACC.ACTION_DATE,
				ACC.BILL_NO,
				ACC.CARD_CAT_ID,
				ACC.CARD_TYPE,
				ACC.CARD_TYPE_NO,	
				AP.ACCOUNT_NAME,
				AP.IFRS_CODE AS ACC_IFRS_CODE,
				AP.IFRS_NAME,
				ACC.PAPER_NO,
				ACC.ACTION_TYPE,
				ACC.CARD_DETAIL,
				ACC.IS_COMPOUND,
				ACR.*
			FROM
				ACCOUNT_CARD ACC,
				ACCOUNT_CARD_ROWS ACR,
				ACCOUNT_PLAN AP
			WHERE 
				ACR.CARD_ID=ACC.CARD_ID AND
				AP.ACCOUNT_CODE=ACR.ACCOUNT_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_ACC_CODE_TOTAL_DAILY] AS
			SELECT 
				SUM(AMOUNT) AS AMOUNT_TOTAL,
				SUM(ISNULL(AMOUNT_2,0)) AS AMOUNT_TOTAL_2,
				BA,
				ACTION_DATE,
				ACCOUNT_ID
			FROM	
				GET_ACCOUNT_CARD
			GROUP BY 
				ACCOUNT_ID,
				ACTION_DATE,
				BA

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_ACCOUNT_CARD_TOTAL_DAILY] AS
			SELECT 
				SUM(AMOUNT) AS AMOUNT_TOTAL,
				BA,
				ACTION_DATE
			FROM
				GET_ACCOUNT_CARD
			GROUP BY 
				ACTION_DATE,
				BA

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCK] AS
			SELECT
				SUM(SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK, 
				S.PRODUCT_ID, 
				S.STOCK_ID, 
				S.STOCK_CODE, 
				S.PROPERTY,
				S.STOCK_STATUS, 
				S.BARCOD
			FROM
				#attributes.dsn#_product.STOCKS S,
				STOCKS_ROW SR
			WHERE
				S.STOCK_ID = SR.STOCK_ID	
			GROUP BY
				S.PRODUCT_ID,
				S.STOCK_ID,
				S.STOCK_CODE,
				S.PROPERTY,
				S.STOCK_STATUS, 
				S.BARCOD

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_PRODUCT_STOCK] AS
			SELECT
				SUM(PRODUCT_STOCK) AS PRODUCT_TOTAL_STOCK, 
				PRODUCT_ID
			FROM
				GET_STOCK GS
			GROUP BY
				PRODUCT_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_SCEN_EXPENSE] AS

			SELECT
				-1 AS SCEN_TYPE_ID, 
				C.CHEQUE_DUEDATE AS TARIH, 
				SUM(C.CHEQUE_VALUE*(SM.RATE2/SM.RATE1)) AS CHEQUE_TOTAL,
				0 VOUCHER_TOTAL,
				0 CC_EXPENSE_TOTAL,
				0 CREDIT_CONTRACT_TOTAL,
				0 BANK_ORDER_TOTAL,
				0 BUDGET_TOTAL,
				0 SCEN_EXPENSE_TOTAL
			FROM
				CHEQUE C,
				SETUP_MONEY	SM
			WHERE
				C.CHEQUE_STATUS_ID IN (6) AND
				C.CURRENCY_ID = SM.MONEY
			GROUP BY
				C.CHEQUE_DUEDATE
		
			UNION ALL
			
			SELECT
				-2  AS SCEN_TYPE_ID, 
				V.VOUCHER_DUEDATE AS TARIH, 
				0 CHEQUE_TOTAL,
				SUM(V.VOUCHER_VALUE*(SM.RATE2/SM.RATE1)) VOUCHER_TOTAL,
				0 CC_EXPENSE_TOTAL,
				0 CREDIT_CONTRACT_TOTAL,
				0 BANK_ORDER_TOTAL,
				0 BUDGET_TOTAL,
				0 SCEN_EXPENSE_TOTAL
			FROM
				VOUCHER V,
				SETUP_MONEY	SM
			WHERE
				V.VOUCHER_STATUS_ID IN (6) AND
				V.CURRENCY_ID = SM.MONEY
			GROUP BY
				V.VOUCHER_DUEDATE
			UNION ALL
		
			SELECT
				-3 AS SCEN_TYPE_ID,
				DATEADD(d,ISNULL(CC.PAYMENT_DAY,0),CER.ACC_ACTION_DATE) AS TARIH,
				0 CHEQUE_TOTAL,
				0 VOUCHER_TOTAL,
				(CER.INSTALLMENT_AMOUNT-(ISNULL((SELECT SUM(CCBER.CLOSED_AMOUNT) FROM #attributes.dsn#_#get_period.our_company_id#.CREDIT_CARD_BANK_EXPENSE_RELATIONS CCBER WHERE CCBER.CC_BANK_EXPENSE_ROWS_ID = CER.CC_BANK_EXPENSE_ROWS_ID),0)))*(CEM.RATE2/CEM.RATE1) CC_EXPENSE_TOTAL,
				0 CREDIT_CONTRACT_TOTAL,
				0 BANK_ORDER_TOTAL,
				0 BUDGET_TOTAL,
				0 SCEN_EXPENSE_TOTAL
			FROM
				#attributes.dsn#_#get_period.our_company_id#.CREDIT_CARD CC,
				#attributes.dsn#_#get_period.our_company_id#.CREDIT_CARD_BANK_EXPENSE CE,
				#attributes.dsn#_#get_period.our_company_id#.CREDIT_CARD_BANK_EXPENSE_ROWS CER,
				#attributes.dsn#_#get_period.our_company_id#.CREDIT_CARD_BANK_EXPENSE_MONEY CEM
			WHERE
				CE.CREDITCARD_EXPENSE_ID = CEM.ACTION_ID AND
				CEM.MONEY_TYPE = CE.ACTION_CURRENCY_ID AND
				CC.CREDITCARD_ID = CE.CREDITCARD_ID AND
				CE.CREDITCARD_EXPENSE_ID = CER.CREDITCARD_EXPENSE_ID AND
				CER.INSTALLMENT_AMOUNT > 0
			GROUP BY
				CER.ACC_ACTION_DATE,
				CC.PAYMENT_DAY,
				CER.CC_BANK_EXPENSE_ROWS_ID,
				CER.INSTALLMENT_AMOUNT,
				CEM.RATE2,
				CEM.RATE1
			UNION ALL
			
			SELECT
				-4 AS SCEN_TYPE_ID,
				PROCESS_DATE AS TARIH,
				0 CHEQUE_TOTAL,
				0 VOUCHER_TOTAL,
				0 CC_EXPENSE_TOTAL,
				(TOTAL_PRICE * (SM.RATE2 / SM.RATE1)) CREDIT_CONTRACT_TOTAL,
				0 BANK_ORDER_TOTAL,
				0 BUDGET_TOTAL,
				0 SCEN_EXPENSE_TOTAL
			FROM
				#attributes.dsn#_#get_period.our_company_id#.CREDIT_CONTRACT_ROW CC,
				#attributes.dsn#_#get_period.our_company_id#.CREDIT_CONTRACT C,
				SETUP_MONEY SM
			WHERE
				C.CREDIT_CONTRACT_ID = CC.CREDIT_CONTRACT_ID AND
				C.IS_SCENARIO = 1 AND
				CREDIT_CONTRACT_TYPE = 1 AND
				TOTAL_PRICE > 0 AND
			
				((CC.OTHER_MONEY = 'YTL' AND SM.MONEY = 'TL') OR SM.MONEY = CC.OTHER_MONEY) AND
				
				CC.IS_PAID = 0 AND
				(CC.IS_PAID_ROW  = 0 OR CC.IS_PAID_ROW IS NULL)
			UNION ALL
			SELECT
				-5 AS SCEN_TYPE_ID,
				PAYMENT_DATE AS TARIH,
				0 CHEQUE_TOTAL,
				0 VOUCHER_TOTAL,
				0 CC_EXPENSE_TOTAL,
				0 CREDIT_CONTRACT_TOTAL,
				SUM(BON.ACTION_VALUE*(SM.RATE2/SM.RATE1)) AS BANK_ORDER_TOTAL,
				0 BUDGET_TOTAL,
				0 SCEN_EXPENSE_TOTAL
			FROM
				BANK_ORDERS BON,
				SETUP_MONEY SM
			WHERE
				(BON.IS_PAID = 0 OR BON.IS_PAID IS NULL)
				AND BON.ACTION_MONEY = SM.MONEY
				AND BANK_ORDER_TYPE = 250
			GROUP BY
				PAYMENT_DATE,
				SM.RATE2, 
				SM.RATE1
			UNION ALL
			SELECT
				-6 AS SCEN_TYPE_ID,
				BPR.PLAN_DATE AS TARIH,
				0 CHEQUE_TOTAL,
				0 VOUCHER_TOTAL,
				0 CC_EXPENSE_TOTAL,
				0 CREDIT_CONTRACT_TOTAL,
				0 BANK_ORDER_TOTAL,
				SUM(BPR.OTHER_ROW_TOTAL_EXPENSE*(SM.RATE2/SM.RATE1)) AS BUDGET_TOTAL,
				0 SCEN_EXPENSE_TOTAL
			FROM
				#attributes.dsn#.BUDGET_PLAN BP,
				#attributes.dsn#.BUDGET_PLAN_ROW BPR,
				SETUP_MONEY SM
			WHERE
				BP.BUDGET_PLAN_ID = BPR.BUDGET_PLAN_ID 
				AND BP.OTHER_MONEY = SM.MONEY
				AND BP.IS_SCENARIO = 1
			GROUP BY
				BPR.PLAN_DATE,
				SM.RATE2, 
				SM.RATE1
			UNION ALL
			SELECT
				SE.SCENARIO_TYPE_ID AS SCEN_TYPE_ID, 
				SE.START_DATE AS TARIH,
				0 CHEQUE_TOTAL,
				0 VOUCHER_TOTAL,
				0 CC_EXPENSE_TOTAL,		
				0 CREDIT_CONTRACT_TOTAL,
				0 BANK_ORDER_TOTAL,
				0 BUDGET_TOTAL,
				SUM(SE.PERIOD_VALUE*(SM.RATE2/SM.RATE1)) SCEN_EXPENSE_TOTAL
			FROM
				#attributes.dsn#_#get_period.our_company_id#.SCEN_EXPENSE_PERIOD_ROWS SE, 
				SETUP_MONEY SM
			WHERE
				SE.TYPE = 0 AND
				SM.MONEY = SE.PERIOD_CURRENCY AND
				SE.SCEN_EXPENSE_STATUS = 1
			GROUP BY
				SE.START_DATE,
				SE.PERIOD_VALUE, 
				SM.RATE2, 
				SM.RATE1,
				SE.SCENARIO_TYPE_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_SCEN_INCOME] AS
			SELECT
				-1 AS SCEN_TYPE_ID, 
				C.CHEQUE_DUEDATE AS TARIH, 
				SUM(C.CHEQUE_VALUE*(SM.RATE2/SM.RATE1)) AS CHEQUE_TOTAL,
				0 VOUCHER_TOTAL,
				0 CC_BANK_PAYM,		
				0 CREDIT_CONTRACT_TOTAL,
				0 BANK_ORDER_TOTAL,
				0 BUDGET_TOTAL,
				0 SCEN_EXPENSE_TOTAL
			FROM
				CHEQUE C,
				SETUP_MONEY	SM
			WHERE
				C.CHEQUE_STATUS_ID IN (1,2,13) AND
				C.CURRENCY_ID = SM.MONEY
			GROUP BY
				C.CHEQUE_DUEDATE
		UNION ALL
			SELECT
				-2 AS SCEN_TYPE_ID, 
				V.VOUCHER_DUEDATE AS TARIH,
				0 CHEQUE_TOTAL,
				SUM(V.VOUCHER_VALUE*(SM.RATE2/SM.RATE1)) VOUCHER_TOTAL,
				0 CC_BANK_PAYM,		
				0 CREDIT_CONTRACT_TOTAL,
				0 BANK_ORDER_TOTAL,
				0 BUDGET_TOTAL,
				0 SCEN_EXPENSE_TOTAL
			FROM
				VOUCHER V,
				SETUP_MONEY	SM
			WHERE
				V.VOUCHER_STATUS_ID IN (1,2,13) AND
				V.CURRENCY_ID = SM.MONEY
			GROUP BY
				V.VOUCHER_DUEDATE
		UNION ALL
			SELECT
				-3 AS SCEN_TYPE_ID,
				CR.BANK_ACTION_DATE AS TARIH,
				0 CHEQUE_TOTAL,
				0 VOUCHER_TOTAL,
				SUM((CASE WHEN CCP.ACTION_TYPE_ID = 245 THEN -CR.AMOUNT ELSE CR.AMOUNT END)) AS CC_BANK_PAYM,
				0 CREDIT_CONTRACT_TOTAL,
				0 BANK_ORDER_TOTAL,
				0 BUDGET_TOTAL,
				0 SCEN_EXPENSE_TOTAL
			FROM
				#attributes.dsn#_#get_period.our_company_id#.CREDIT_CARD_BANK_PAYMENTS_ROWS CR,
				#attributes.dsn#_#get_period.our_company_id#.CREDIT_CARD_BANK_PAYMENTS CCP
			WHERE
				CR.CREDITCARD_PAYMENT_ID = CCP.CREDITCARD_PAYMENT_ID AND
				ISNULL(CCP.IS_VOID,0) <> 1 AND
				ISNULL(CCP.RELATION_CREDITCARD_PAYMENT_ID,0) NOT IN (SELECT CCBP.CREDITCARD_PAYMENT_ID FROM #attributes.dsn#_#get_period.our_company_id#.CREDIT_CARD_BANK_PAYMENTS CCBP WHERE ISNULL(CCBP.IS_VOID,0) = 1) AND
				CR.BANK_ACTION_ID IS NULL AND
				CR.AMOUNT > 0
			GROUP BY
				CR.BANK_ACTION_DATE
		UNION ALL
			SELECT
				-4 AS SCEN_TYPE_ID,
				PROCESS_DATE AS TARIH,
				0 CHEQUE_TOTAL,
				0 VOUCHER_TOTAL,
				0 CC_BANK_PAYM,		
				(TOTAL_PRICE * (SM.RATE2 / SM.RATE1)) CREDIT_CONTRACT_TOTAL,
				0 BANK_ORDER_TOTAL,
				0 BUDGET_TOTAL,
				0 SCEN_EXPENSE_TOTAL
			FROM
				#attributes.dsn#_#get_period.our_company_id#.CREDIT_CONTRACT_ROW CC,
				#attributes.dsn#_#get_period.our_company_id#.CREDIT_CONTRACT C,
				SETUP_MONEY SM
			WHERE
				C.CREDIT_CONTRACT_ID = CC.CREDIT_CONTRACT_ID AND
				C.IS_SCENARIO = 1 AND
				CREDIT_CONTRACT_TYPE = 2 AND
				TOTAL_PRICE > 0 AND
			
				((CC.OTHER_MONEY = 'YTL' AND SM.MONEY = 'TL') OR SM.MONEY = CC.OTHER_MONEY) AND
				
				CC.IS_PAID = 0 AND
				(CC.IS_PAID_ROW  = 0 OR CC.IS_PAID_ROW IS NULL)
		UNION ALL
			SELECT
				-5 AS SCEN_TYPE_ID,
				PAYMENT_DATE AS TARIH,
				0 CHEQUE_TOTAL,
				0 VOUCHER_TOTAL,
				0 CC_EXPENSE_TOTAL,
				0 CREDIT_CONTRACT_TOTAL,
				SUM(BON.ACTION_VALUE*(SM.RATE2/SM.RATE1)) AS BANK_ORDER_TOTAL,
				0 BUDGET_TOTAL,
				0 SCEN_EXPENSE_TOTAL
			FROM
				BANK_ORDERS BON,
				SETUP_MONEY SM
			WHERE
				(BON.IS_PAID = 0 OR BON.IS_PAID IS NULL)
				AND BON.ACTION_MONEY = SM.MONEY
				AND BANK_ORDER_TYPE = 251
			GROUP BY
				PAYMENT_DATE,
				SM.RATE2, 
				SM.RATE1
		UNION ALL
			SELECT
				-6 AS SCEN_TYPE_ID,
				BPR.PLAN_DATE AS TARIH,
				0 CHEQUE_TOTAL,
				0 VOUCHER_TOTAL,
				0 CC_EXPENSE_TOTAL,
				0 CREDIT_CONTRACT_TOTAL,
				0 BANK_ORDER_TOTAL,
				SUM(BPR.OTHER_ROW_TOTAL_INCOME*(SM.RATE2/SM.RATE1)) AS BUDGET_TOTAL,
				0 SCEN_EXPENSE_TOTAL
			FROM
				#attributes.dsn#.BUDGET_PLAN BP,
				#attributes.dsn#.BUDGET_PLAN_ROW BPR,
				SETUP_MONEY SM
			WHERE
				BP.BUDGET_PLAN_ID = BPR.BUDGET_PLAN_ID 
				AND BP.OTHER_MONEY = SM.MONEY
				AND BP.IS_SCENARIO = 1
			GROUP BY
				BPR.PLAN_DATE,
				SM.RATE2, 
				SM.RATE1
		UNION ALL
			SELECT
				SE.SCENARIO_TYPE_ID AS SCEN_TYPE_ID, 
				SE.START_DATE AS TARIH, 
				0 CHEQUE_TOTAL,
				0 VOUCHER_TOTAL,
				0 CC_BANK_PAYM,		
				0 CREDIT_CONTRACT_TOTAL,
				0 BANK_ORDER_TOTAL,
				0 BUDGET_TOTAL,
				SUM(SE.PERIOD_VALUE * (SM.RATE2 / SM.RATE1)) SCEN_EXPENSE_TOTAL
			FROM
				#attributes.dsn#_#get_period.our_company_id#.SCEN_EXPENSE_PERIOD_ROWS SE, 
				SETUP_MONEY SM
			WHERE
				SE.TYPE = 1 AND 
				SE.SCEN_EXPENSE_STATUS = 1 AND
				SM.MONEY = SE.PERIOD_CURRENCY
			GROUP BY
				SE.START_DATE, 
				SE.PERIOD_VALUE, 
				SM.RATE2, 
				SM.RATE1,
				SE.SCENARIO_TYPE_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_SCEN_LAST] AS
			SELECT
				SE.SCEN_TYPE_ID,
				SE.TARIH AS THEDATE,
				SUM(SE.CHEQUE_TOTAL) ALACAK_CHEQUE_TOTAL,
				SUM(SE.VOUCHER_TOTAL) ALACAK_VOUCHER_TOTAL,
				SUM(SE.CC_EXPENSE_TOTAL) ALACAK_CC_TOTAL,		
				SUM(SE.CREDIT_CONTRACT_TOTAL) ALACAK_CREDIT_CONTRACT_TOTAL,
				SUM(SE.BANK_ORDER_TOTAL) ALACAK_BANK_ORDER_TOTAL,
				SUM(SE.SCEN_EXPENSE_TOTAL) ALACAK_SCEN_EXPENSE_TOTAL,
				SUM(SE.BUDGET_TOTAL) ALACAK_BUDGET_TOTAL,
				0 BORC_CHEQUE_TOTAL,
				0 BORC_VOUCHER_TOTAL,
				0 BORC_CC_TOTAL,		
				0 BORC_CREDIT_CONTRACT_TOTAL,
				0 BORC_BANK_ORDER_TOTAL,
				0 BORC_SCEN_EXPENSE_TOTAL,
				0 BORC_BUDGET_TOTAL
			FROM
				GET_SCEN_EXPENSE SE
			GROUP BY
				SE.TARIH,
				SE.SCEN_TYPE_ID
		UNION ALL
			SELECT
				SI.SCEN_TYPE_ID,
				SI.TARIH AS THEDATE,
				0 ALACAK_CHEQUE_TOTAL,
				0 ALACAK_VOUCHER_TOTAL,
				0 ALACAK_CC_TOTAL,		
				0 ALACAK_CREDIT_CONTRACT_TOTAL,
				0 ALACAK_BANK_ORDER_TOTAL,
				0 ALACAK_SCEN_EXPENSE_TOTAL,
				0 ALACAK_BUDGET_TOTAL,
				SUM(SI.CHEQUE_TOTAL) BORC_CHEQUE_TOTAL,
				SUM(SI.VOUCHER_TOTAL) BORC_VOUCHER_TOTAL,
				SUM(SI.CC_BANK_PAYM) BORC_CC_TOTAL,		
				SUM(SI.CREDIT_CONTRACT_TOTAL) BORC_CREDIT_CONTRACT_TOTAL,
				SUM(SI.BANK_ORDER_TOTAL) BORC_BANK_ORDER_TOTAL,
				SUM(SI.SCEN_EXPENSE_TOTAL) BORC_SCEN_EXPENSE_TOTAL,
				SUM(SI.BUDGET_TOTAL) BORC_BUDGET_TOTAL
			FROM
				GET_SCEN_INCOME SI
			GROUP BY
				SI.TARIH, 
				SI.SCEN_TYPE_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_DAILY_SALES] AS
		SELECT
			SUM(AMOUNT) AS TOTAL_AMOUNT,
			I.INVOICE_DATE,
			IR.PRODUCT_ID,
			IR.STOCK_ID,
			I.DEPARTMENT_ID
		FROM
			INVOICE I,
			INVOICE_ROW IR
		WHERE
			I.INVOICE_ID = IR.INVOICE_ID				
			AND I.PURCHASE_SALES=1
			AND INVOICE_CAT <>66
		GROUP BY
			I.INVOICE_DATE,
			I.DEPARTMENT_ID,
			IR.PRODUCT_ID,
			IR.STOCK_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCK_STRATEGY] AS
			(	
				(
				SELECT
					PRODUCT_ID,
					STOCK_ID,
					SUM(MINIMUM_STOCK) AS MINIMUM_STOCK,
					SUM(MAXIMUM_STOCK) AS MAXIMUM_STOCK,
					SUM(REPEAT_STOCK_VALUE) AS REPEAT_STOCK_VALUE,
					SUM(BLOCK_STOCK_VALUE) AS BLOCK_STOCK_VALUE,
					1 AS STRATEGY_TYPE,
					DEPARTMENT_ID,
					PROVISION_TIME,
					IS_LIVE_ORDER,
					MINIMUM_ORDER_STOCK_VALUE,
					MAXIMUM_ORDER_STOCK_VALUE,
					STOCK_ACTION_ID
				FROM
				(
					(
					SELECT
						TOTAL_AMOUNT AS MINIMUM_STOCK,
						0 AS MAXIMUM_STOCK,
						0 AS REPEAT_STOCK_VALUE,
						0 AS BLOCK_STOCK_VALUE,
						SS.PRODUCT_ID,
						SS.STOCK_ID,
						SS.DEPARTMENT_ID,
						SS.PROVISION_TIME,
						SS.IS_LIVE_ORDER,
						SS.MINIMUM_ORDER_STOCK_VALUE,
						SS.MAXIMUM_ORDER_STOCK_VALUE,
						SS.STOCK_ACTION_ID
					FROM
						INVOICE_DAILY_SALES IDS,
						#attributes.dsn#_#get_period.our_company_id#.STOCK_STRATEGY SS 
					WHERE
						IDS.STOCK_ID=SS.STOCK_ID				
						AND DATEDIFF(day,IDS.INVOICE_DATE, getdate()) <= MINIMUM_STOCK
						AND SS.STRATEGY_TYPE=1
					)
				UNION ALL
					(
					SELECT
						0 AS MINIMUM_STOCK,
						TOTAL_AMOUNT AS MAXIMUM_STOCK,
						0 AS REPEAT_STOCK_VALUE,
						0 AS BLOCK_STOCK_VALUE,
						SS.PRODUCT_ID,
						SS.STOCK_ID,
						SS.DEPARTMENT_ID,
						SS.PROVISION_TIME,
						SS.IS_LIVE_ORDER,
						SS.MINIMUM_ORDER_STOCK_VALUE,
						SS.MAXIMUM_ORDER_STOCK_VALUE,
						SS.STOCK_ACTION_ID
					FROM
						INVOICE_DAILY_SALES IDS,
						#attributes.dsn#_#get_period.our_company_id#.STOCK_STRATEGY SS
					WHERE
						IDS.STOCK_ID=SS.STOCK_ID				
						AND DATEDIFF(day,IDS.INVOICE_DATE, getdate()) <= MAXIMUM_STOCK
						AND SS.STRATEGY_TYPE=1
					)
				UNION ALL
					(
					SELECT
						0 AS MINIMUM_STOCK,
						0 AS MAXIMUM_STOCK,
						TOTAL_AMOUNT AS REPEAT_STOCK_VALUE,
						0 AS BLOCK_STOCK_VALUE,
						SS.PRODUCT_ID,
						SS.STOCK_ID,
						SS.DEPARTMENT_ID,
						SS.PROVISION_TIME,
						SS.IS_LIVE_ORDER,
						SS.MINIMUM_ORDER_STOCK_VALUE,
						SS.MAXIMUM_ORDER_STOCK_VALUE,
						SS.STOCK_ACTION_ID
					FROM
						INVOICE_DAILY_SALES IDS,
						#attributes.dsn#_#get_period.our_company_id#.STOCK_STRATEGY SS
					WHERE
						IDS.STOCK_ID=SS.STOCK_ID				
						AND DATEDIFF(day,IDS.INVOICE_DATE, getdate()) <= REPEAT_STOCK_VALUE
						AND SS.STRATEGY_TYPE=1 
					)
				) AS ALL_TABLE
				GROUP BY 
					PRODUCT_ID,
					STOCK_ID,
					DEPARTMENT_ID,
					PROVISION_TIME,
					IS_LIVE_ORDER,
					MINIMUM_ORDER_STOCK_VALUE,
					MAXIMUM_ORDER_STOCK_VALUE,
					STOCK_ACTION_ID
				)
			UNION ALL
				(
				SELECT
					PRODUCT_ID,
					STOCK_ID,
					MINIMUM_STOCK,
					MAXIMUM_STOCK,
					REPEAT_STOCK_VALUE,
					BLOCK_STOCK_VALUE,
					STRATEGY_TYPE,
					DEPARTMENT_ID,
					PROVISION_TIME,
					IS_LIVE_ORDER,
					MINIMUM_ORDER_STOCK_VALUE,
					MAXIMUM_ORDER_STOCK_VALUE,
					STOCK_ACTION_ID
				FROM
					#attributes.dsn#_#get_period.our_company_id#.STOCK_STRATEGY SS
				WHERE
					STRATEGY_TYPE=0
				)
			)

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCKS_ROW_COST] AS
		SELECT 
			(SUM(NET_MALIYET)/COUNT(PRODUCT_ID))  AS MALIYET,
			(SUM(NET_MALIYET_2)/COUNT(PRODUCT_ID))  AS MALIYET_2,
			SUM(STOCK_IN)  AS STOCK_IN,
			SUM(STOCK_OUT)  AS STOCK_OUT,
			UPD_ID,
			PROCESS_DATE,
			PROCESS_TYPE,
			STORE,
			STORE_LOCATION,
			PRODUCT_ID,
			STOCK_ID
		FROM
			GET_ALL_STOCKS_ROW_COST
		GROUP BY
			UPD_ID,
			PROCESS_DATE,
			PROCESS_TYPE,
			STORE,
			STORE_LOCATION,
			PRODUCT_ID,
			STOCK_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_TAX] AS
			SELECT
				SUM(AMOUNT) AS BORC, 
				0 AS ALACAK, 
				DATEPART(MONTH, 
				AC.ACTION_DATE) AS AY
			FROM
				ACCOUNT_CARD_ROWS ACR, 
				ACCOUNT_CARD AC
			WHERE
				AC.CARD_ID = ACR.CARD_ID AND 
				ACR.BA = 0 AND ACR.ACCOUNT_ID LIKE '391%'
			GROUP BY
				DATEPART(MONTH, AC.ACTION_DATE)
		UNION
			SELECT
				0 AS BORC, 
				SUM(AMOUNT) AS ALACAK, 
				DATEPART(MONTH, AC.ACTION_DATE) AS AY
			FROM
				ACCOUNT_CARD_ROWS ACR, 
				ACCOUNT_CARD AC
			WHERE
				AC.CARD_ID = ACR.CARD_ID AND 
				ACR.BA = 1 AND ACR.ACCOUNT_ID LIKE '391%'
			GROUP BY

				DATEPART(MONTH, AC.ACTION_DATE)
		UNION
			SELECT
				SUM(AMOUNT) AS BORC, 
				0 AS ALACAK, 
				DATEPART(MONTH, AC.ACTION_DATE) AS AY
			FROM
				ACCOUNT_CARD_ROWS ACR, 
				ACCOUNT_CARD AC
			WHERE
				AC.CARD_ID = ACR.CARD_ID AND 
				ACR.BA = 0 AND ACR.ACCOUNT_ID LIKE '191%'
			GROUP BY
				DATEPART(MONTH, AC.ACTION_DATE)
		UNION
			SELECT
				0 AS BORC, 
				SUM(AMOUNT) AS ALACAK, 
				DATEPART(MONTH, AC.ACTION_DATE) AS AY
			FROM
				ACCOUNT_CARD_ROWS ACR, 
				ACCOUNT_CARD AC
			WHERE
				AC.CARD_ID = ACR.CARD_ID AND 
				ACR.BA = 1 AND ACR.ACCOUNT_ID LIKE '191%'
			GROUP BY
				DATEPART(MONTH, AC.ACTION_DATE)

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_TAX_LAST] AS
			SELECT
				SUM(BORC - ALACAK) AS BAKIYE,
				SUM(BORC) AS BORC, 
				SUM(ALACAK) AS ALACAK, 
				AY
			FROM
				GET_TAX
			GROUP BY
				AY

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_ROW_SALES_DETAIL] AS
	 SELECT 
		DEPARTMENT_ID, 
		INVOICE_DATE,
		COMPANY_ID,
		NETTOTAL,	
		GROSSTOTAL,
		INVOICE_ID,
		INVOICE_ROW_ID,
		STOCK_ID,
		PRODUCT_ID,
		AMOUNT,
		SALE_EMP,
		(INV_M.RATE2/INV_M.RATE1) AS OTHER_MONEY_RATE,
		ISNULL((SELECT
				TOP 1 (PURCHASE_NET_SYSTEM + PURCHASE_EXTRA_COST_SYSTEM)  
			FROM 
				GET_PRODUCT_COST_PERIOD
			WHERE
				GET_PRODUCT_COST_PERIOD.START_DATE <= INV_TOTAL.INVOICE_DATE
				AND GET_PRODUCT_COST_PERIOD.PRODUCT_ID = INV_TOTAL.PRODUCT_ID
				AND ISNUMERIC(GET_PRODUCT_COST_PERIOD.SPECT_MAIN_ID)=0
			ORDER BY
				GET_PRODUCT_COST_PERIOD.START_DATE DESC,
				GET_PRODUCT_COST_PERIOD.RECORD_DATE DESC
				),0) AS PROD_COST
	FROM
		(
		SELECT	
			I.DEPARTMENT_ID, 
			I.INVOICE_DATE,
			I.COMPANY_ID,
			CASE WHEN (I.NETTOTAL-I.TAXTOTAL+I.SA_DISCOUNT)= 0 THEN IR.NETTOTAL ELSE ((1- I.SA_DISCOUNT/(I.NETTOTAL-I.TAXTOTAL+I.SA_DISCOUNT)) *IR.NETTOTAL) END AS NETTOTAL,	
			CASE WHEN (I.NETTOTAL-I.TAXTOTAL+I.SA_DISCOUNT)= 0 THEN (IR.NETTOTAL + (IR.TAXTOTAL*ISNULL(I.TEVKIFAT_ORAN/100,1) )-(IR.NETTOTAL * ISNULL(I.STOPAJ_ORAN/100,0) )) ELSE (  ( (1- (I.SA_DISCOUNT)/(I.NETTOTAL-I.TAXTOTAL+I.SA_DISCOUNT) ) * IR.NETTOTAL) + (IR.TAXTOTAL*ISNULL(I.TEVKIFAT_ORAN/100,1)) - (IR.NETTOTAL * ISNULL(I.STOPAJ_ORAN/100,0) ) ) END AS GROSSTOTAL,
			I.INVOICE_ID,
			IR.INVOICE_ROW_ID,
			IR.STOCK_ID,
			IR.PRODUCT_ID,
			IR.AMOUNT,
			I.SALE_EMP	
		FROM
			INVOICE I,
			INVOICE_ROW IR
		WHERE
			I.INVOICE_ID=IR.INVOICE_ID
			AND I.INVOICE_CAT IN (48,50,52,53,531,56,58,62,561)
			AND I.IS_IPTAL=0
			AND I.NETTOTAL > 0
		UNION ALL		
			SELECT	
			I.DEPARTMENT_ID, 
			I.INVOICE_DATE,
			I.COMPANY_ID,
			CASE WHEN (I.NETTOTAL-I.TAXTOTAL+I.SA_DISCOUNT)= 0 THEN (-1)*IR.NETTOTAL ELSE ((1- I.SA_DISCOUNT/(I.NETTOTAL-I.TAXTOTAL+I.SA_DISCOUNT)) *IR.NETTOTAL*(-1)) END AS NETTOTAL,
			CASE WHEN (I.NETTOTAL-I.TAXTOTAL+I.SA_DISCOUNT)= 0 THEN  (-1)*(IR.NETTOTAL + (IR.TAXTOTAL*ISNULL(I.TEVKIFAT_ORAN/100,1) )-(IR.NETTOTAL * ISNULL(I.STOPAJ_ORAN/100,0) )) ELSE (-1)*(  ( (1- (I.SA_DISCOUNT)/(I.NETTOTAL-I.TAXTOTAL+I.SA_DISCOUNT) ) * IR.NETTOTAL) + (IR.TAXTOTAL*ISNULL(I.TEVKIFAT_ORAN/100,1)) - (IR.NETTOTAL * ISNULL(I.STOPAJ_ORAN/100,0) ) ) END AS GROSSTOTAL,	
			I.INVOICE_ID,
			IR.INVOICE_ROW_ID,
			IR.STOCK_ID,
			IR.PRODUCT_ID,
			IR.AMOUNT,
			I.SALE_EMP	
		FROM
			INVOICE I,
			INVOICE_ROW IR
		WHERE
			I.INVOICE_ID=IR.INVOICE_ID
			AND I.INVOICE_CAT IN (51,54,55,63)
			AND I.IS_IPTAL=0
			AND I.NETTOTAL > 0
		) AS INV_TOTAL,
		INVOICE_MONEY INV_M,
		#attributes.dsn#.SETUP_PERIOD STP
	WHERE
		INV_M.ACTION_ID=INV_TOTAL.INVOICE_ID
		AND STP.PERIOD_ID=#attributes.period_id# 
        AND INV_M.MONEY_TYPE = ISNULL(STP.OTHER_MONEY,'TL')

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_ROW_POS_SALES_DETAIL] AS 
		SELECT
			I.DEPARTMENT_ID,
			I.INVOICE_DATE,
			I.COMPANY_ID,
			IRP.NETTOTAL,
			IRP.GROSSTOTAL,
			I.INVOICE_ID,
			IRP.INVOICE_ROW_ID INVOICE_POS_ROW_ID,
			IRP.STOCK_ID,
			IRP.PRODUCT_ID,
			IRP.AMOUNT,
			I.SALE_EMP,
			ISNULL(	(SELECT
					TOP 1 (MNY_H.RATE2/MNY_H.RATE1) AS RATE
				FROM 
					#attributes.dsn#.MONEY_HISTORY MNY_H,
					#attributes.dsn#.SETUP_PERIOD SET_PRD
				WHERE 
					SET_PRD.PERIOD_ID=#attributes.period_id#
					AND MNY_H.PERIOD_ID= SET_PRD.PERIOD_ID
					
					AND MNY_H.MONEY = ISNULL(SET_PRD.OTHER_MONEY,'TL')
					
					AND MNY_H.VALIDATE_DATE <= I.INVOICE_DATE
				ORDER BY MONEY_HISTORY_ID DESC),		
			
				(SELECT
					(SM.RATE2/SM.RATE1) AS RATE
				FROM 
					SETUP_MONEY SM,
					#attributes.dsn#.SETUP_PERIOD SET_PRD
				WHERE 
					SET_PRD.PERIOD_ID = #attributes.period_id# 
					AND SM.MONEY=ISNULL(SET_PRD.OTHER_MONEY,'TL')
					
					
				)
			) AS OTHER_MONEY_RATE,	
			ISNULL((SELECT
				TOP 1 (PURCHASE_NET_SYSTEM + PURCHASE_EXTRA_COST_SYSTEM)  
			FROM 
				GET_PRODUCT_COST_PERIOD
			WHERE
				GET_PRODUCT_COST_PERIOD.START_DATE <= I.INVOICE_DATE
				AND GET_PRODUCT_COST_PERIOD.PRODUCT_ID = IRP.PRODUCT_ID
				AND ISNUMERIC(GET_PRODUCT_COST_PERIOD.SPECT_MAIN_ID)=0
			ORDER BY
				GET_PRODUCT_COST_PERIOD.START_DATE DESC,
				GET_PRODUCT_COST_PERIOD.RECORD_DATE DESC
				),0) AS PROD_COST
		FROM
			INVOICE I,
			INVOICE_ROW_POS IRP	
		WHERE
			I.INVOICE_ID=IRP.INVOICE_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[DAILY_TOTAL_SALES] AS
    SELECT
		D.BRANCH_ID,
		INVOICE_DATE,
		SUM(NETTOTAL) NET_SALE,
		SUM(NETTOTAL/OTHER_MONEY_RATE) NET_SALE_OTHER_MONEY,
		SUM(GROSSTOTAL) TOTAL_SALE,
		SUM(GROSSTOTAL/OTHER_MONEY_RATE) TOTAL_SALE_OTHER_MONEY,
		COUNT(DISTINCT INVOICE_ID) INVOICE_COUNT,
		COUNT(DISTINCT INVOICE_ROW_ID) INVOICE_ROW_COUNT,
		COUNT(DISTINCT INVOICE_POS_ROW_ID) INVOICE_POS_ROW_COUNT,
		COUNT(DISTINCT STOCK_ID) STOCK_UNIQUE_COUNT,
		SUM(AMOUNT) AMOUNT,
		SUM(PROD_COST*AMOUNT) TOTAL_COST,
		SUM((PROD_COST/OTHER_MONEY_RATE)*AMOUNT) TOTAL_COST_OTHER_MONEY,
		SALE_EMP
	FROM
		(
		SELECT DEPARTMENT_ID,INVOICE_DATE,NETTOTAL,GROSSTOTAL,INVOICE_ID,'0' AS INVOICE_ROW_ID,INVOICE_POS_ROW_ID,STOCK_ID,AMOUNT,PROD_COST,OTHER_MONEY_RATE,SALE_EMP FROM INVOICE_ROW_POS_SALES_DETAIL
		UNION ALL
		SELECT DEPARTMENT_ID,INVOICE_DATE,NETTOTAL,GROSSTOTAL,INVOICE_ID,INVOICE_ROW_ID,'0' AS INVOICE_POS_ROW_ID,STOCK_ID,AMOUNT,PROD_COST,OTHER_MONEY_RATE,SALE_EMP FROM INVOICE_ROW_SALES_DETAIL		
		) AS GET_ALL_SALES,
		#attributes.dsn#.DEPARTMENT D
	WHERE
		GET_ALL_SALES.DEPARTMENT_ID=D.DEPARTMENT_ID	
	GROUP BY 
		D.BRANCH_ID,
		INVOICE_DATE,
		SALE_EMP

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[DAILY_PRODUCT_SALES] AS
		SELECT
			STOCK_ID,
			PRODUCT_ID,
			COMPANY_ID,
			DEPARTMENT_ID,
			INVOICE_DATE,
			SUM(NETTOTAL) NET_SALE,
			SUM(NETTOTAL/OTHER_MONEY_RATE) NET_SALE_OTHER_MONEY,
			SUM(GROSSTOTAL) TOTAL_SALE,
			SUM(GROSSTOTAL/OTHER_MONEY_RATE) TOTAL_SALE_OTHER_MONEY,
			COUNT(DISTINCT INVOICE_ID) INVOICE_COUNT,
			COUNT(DISTINCT INVOICE_ROW_ID) INVOICE_ROW_COUNT,
			COUNT(DISTINCT INVOICE_POS_ROW_ID) INVOICE_POS_ROW_COUNT,
			COUNT(DISTINCT STOCK_ID) STOCK_UNIQUE_COUNT,
			SUM(AMOUNT) AMOUNT,
			SUM(PROD_COST*AMOUNT) TOTAL_COST,
			SUM((PROD_COST/OTHER_MONEY_RATE)*AMOUNT) TOTAL_COST_OTHER_MONEY
		FROM
			(
			SELECT 
				DEPARTMENT_ID,INVOICE_DATE,COMPANY_ID,
				NETTOTAL,GROSSTOTAL,INVOICE_ID,
				'0'AS INVOICE_ROW_ID,INVOICE_POS_ROW_ID,
				STOCK_ID,PRODUCT_ID,AMOUNT,
				PROD_COST,OTHER_MONEY_RATE 
			FROM 
				INVOICE_ROW_POS_SALES_DETAIL
			UNION ALL
			SELECT 
				DEPARTMENT_ID,INVOICE_DATE,COMPANY_ID,
				NETTOTAL,GROSSTOTAL,INVOICE_ID,
				INVOICE_ROW_ID,'0'INVOICE_POS_ROW_ID,
				STOCK_ID,PRODUCT_ID,AMOUNT,
				PROD_COST,OTHER_MONEY_RATE 
			FROM 
				INVOICE_ROW_SALES_DETAIL		
	
	
			) AS GET_ALL_SALES
		GROUP BY 
			STOCK_ID,
			PRODUCT_ID,
			COMPANY_ID,
			DEPARTMENT_ID,
			INVOICE_DATE

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[DAILY_BRANCH_SALES] AS
	SELECT
		D.BRANCH_ID,
		INVOICE_DATE,
		SUM(NET_SALE) NETTOTAL ,
		SUM(NET_SALE_OTHER_MONEY) OTHER_MONEY_NETTOTAL ,
		SUM(TOTAL_SALE) GROSSTOTAL ,
		SUM(TOTAL_SALE_OTHER_MONEY) OTHER_MONEY_GROSSTOTAL ,
		SUM(AMOUNT) AMOUNT,
		SUM(TOTAL_COST) TOTAL_COST ,
		SUM(TOTAL_COST_OTHER_MONEY) TOTAL_COST_OTHER_MONEY 
	FROM	
		DAILY_PRODUCT_SALES AS INV_S,
		#attributes.dsn#.DEPARTMENT D
	WHERE
		INV_S.DEPARTMENT_ID=D.DEPARTMENT_ID
	GROUP BY 
		D.BRANCH_ID,	
		INVOICE_DATE

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[DAILY_PRODUCT_BRAND_SALES] AS
	SELECT
		PB.BRAND_ID,
		PB.BRAND_NAME,
		INVOICE_DATE,
		SUM(NET_SALE) NETTOTAL ,
		SUM(NET_SALE_OTHER_MONEY) OTHER_MONEY_NETTOTAL ,
		SUM(TOTAL_SALE) GROSSTOTAL ,
		SUM(TOTAL_SALE_OTHER_MONEY) OTHER_MONEY_GROSSTOTAL ,
		SUM(AMOUNT) AMOUNT,
		SUM(TOTAL_COST) TOTAL_COST ,
		SUM(TOTAL_COST_OTHER_MONEY) TOTAL_COST_OTHER_MONEY 
	FROM	
		DAILY_PRODUCT_SALES AS INV_S,
		#attributes.dsn#_#get_period.our_company_id#.STOCKS S,
		#attributes.dsn#_#get_period.our_company_id#.PRODUCT_BRANDS PB
	
	WHERE
		INV_S.STOCK_ID=S.STOCK_ID
		AND S.BRAND_ID=PB.BRAND_ID
	GROUP BY 
		PB.BRAND_ID,
		PB.BRAND_NAME,
		INVOICE_DATE

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[DAILY_PRODUCT_CAT_SALES] AS
	SELECT
		PC.PRODUCT_CAT,
		PC.PRODUCT_CATID,
		INVOICE_DATE,
		SUM(NET_SALE) NETTOTAL ,
		SUM(NET_SALE_OTHER_MONEY) OTHER_MONEY_NETTOTAL ,
		SUM(TOTAL_SALE) GROSSTOTAL ,
		SUM(TOTAL_SALE_OTHER_MONEY) OTHER_MONEY_GROSSTOTAL ,
		SUM(AMOUNT) AMOUNT,
		SUM(TOTAL_COST) TOTAL_COST ,
		SUM(TOTAL_COST_OTHER_MONEY) TOTAL_COST_OTHER_MONEY 
	FROM	
		DAILY_PRODUCT_SALES AS INV_S,
		#attributes.dsn#_#get_period.our_company_id#.STOCKS S,
		#attributes.dsn#_#get_period.our_company_id#.PRODUCT_CAT PC
	WHERE
		INV_S.STOCK_ID=S.STOCK_ID
		AND S.PRODUCT_CATID=PC.PRODUCT_CATID
	GROUP BY 
		PC.PRODUCT_CAT,
		PC.PRODUCT_CATID,
		INVOICE_DATE

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[DAILY_PRODUCT_COMPANY_SALES] AS
	SELECT
		C.COMPANY_ID,
		C.NICKNAME,
		INVOICE_DATE,
		SUM(NET_SALE) NETTOTAL ,
		SUM(NET_SALE_OTHER_MONEY) OTHER_MONEY_NETTOTAL ,
		SUM(TOTAL_SALE) GROSSTOTAL ,
		SUM(TOTAL_SALE_OTHER_MONEY) OTHER_MONEY_GROSSTOTAL ,
		SUM(AMOUNT) AMOUNT,
		SUM(TOTAL_COST) TOTAL_COST ,
		SUM(TOTAL_COST_OTHER_MONEY) TOTAL_COST_OTHER_MONEY
	FROM	
		DAILY_PRODUCT_SALES AS INV_S,
		#attributes.dsn#_#get_period.our_company_id#.STOCKS S,
		#attributes.dsn#.COMPANY C
	WHERE
		INV_S.STOCK_ID=S.STOCK_ID
		AND S.COMPANY_ID=C.COMPANY_ID
	GROUP BY 
		C.COMPANY_ID,
		C.NICKNAME,
		INVOICE_DATE

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[DAILY_PRODUCT_MANAGER_SALES] AS
	SELECT
		EP.EMPLOYEE_ID,
		EP.POSITION_CODE,
		EP.EMPLOYEE_NAME,
		EP.EMPLOYEE_SURNAME,
		INVOICE_DATE,
		SUM(NET_SALE) NETTOTAL ,
		SUM(NET_SALE_OTHER_MONEY) OTHER_MONEY_NETTOTAL ,
		SUM(TOTAL_SALE) GROSSTOTAL ,
		SUM(TOTAL_SALE_OTHER_MONEY) OTHER_MONEY_GROSSTOTAL ,
		SUM(AMOUNT) AMOUNT,
		SUM(TOTAL_COST) TOTAL_COST ,
		SUM(TOTAL_COST_OTHER_MONEY) TOTAL_COST_OTHER_MONEY 
	FROM	
		DAILY_PRODUCT_SALES AS INV_S,
		#attributes.dsn#_#get_period.our_company_id#.STOCKS S,
		#attributes.dsn#.EMPLOYEE_POSITIONS EP
	WHERE
		INV_S.STOCK_ID=S.STOCK_ID
		AND S.PRODUCT_MANAGER=EP.POSITION_CODE
	GROUP BY 
		EP.EMPLOYEE_ID,
		EP.POSITION_CODE,
		EP.EMPLOYEE_NAME,
		EP.EMPLOYEE_SURNAME,
		INVOICE_DATE

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[DAILY_WORKGROUP_PAR_SALES] AS
	SELECT
		WP.POSITION_CODE,
		INV_S.COMPANY_ID,
		INVOICE_DATE,
		SUM(NET_SALE) NETTOTAL ,
		SUM(NET_SALE_OTHER_MONEY) OTHER_MONEY_NETTOTAL ,
		SUM(TOTAL_SALE) GROSSTOTAL ,
		SUM(TOTAL_SALE_OTHER_MONEY) OTHER_MONEY_GROSSTOTAL ,
		SUM(AMOUNT) AMOUNT,
		SUM(TOTAL_COST) TOTAL_COST ,
		SUM(TOTAL_COST_OTHER_MONEY) TOTAL_COST_OTHER_MONEY
	FROM	
		DAILY_PRODUCT_SALES AS INV_S,
		#attributes.dsn#.WORKGROUP_EMP_PAR WP
	WHERE
		INV_S.COMPANY_ID=WP.COMPANY_ID AND	
		WP.IS_MASTER = 1 AND
		WP.OUR_COMPANY_ID = #get_period.our_company_id#
	GROUP BY
		WP.POSITION_CODE,
		INV_S.COMPANY_ID,
		INVOICE_DATE

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACCOUNT_ACCOUNT_REMAINDER_MONEY] AS
			SELECT
				0 AS ALACAK,
				SUM(ACCOUNT_CARD_ROWS.AMOUNT) AS BORC,	
				0 AS ALACAK2,
				SUM(ISNULL(ACCOUNT_CARD_ROWS.AMOUNT_2,0)) AS BORC2,	
				0 AS ALACAK3,
				SUM(ISNULL(ACCOUNT_CARD_ROWS.OTHER_AMOUNT,0)) AS BORC3,
				ACCOUNT_CARD_ROWS.OTHER_CURRENCY AS OTHER_MONEY,
				ACCOUNT_CARD_ROWS.ACCOUNT_ID,
				ACCOUNT_CARD.ACTION_DATE,
				ACCOUNT_CARD.CARD_TYPE,
				ACCOUNT_CARD.CARD_CAT_ID
			FROM
				ACCOUNT_CARD_ROWS,ACCOUNT_CARD
			WHERE
				BA = 0 AND ACCOUNT_CARD.CARD_ID=ACCOUNT_CARD_ROWS.CARD_ID
			GROUP BY
				ACCOUNT_CARD_ROWS.ACCOUNT_ID,
				ACCOUNT_CARD.ACTION_DATE,
				ACCOUNT_CARD.CARD_TYPE,
				ACCOUNT_CARD.CARD_CAT_ID,
				ACCOUNT_CARD_ROWS.OTHER_CURRENCY
		UNION
			SELECT
				SUM(ACCOUNT_CARD_ROWS.AMOUNT)AS ALACAK,
				0 AS BORC,	
				SUM(ISNULL(ACCOUNT_CARD_ROWS.AMOUNT_2,0))AS ALACAK2,
				0 AS BORC2,	
				SUM(ISNULL(ACCOUNT_CARD_ROWS.OTHER_AMOUNT,0))AS ALACAK3,
				0 AS BORC3,
				ACCOUNT_CARD_ROWS.OTHER_CURRENCY AS OTHER_MONEY,
				ACCOUNT_CARD_ROWS.ACCOUNT_ID,
				ACCOUNT_CARD.ACTION_DATE,
				ACCOUNT_CARD.CARD_TYPE,
				ACCOUNT_CARD.CARD_CAT_ID
			FROM
				ACCOUNT_CARD_ROWS,
				ACCOUNT_CARD
			WHERE
				BA = 1 AND ACCOUNT_CARD.CARD_ID=ACCOUNT_CARD_ROWS.CARD_ID
			GROUP BY
				ACCOUNT_CARD_ROWS.ACCOUNT_ID,
				ACCOUNT_CARD.ACTION_DATE,
				ACCOUNT_CARD.CARD_TYPE,
				ACCOUNT_CARD.CARD_CAT_ID,
				ACCOUNT_CARD_ROWS.OTHER_CURRENCY

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACTIVITY_SUMMARY_DAILY] AS
		SELECT
			ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
			SUM(GET_PURCHASES) GET_PURCHASES,
			SUM(GET_PURCHASES2) GET_PURCHASES2,
			SUM(GET_PURCHASES_PAPERS) GET_PURCHASES_PAPERS,
			SUM(GET_PURCHASE_DIFF) GET_PURCHASE_DIFF,
			SUM(GET_PURCHASE_DIFF2) GET_PURCHASE_DIFF2,
			SUM(GET_PURCHASE_DIFF_PAPERS) GET_PURCHASE_DIFF_PAPERS,
			SUM(GET_PURCHASE_RETURN) GET_PURCHASE_RETURN,
			SUM(GET_PURCHASE_RETURN2) GET_PURCHASE_RETURN2,
			SUM(GET_PURCHASE_RETURN_PAPERS) GET_PURCHASE_RETURN_PAPERS,
			SUM(GET_EXPENSE) GET_EXPENSE,
			SUM(GET_EXPENSE2) GET_EXPENSE2,
			SUM(GET_EXPENSE_PAPERS) GET_EXPENSE_PAPERS,
			SUM(GET_SALES) GET_SALES,
			SUM(GET_SALES2) GET_SALES2,
			SUM(GET_SALES_PAPERS) GET_SALES_PAPERS,
			SUM(GET_SALES_CANCELED) GET_SALES_CANCELED,
			SUM(GET_SALES2_CANCELED) GET_SALES2_CANCELED,
			SUM(GET_SALES_PAPERS_CANCELED) GET_SALES_PAPERS_CANCELED,
			SUM(GET_SALES_DIFF) GET_SALES_DIFF,
			SUM(GET_SALES_DIFF2) GET_SALES_DIFF2,
			SUM(GET_SALES_DIFF_PAPERS) GET_SALES_DIFF_PAPERS,
			SUM(GET_SALES_RETURN) GET_SALES_RETURN,
			SUM(GET_SALES_RETURN2) GET_SALES_RETURN2,
			SUM(GET_SALES_RETURN_PAPERS) GET_SALES_RETURN_PAPERS,
			SUM(GET_INCOME) GET_INCOME,
			SUM(GET_INCOME2) GET_INCOME2,
			SUM(GET_INCOME_PAPERS) GET_INCOME_PAPERS,
			SUM(GET_CASH) GET_CASH,
			SUM(GET_CASH2) GET_CASH2,
			SUM(GET_CASH_PAPERS) GET_CASH_PAPERS,
			SUM(GET_CHEQUE) GET_CHEQUE,
			SUM(GET_CHEQUE2)GET_CHEQUE2,
			SUM(GET_CHEQUE_PAPERS) GET_CHEQUE_PAPERS,
			SUM(GET_CHEQUE_RETURN) GET_CHEQUE_RETURN,
			SUM(GET_CHEQUE2_RETURN)GET_CHEQUE2_RETURN,
			SUM(GET_CHEQUE_RETURN_PAPERS) GET_CHEQUE_RETURN_PAPERS,
			SUM(GET_VOUCHER) GET_VOUCHER,		
			SUM(GET_VOUCHER2) GET_VOUCHER2,
			SUM(GET_VOUCHER_PAPERS) GET_VOUCHER_PAPERS,
			SUM(GET_VOUCHER_RETURN) GET_VOUCHER_RETURN,
			SUM(GET_VOUCHER2_RETURN) GET_VOUCHER2_RETURN,
			SUM(GET_VOUCHER_RETURN_PAPERS) GET_VOUCHER_RETURN_PAPERS,
			SUM(GET_REVENUE) GET_REVENUE,
			SUM(GET_REVENUE2)GET_REVENUE2,
			SUM(GET_REVENUE_PAPERS) GET_REVENUE_PAPERS,
			SUM(GET_CREDIT_REVENUE) GET_CREDIT_REVENUE,
			SUM(GET_CREDIT_REVENUE2)GET_CREDIT_REVENUE2,
			SUM(GET_CREDIT_REVENUE_PAPERS) GET_CREDIT_REVENUE_PAPERS,
			SUM(GET_PAYM) GET_PAYM,
			SUM(GET_PAYM2)GET_PAYM2,
			SUM(GET_PAYM_PAPERS) GET_PAYM_PAPERS,
			SUM(GET_CHEQUE_P) GET_CHEQUE_P,
			SUM(GET_CHEQUE_P2) GET_CHEQUE_P2,
			SUM(GET_CHEQUE_P_PAPERS) GET_CHEQUE_P_PAPERS,
			SUM(GET_CHEQUE_P_RETURN) GET_CHEQUE_P_RETURN,
			SUM(GET_CHEQUE_P2_RETURN) GET_CHEQUE_P2_RETURN,
			SUM(GET_CHEQUE_P_RETURN_PAPERS) GET_CHEQUE_P_RETURN_PAPERS,
			SUM(GET_VOUCHER_P) GET_VOUCHER_P,	
			SUM(GET_VOUCHER_P2) GET_VOUCHER_P2,
			SUM(GET_VOUCHER_P_PAPERS) GET_VOUCHER_P_PAPERS,	
			SUM(GET_VOUCHER_P_RETURN) GET_VOUCHER_P_RETURN,
			SUM(GET_VOUCHER_P2_RETURN) GET_VOUCHER_P2_RETURN,
			SUM(GET_VOUCHER_P_RETURN_PAPERS) GET_VOUCHER_P_RETURN_PAPERS,
			SUM(GET_PAYMENTS) GET_PAYMENTS,
			SUM(GET_PAYMENTS2) GET_PAYMENTS2,
			SUM(GET_PAYMENTS_PAPERS) GET_PAYMENTS_PAPERS,
			SUM(GET_CREDIT_PAYMENTS) GET_CREDIT_PAYMENTS,
			SUM(GET_CREDIT_PAYMENTS2) GET_CREDIT_PAYMENTS2,
			SUM(GET_CREDIT_PAYMENTS_PAPERS) GET_CREDIT_PAYMENTS_PAPERS
		FROM (
	
				SELECT
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					SUM(ACTION_VALUE) GET_PURCHASES,
					SUM(ACTION_VALUE_2) GET_PURCHASES2,
					COUNT(ACTION_TYPE_ID) GET_PURCHASES_PAPERS,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_DIFF_PAPERS,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_PURCHASE_RETURN_PAPERS,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_EXPENSE_PAPERS,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_PAPERS,
					0 GET_SALES_CANCELED,
					0 GET_SALES2_CANCELED,
					0 GET_SALES_PAPERS_CANCELED,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_DIFF_PAPERS,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_SALES_RETURN_PAPERS,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_INCOME_PAPERS,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CASH_PAPERS,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_PAPERS,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_CHEQUE_RETURN_PAPERS,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,
					0 GET_VOUCHER_PAPERS,
					0 GET_VOUCHER_RETURN,			
					0 GET_VOUCHER2_RETURN,
					0 GET_VOUCHER_RETURN_PAPERS,	
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_REVENUE_PAPERS,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_CREDIT_REVENUE_PAPERS,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_PAYM_PAPERS,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_PAPERS,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_CHEQUE_P_RETURN_PAPERS,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_PAPERS,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_VOUCHER_P_RETURN_PAPERS,	
					0 GET_PAYMENTS,
					0 GET_PAYMENTS2,
					0 GET_PAYMENTS_PAPERS,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS2,
					0 GET_CREDIT_PAYMENTS_PAPERS
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (59,60,601,64,65,68,690,691,591,592)
				GROUP BY
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASES_PAPERS,
					SUM(ACTION_VALUE) GET_PURCHASE_DIFF,
					SUM(ACTION_VALUE_2) GET_PURCHASE_DIFF2,
					COUNT(ACTION_TYPE_ID) GET_PURCHASES_DIFF_PAPERS,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_PURCHASE_RETURN_PAPERS,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_EXPENSE_PAPERS,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_PAPERS,
					0 GET_SALES_CANCELED,
					0 GET_SALES2_CANCELED,
					0 GET_SALES_PAPERS_CANCELED,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_DIFF_PAPERS,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_SALES_RETURN_PAPERS,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_INCOME_PAPERS,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CASH_PAPERS,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_PAPERS,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_CHEQUE_RETURN_PAPERS,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,
					0 GET_VOUCHER_PAPERS,
					0 GET_VOUCHER_RETURN,			
					0 GET_VOUCHER2_RETURN,
					0 GET_VOUCHER_RETURN_PAPERS,	
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_REVENUE_PAPERS,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_CREDIT_REVENUE_PAPERS,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_PAYM_PAPERS,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_PAPERS,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_CHEQUE_P_RETURN_PAPERS,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_PAPERS,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_VOUCHER_P_RETURN_PAPERS,	
					0 GET_PAYMENTS,
					0 GET_PAYMENTS2,
					0 GET_PAYMENTS_PAPERS,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS2,
					0 GET_CREDIT_PAYMENTS_PAPERS
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (51,63)
				GROUP BY
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASES_PAPERS,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_DIFF_PAPERS,
					SUM(ACTION_VALUE) GET_PURCHASE_RETURN,
					SUM(ACTION_VALUE_2) GET_PURCHASE_RETURN2,
					COUNT(ACTION_TYPE_ID) GET_PURCHASE_RETURN_PAPERS,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_EXPENSE_PAPERS,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_PAPERS,
					0 GET_SALES_CANCELED,
					0 GET_SALES2_CANCELED,
					0 GET_SALES_PAPERS_CANCELED,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_DIFF_PAPERS,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_SALES_RETURN_PAPERS,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_INCOME_PAPERS,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CASH_PAPERS,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_PAPERS,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_CHEQUE_RETURN_PAPERS,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,
					0 GET_VOUCHER_PAPERS,
					0 GET_VOUCHER_RETURN,			
					0 GET_VOUCHER2_RETURN,
					0 GET_VOUCHER_RETURN_PAPERS,	
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_REVENUE_PAPERS,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_CREDIT_REVENUE_PAPERS,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_PAYM_PAPERS,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_PAPERS,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_CHEQUE_P_RETURN_PAPERS,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_PAPERS,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_VOUCHER_P_RETURN_PAPERS,	
					0 GET_PAYMENTS,
					0 GET_PAYMENTS2,
					0 GET_PAYMENTS_PAPERS,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS2,
					0 GET_CREDIT_PAYMENTS_PAPERS
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (62)
				GROUP BY
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASES_PAPERS,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_DIFF_PAPERS,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_PURCHASE_RETURN_PAPERS,
					SUM(ACTION_VALUE) GET_EXPENSE,
					SUM(ACTION_VALUE_2) GET_EXPENSE2,
					COUNT(ACTION_TYPE_ID) GET_EXPENSE_PAPERS,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_PAPERS,
					0 GET_SALES_CANCELED,
					0 GET_SALES2_CANCELED,
					0 GET_SALES_PAPERS_CANCELED,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_DIFF_PAPERS,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_SALES_RETURN_PAPERS,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_INCOME_PAPERS,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CASH_PAPERS,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_PAPERS,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_CHEQUE_RETURN_PAPERS,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,
					0 GET_VOUCHER_PAPERS,
					0 GET_VOUCHER_RETURN,			
					0 GET_VOUCHER2_RETURN,
					0 GET_VOUCHER_RETURN_PAPERS,	
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_REVENUE_PAPERS,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_CREDIT_REVENUE_PAPERS,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_PAYM_PAPERS,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_PAPERS,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_CHEQUE_P_RETURN_PAPERS,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_PAPERS,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_VOUCHER_P_RETURN_PAPERS,	
					0 GET_PAYMENTS,
					0 GET_PAYMENTS2,
					0 GET_PAYMENTS_PAPERS,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS2,
					0 GET_CREDIT_PAYMENTS_PAPERS
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (42,120,131)
				GROUP BY
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASES_PAPERS,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_DIFF_PAPERS,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_PURCHASE_RETURN_PAPERS,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_EXPENSE_PAPERS,
					SUM(ACTION_VALUE) GET_SALES,
					SUM(ACTION_VALUE_2) GET_SALES2,
					COUNT(ACTION_TYPE_ID) GET_SALES_PAPERS,
					0 GET_SALES_CANCELED,
					0 GET_SALES2_CANCELED,
					0 GET_SALES_PAPERS_CANCELED,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_DIFF_PAPERS,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_SALES_RETURN_PAPERS,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_INCOME_PAPERS,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CASH_PAPERS,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_PAPERS,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_CHEQUE_RETURN_PAPERS,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,
					0 GET_VOUCHER_PAPERS,
					0 GET_VOUCHER_RETURN,			
					0 GET_VOUCHER2_RETURN,
					0 GET_VOUCHER_RETURN_PAPERS,	
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_REVENUE_PAPERS,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_CREDIT_REVENUE_PAPERS,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_PAYM_PAPERS,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_PAPERS,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_CHEQUE_P_RETURN_PAPERS,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_PAPERS,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_VOUCHER_P_RETURN_PAPERS,	
					0 GET_PAYMENTS,
					0 GET_PAYMENTS2,
					0 GET_PAYMENTS_PAPERS,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS2,
					0 GET_CREDIT_PAYMENTS_PAPERS
				FROM
					CARI_ROWS
				WHERE
					IS_CANCEL = 0 AND
					ACTION_TYPE_ID IN (48,52,53,56,57,58,66,67,531,532,561)
				GROUP BY
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
			SELECT
				ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
				0 GET_PURCHASES,
				0 GET_PURCHASES2,
				0 GET_PURCHASES_PAPERS,
				0 GET_PURCHASE_DIFF,
				0 GET_PURCHASE_DIFF2,
				0 GET_PURCHASE_DIFF_PAPERS,
				0 GET_PURCHASE_RETURN,
				0 GET_PURCHASE_RETURN2,
				0 GET_PURCHASE_RETURN_PAPERS,
				0 GET_EXPENSE,
				0 GET_EXPENSE2,
				0 GET_EXPENSE_PAPERS,
				0 GET_SALES,
				0 GET_SALES2,
				0 GET_SALES_PAPERS,
				SUM(ACTION_VALUE) GET_SALES_CANCELED,
				SUM(ACTION_VALUE_2) GET_SALES2_CANCELED,
				COUNT(ACTION_TYPE_ID) GET_SALES_PAPERS_CANCELED,
				0 GET_SALES_DIFF,
				0 GET_SALES_DIFF2,
				0 GET_SALES_DIFF_PAPERS,
				0 GET_SALES_RETURN,
				0 GET_SALES_RETURN2,
				0 GET_SALES_RETURN_PAPERS,
				0 GET_INCOME,
				0 GET_INCOME2,
				0 GET_INCOME_PAPERS,
				0 GET_CASH,
				0 GET_CASH2,
				0 GET_CASH_PAPERS,
				0 GET_CHEQUE,
				0 GET_CHEQUE2,
				0 GET_CHEQUE_PAPERS,
				0 GET_CHEQUE_RETURN,
				0 GET_CHEQUE2_RETURN,
				0 GET_CHEQUE_RETURN_PAPERS,
				0 GET_VOUCHER,
				0 GET_VOUCHER2,
				0 GET_VOUCHER_PAPERS,
				0 GET_VOUCHER_RETURN,			
				0 GET_VOUCHER2_RETURN,
				0 GET_VOUCHER_RETURN_PAPERS,	
				0 GET_REVENUE,
				0 GET_REVENUE2,
				0 GET_REVENUE_PAPERS,
				0 GET_CREDIT_REVENUE,
				0 GET_CREDIT_REVENUE2,
				0 GET_CREDIT_REVENUE_PAPERS,
				0 GET_PAYM,
				0 GET_PAYM2,
				0 GET_PAYM_PAPERS,
				0 GET_CHEQUE_P,
				0 GET_CHEQUE_P2,
				0 GET_CHEQUE_P_PAPERS,
				0 GET_CHEQUE_P_RETURN,
				0 GET_CHEQUE_P2_RETURN,
				0 GET_CHEQUE_P_RETURN_PAPERS,
				0 GET_VOUCHER_P,
				0 GET_VOUCHER_P2,
				0 GET_VOUCHER_P_PAPERS,
				0 GET_VOUCHER_P_RETURN,	
				0 GET_VOUCHER_P2_RETURN,
				0 GET_VOUCHER_P_RETURN_PAPERS,	
				0 GET_PAYMENTS,
				0 GET_PAYMENTS2,
				0 GET_PAYMENTS_PAPERS,
				0 GET_CREDIT_PAYMENTS,
				0 GET_CREDIT_PAYMENTS2,
				0 GET_CREDIT_PAYMENTS_PAPERS
			FROM
				CARI_ROWS
			WHERE
				IS_CANCEL = 1 AND
				ACTION_TYPE_ID IN (48,52,53,56,57,58,66,67,531,532,561)					
			GROUP BY
				ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASES_PAPERS,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_DIFF_PAPERS,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_PURCHASE_RETURN_PAPERS,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_EXPENSE_PAPERS,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_PAPERS,
					0 GET_SALES_CANCELED,
					0 GET_SALES2_CANCELED,
					0 GET_SALES_PAPERS_CANCELED,
					SUM(ACTION_VALUE) GET_SALES_DIFF,
					SUM(ACTION_VALUE_2) GET_SALES_DIFF2,
					COUNT(ACTION_TYPE_ID) GET_SALES_DIFF_PAPERS,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_SALES_RETURN_PAPERS,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_INCOME_PAPERS,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CASH_PAPERS,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_PAPERS,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_CHEQUE_RETURN_PAPERS,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,
					0 GET_VOUCHER_PAPERS,
					0 GET_VOUCHER_RETURN,			
					0 GET_VOUCHER2_RETURN,
					0 GET_VOUCHER_RETURN_PAPERS,	
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_REVENUE_PAPERS,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_CREDIT_REVENUE_PAPERS,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_PAYM_PAPERS,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_PAPERS,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_CHEQUE_P_RETURN_PAPERS,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_PAPERS,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_VOUCHER_P_RETURN_PAPERS,	
					0 GET_PAYMENTS,
					0 GET_PAYMENTS2,
					0 GET_PAYMENTS_PAPERS,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS2,
					0 GET_CREDIT_PAYMENTS_PAPERS
				FROM
	
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (50,58)
				GROUP BY
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASES_PAPERS,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_DIFF_PAPERS,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_PURCHASE_RETURN_PAPERS,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_EXPENSE_PAPERS,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_PAPERS,
					0 GET_SALES_CANCELED,
					0 GET_SALES2_CANCELED,
					0 GET_SALES_PAPERS_CANCELED,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_DIFF_PAPERS,
					SUM(ACTION_VALUE) GET_SALES_RETURN,
					SUM(ACTION_VALUE_2) GET_SALES_RETURN2,
					COUNT(ACTION_TYPE_ID) GET_SALES_RETURN_PAPERS,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_INCOME_PAPERS,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CASH_PAPERS,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_PAPERS,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_CHEQUE_RETURN_PAPERS,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,
					0 GET_VOUCHER_PAPERS,
					0 GET_VOUCHER_RETURN,			
					0 GET_VOUCHER2_RETURN,
					0 GET_VOUCHER_RETURN_PAPERS,	
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_REVENUE_PAPERS,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_CREDIT_REVENUE_PAPERS,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_PAYM_PAPERS,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_PAPERS,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_CHEQUE_P_RETURN_PAPERS,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_PAPERS,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_VOUCHER_P_RETURN_PAPERS,	
					0 GET_PAYMENTS,
					0 GET_PAYMENTS2,
					0 GET_PAYMENTS_PAPERS,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS2,
					0 GET_CREDIT_PAYMENTS_PAPERS
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (54,55)
				GROUP BY
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASES_PAPERS,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,

					0 GET_PURCHASE_DIFF_PAPERS,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_PURCHASE_RETURN_PAPERS,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_EXPENSE_PAPERS,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_PAPERS,
					0 GET_SALES_CANCELED,
					0 GET_SALES2_CANCELED,
					0 GET_SALES_PAPERS_CANCELED,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_DIFF_PAPERS,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_SALES_RETURN_PAPERS,
					SUM(ACTION_VALUE) GET_INCOME,
					SUM(ACTION_VALUE_2) GET_INCOME2,
					COUNT(ACTION_TYPE_ID) GET_INCOME_PAPERS,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CASH_PAPERS,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_PAPERS,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_CHEQUE_RETURN_PAPERS,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,
					0 GET_VOUCHER_PAPERS,
					0 GET_VOUCHER_RETURN,			
					0 GET_VOUCHER2_RETURN,
					0 GET_VOUCHER_RETURN_PAPERS,	
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_REVENUE_PAPERS,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_CREDIT_REVENUE_PAPERS,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_PAYM_PAPERS,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_PAPERS,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_CHEQUE_P_RETURN_PAPERS,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_PAPERS,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_VOUCHER_P_RETURN_PAPERS,	
					0 GET_PAYMENTS,
					0 GET_PAYMENTS2,
					0 GET_PAYMENTS_PAPERS,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS2,
					0 GET_CREDIT_PAYMENTS_PAPERS
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (41,121)
				GROUP BY
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASES_PAPERS,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_DIFF_PAPERS,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_PURCHASE_RETURN_PAPERS,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_EXPENSE_PAPERS,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_PAPERS,
					0 GET_SALES_CANCELED,
					0 GET_SALES2_CANCELED,
					0 GET_SALES_PAPERS_CANCELED,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_DIFF_PAPERS,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_SALES_RETURN_PAPERS,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_INCOME_PAPERS,
					SUM(ACTION_VALUE) GET_CASH,
					SUM(ACTION_VALUE_2) GET_CASH2,
					COUNT(ACTION_TYPE_ID) GET_CASH_PAPERS,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_PAPERS,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_CHEQUE_RETURN_PAPERS,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,
					0 GET_VOUCHER_PAPERS,
					0 GET_VOUCHER_RETURN,			
					0 GET_VOUCHER2_RETURN,
					0 GET_VOUCHER_RETURN_PAPERS,	
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_REVENUE_PAPERS,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_CREDIT_REVENUE_PAPERS,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_PAYM_PAPERS,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_PAPERS,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_CHEQUE_P_RETURN_PAPERS,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_PAPERS,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_VOUCHER_P_RETURN_PAPERS,	
					0 GET_PAYMENTS,
					0 GET_PAYMENTS2,
					0 GET_PAYMENTS_PAPERS,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS2,
					0 GET_CREDIT_PAYMENTS_PAPERS	
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (31,35,1040,1050)
				GROUP BY
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASES_PAPERS,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_DIFF_PAPERS,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_PURCHASE_RETURN_PAPERS,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_EXPENSE_PAPERS,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_PAPERS,
					0 GET_SALES_CANCELED,
					0 GET_SALES2_CANCELED,
					0 GET_SALES_PAPERS_CANCELED,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_DIFF_PAPERS,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_SALES_RETURN_PAPERS,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_INCOME_PAPERS,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CASH_PAPERS,
					SUM(ACTION_VALUE) GET_CHEQUE,
					SUM(ACTION_VALUE_2) GET_CHEQUE2,
					COUNT(ACTION_TYPE_ID) GET_CHEQUE_PAPERS,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_CHEQUE_RETURN_PAPERS,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,
					0 GET_VOUCHER_PAPERS,
					0 GET_VOUCHER_RETURN,			
					0 GET_VOUCHER2_RETURN,
					0 GET_VOUCHER_RETURN_PAPERS,	
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_REVENUE_PAPERS,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_CREDIT_REVENUE_PAPERS,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_PAYM_PAPERS,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_PAPERS,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_CHEQUE_P_RETURN_PAPERS,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_PAPERS,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_VOUCHER_P_RETURN_PAPERS,	
					0 GET_PAYMENTS,
					0 GET_PAYMENTS2,
					0 GET_PAYMENTS_PAPERS,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS2,
					0 GET_CREDIT_PAYMENTS_PAPERS
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (90)
				GROUP BY
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASES_PAPERS,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_DIFF_PAPERS,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_PURCHASE_RETURN_PAPERS,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_EXPENSE_PAPERS,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_PAPERS,
					0 GET_SALES_CANCELED,
					0 GET_SALES2_CANCELED,
					0 GET_SALES_PAPERS_CANCELED,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_DIFF_PAPERS,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_SALES_RETURN_PAPERS,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_INCOME_PAPERS,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CASH_PAPERS,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_PAPERS,
					SUM(ACTION_VALUE) GET_CHEQUE_RETURN,
					SUM(ACTION_VALUE_2) GET_CHEQUE2_RETURN,
					COUNT(ACTION_TYPE_ID) GET_CHEQUE_RETURN_PAPERS,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,
					0 GET_VOUCHER_PAPERS,
					0 GET_VOUCHER_RETURN,			
					0 GET_VOUCHER2_RETURN,
					0 GET_VOUCHER_RETURN_PAPERS,	
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_REVENUE_PAPERS,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_CREDIT_REVENUE_PAPERS,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_PAYM_PAPERS,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_PAPERS,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_CHEQUE_P_RETURN_PAPERS,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_PAPERS,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_VOUCHER_P_RETURN_PAPERS,	
					0 GET_PAYMENTS,
					0 GET_PAYMENTS2,
					0 GET_PAYMENTS_PAPERS,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS2,
					0 GET_CREDIT_PAYMENTS_PAPERS	
				FROM
					CARI_ROWS
				WHERE

					ACTION_TYPE_ID IN (94)
				GROUP BY
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
	
				SELECT
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASES_PAPERS,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_DIFF_PAPERS,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_PURCHASE_RETURN_PAPERS,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_EXPENSE_PAPERS,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_PAPERS,
					0 GET_SALES_CANCELED,
					0 GET_SALES2_CANCELED,
					0 GET_SALES_PAPERS_CANCELED,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_DIFF_PAPERS,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_SALES_RETURN_PAPERS,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_INCOME_PAPERS,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CASH_PAPERS,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_PAPERS,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_CHEQUE_RETURN_PAPERS,
					SUM(ACTION_VALUE) GET_VOUCHER,
					SUM(ACTION_VALUE_2) GET_VOUCHER2,	
					COUNT(ACTION_TYPE_ID) GET_VOUCHER_PAPERS,
					0 GET_VOUCHER_RETURN,			
					0 GET_VOUCHER2_RETURN,
					0 GET_VOUCHER_RETURN_PAPERS,	
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_REVENUE_PAPERS,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_CREDIT_REVENUE_PAPERS,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_PAYM_PAPERS,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_PAPERS,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_CHEQUE_P_RETURN_PAPERS,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_PAPERS,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_VOUCHER_P_RETURN_PAPERS,	
					0 GET_PAYMENTS,
					0 GET_PAYMENTS2,
					0 GET_PAYMENTS_PAPERS,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS2,
					0 GET_CREDIT_PAYMENTS_PAPERS
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (97)
				GROUP BY
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASES_PAPERS,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_DIFF_PAPERS,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_PURCHASE_RETURN_PAPERS,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_EXPENSE_PAPERS,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_PAPERS,
					0 GET_SALES_CANCELED,
					0 GET_SALES2_CANCELED,
					0 GET_SALES_PAPERS_CANCELED,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_DIFF_PAPERS,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_SALES_RETURN_PAPERS,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_INCOME_PAPERS,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CASH_PAPERS,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_PAPERS,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_CHEQUE_RETURN_PAPERS,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,
					0 GET_VOUCHER_PAPERS,
					SUM(ACTION_VALUE) GET_VOUCHER_RETURN,	
					SUM(ACTION_VALUE_2) GET_VOUCHER2_RETURN,					
					COUNT(ACTION_TYPE_ID) GET_VOUCHER_RETURN_PAPERS,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_REVENUE_PAPERS,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_CREDIT_REVENUE_PAPERS,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_PAYM_PAPERS,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_PAPERS,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_CHEQUE_P_RETURN_PAPERS,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_PAPERS,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_VOUCHER_P_RETURN_PAPERS,	
					0 GET_PAYMENTS,
					0 GET_PAYMENTS2,
					0 GET_PAYMENTS_PAPERS,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS2,
					0 GET_CREDIT_PAYMENTS_PAPERS
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (101)
				GROUP BY
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL 
				SELECT
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASES_PAPERS,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_DIFF_PAPERS,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_PURCHASE_RETURN_PAPERS,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_EXPENSE_PAPERS,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_PAPERS,
					0 GET_SALES_CANCELED,
					0 GET_SALES2_CANCELED,
					0 GET_SALES_PAPERS_CANCELED,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_DIFF_PAPERS,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_SALES_RETURN_PAPERS,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_INCOME_PAPERS,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CASH_PAPERS,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_PAPERS,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_CHEQUE_RETURN_PAPERS,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,
					0 GET_VOUCHER_PAPERS,
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_VOUCHER_RETURN_PAPERS,
					SUM(ACTION_VALUE) GET_REVENUE,
					SUM(ACTION_VALUE_2) GET_REVENUE2,
					COUNT(ACTION_TYPE_ID) GET_REVENUE_PAPERS,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_CREDIT_REVENUE_PAPERS,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_PAYM_PAPERS,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_PAPERS,

					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_CHEQUE_P_RETURN_PAPERS,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_PAPERS,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_VOUCHER_P_RETURN_PAPERS,	
					0 GET_PAYMENTS,
					0 GET_PAYMENTS2,
					0 GET_PAYMENTS_PAPERS,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS2,
					0 GET_CREDIT_PAYMENTS_PAPERS
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (24,240,241,1043,1053)
				GROUP BY
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASES_PAPERS,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_DIFF_PAPERS,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_PURCHASE_RETURN_PAPERS,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_EXPENSE_PAPERS,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_PAPERS,
					0 GET_SALES_CANCELED,
					0 GET_SALES2_CANCELED,
					0 GET_SALES_PAPERS_CANCELED,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_DIFF_PAPERS,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_SALES_RETURN_PAPERS,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_INCOME_PAPERS,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CASH_PAPERS,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_PAPERS,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_CHEQUE_RETURN_PAPERS,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,
					0 GET_VOUCHER_PAPERS,
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_VOUCHER_RETURN_PAPERS,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_REVENUE_PAPERS,
					SUM(ACTION_VALUE) GET_CREDIT_REVENUE,
					SUM(ACTION_VALUE_2) GET_CREDIT_REVENUE2,
					COUNT(ACTION_TYPE_ID) GET_CREDIT_REVENUE_PAPERS,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_PAYM_PAPERS,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_PAPERS,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_CHEQUE_P_RETURN_PAPERS,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_PAPERS,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_VOUCHER_P_RETURN_PAPERS,	
					0 GET_PAYMENTS,
					0 GET_PAYMENTS2,
					0 GET_PAYMENTS_PAPERS,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS2,
					0 GET_CREDIT_PAYMENTS_PAPERS
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (292)
	
				GROUP BY
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASES_PAPERS,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_DIFF_PAPERS,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_PURCHASE_RETURN_PAPERS,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_EXPENSE_PAPERS,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_PAPERS,
					0 GET_SALES_CANCELED,
					0 GET_SALES2_CANCELED,
					0 GET_SALES_PAPERS_CANCELED,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_DIFF_PAPERS,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_SALES_RETURN_PAPERS,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_INCOME_PAPERS,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CASH_PAPERS,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_PAPERS,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_CHEQUE_RETURN_PAPERS,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,
					0 GET_VOUCHER_PAPERS,
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_VOUCHER_RETURN_PAPERS,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_REVENUE_PAPERS,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_CREDIT_REVENUE_PAPERS,
					SUM(ACTION_VALUE) GET_PAYM,
					SUM(ACTION_VALUE_2) GET_PAYM2,
					COUNT(ACTION_TYPE_ID) GET_PAYM_PAPERS,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_PAPERS,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_CHEQUE_P_RETURN_PAPERS,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_PAPERS,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_VOUCHER_P_RETURN_PAPERS,	
					0 GET_PAYMENTS,
					0 GET_PAYMENTS2,
					0 GET_PAYMENTS_PAPERS,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS2,
					0 GET_CREDIT_PAYMENTS_PAPERS
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (32,1041,1051)
				GROUP BY
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASES_PAPERS,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_DIFF_PAPERS,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_PURCHASE_RETURN_PAPERS,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_EXPENSE_PAPERS,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_PAPERS,
					0 GET_SALES_CANCELED,
					0 GET_SALES2_CANCELED,
					0 GET_SALES_PAPERS_CANCELED,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_DIFF_PAPERS,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_SALES_RETURN_PAPERS,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_INCOME_PAPERS,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CASH_PAPERS,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_PAPERS,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_CHEQUE_RETURN_PAPERS,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,
					0 GET_VOUCHER_PAPERS,
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_VOUCHER_RETURN_PAPERS,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_REVENUE_PAPERS,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_CREDIT_REVENUE_PAPERS,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_PAYM_PAPERS,
					SUM(ACTION_VALUE) GET_CHEQUE_P,
					SUM(ACTION_VALUE_2) GET_CHEQUE_P2,
					COUNT(ACTION_TYPE_ID) GET_CHEQUE_P_PAPERS,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_CHEQUE_P_RETURN_PAPERS,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_PAPERS,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_VOUCHER_P_RETURN_PAPERS,	
					0 GET_PAYMENTS,
					0 GET_PAYMENTS2,
					0 GET_PAYMENTS_PAPERS,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS2,
					0 GET_CREDIT_PAYMENTS_PAPERS
				FROM
					CARI_ROWS
				WHERE
	
					ACTION_TYPE_ID IN (91)
	
				GROUP BY
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASES_PAPERS,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_DIFF_PAPERS,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_PURCHASE_RETURN_PAPERS,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_EXPENSE_PAPERS,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_PAPERS,
					0 GET_SALES_CANCELED,
					0 GET_SALES2_CANCELED,
					0 GET_SALES_PAPERS_CANCELED,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_DIFF_PAPERS,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_SALES_RETURN_PAPERS,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_INCOME_PAPERS,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CASH_PAPERS,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_PAPERS,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_CHEQUE_RETURN_PAPERS,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,
					0 GET_VOUCHER_PAPERS,
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_VOUCHER_RETURN_PAPERS,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_REVENUE_PAPERS,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_CREDIT_REVENUE_PAPERS,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_PAYM_PAPERS,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_PAPERS,
					SUM(ACTION_VALUE) GET_CHEQUE_P_RETURN,
					SUM(ACTION_VALUE_2) GET_CHEQUE_P2_RETURN,
					COUNT(ACTION_TYPE_ID) GET_CHEQUE_P_RETURN_PAPERS,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_PAPERS,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_VOUCHER_P_RETURN_PAPERS,	
					0 GET_PAYMENTS,
					0 GET_PAYMENTS2,
					0 GET_PAYMENTS_PAPERS,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS2,
					0 GET_CREDIT_PAYMENTS_PAPERS
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (95)
	
				GROUP BY
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID	
		UNION ALL
				SELECT
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASES_PAPERS,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_DIFF_PAPERS,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_PURCHASE_RETURN_PAPERS,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_EXPENSE_PAPERS,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_PAPERS,
					0 GET_SALES_CANCELED,
					0 GET_SALES2_CANCELED,
					0 GET_SALES_PAPERS_CANCELED,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_DIFF_PAPERS,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_SALES_RETURN_PAPERS,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_INCOME_PAPERS,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CASH_PAPERS,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_PAPERS,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_CHEQUE_RETURN_PAPERS,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,
					0 GET_VOUCHER_PAPERS,
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_VOUCHER_RETURN_PAPERS,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_REVENUE_PAPERS,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_CREDIT_REVENUE_PAPERS,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_PAYM_PAPERS,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_PAPERS,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_CHEQUE_P_RETURN_PAPERS,
					SUM(ACTION_VALUE) GET_VOUCHER_P,
					SUM(ACTION_VALUE_2) GET_VOUCHER_P2,
					COUNT(ACTION_TYPE_ID) GET_VOUCHER_P_PAPERS,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_VOUCHER_P_RETURN_PAPERS,	
					0 GET_PAYMENTS,
					0 GET_PAYMENTS2,
					0 GET_PAYMENTS_PAPERS,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS2,
					0 GET_CREDIT_PAYMENTS_PAPERS
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (98)
				GROUP BY
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASES_PAPERS,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_DIFF_PAPERS,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_PURCHASE_RETURN_PAPERS,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_EXPENSE_PAPERS,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_PAPERS,
					0 GET_SALES_CANCELED,
					0 GET_SALES2_CANCELED,
					0 GET_SALES_PAPERS_CANCELED,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_DIFF_PAPERS,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_SALES_RETURN_PAPERS,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_INCOME_PAPERS,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CASH_PAPERS,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_PAPERS,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_CHEQUE_RETURN_PAPERS,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,
					0 GET_VOUCHER_PAPERS,
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_VOUCHER_RETURN_PAPERS,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_REVENUE_PAPERS,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_CREDIT_REVENUE_PAPERS,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_PAYM_PAPERS,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_PAPERS,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_CHEQUE_P_RETURN_PAPERS,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_PAPERS,
					SUM(ACTION_VALUE) GET_VOUCHER_P_RETURN,
					SUM(ACTION_VALUE_2) GET_VOUCHER_P2_RETURN,
					COUNT(ACTION_TYPE_ID) GET_VOUCHER_P_RETURN_PAPERS,
					0 GET_PAYMENTS,
					0 GET_PAYMENTS2,
					0 GET_PAYMENTS_PAPERS,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS2,
					0 GET_CREDIT_PAYMENTS_PAPERS
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (108)
				GROUP BY
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASES_PAPERS,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_DIFF_PAPERS,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_PURCHASE_RETURN_PAPERS,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_EXPENSE_PAPERS,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_PAPERS,
					0 GET_SALES_CANCELED,
					0 GET_SALES2_CANCELED,
					0 GET_SALES_PAPERS_CANCELED,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_DIFF_PAPERS,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_SALES_RETURN_PAPERS,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_INCOME_PAPERS,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CASH_PAPERS,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_PAPERS,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_CHEQUE_RETURN_PAPERS,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,
					0 GET_VOUCHER_PAPERS,
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_VOUCHER_RETURN_PAPERS,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_REVENUE_PAPERS,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_CREDIT_REVENUE_PAPERS,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_PAYM_PAPERS,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_PAPERS,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_CHEQUE_P_RETURN_PAPERS,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_PAPERS,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_VOUCHER_P_RETURN_PAPERS,	
					SUM(ACTION_VALUE) GET_PAYMENTS,
					SUM(ACTION_VALUE_2) GET_PAYMENTS2,
					COUNT(ACTION_TYPE_ID) GET_PAYMENTS_PAPERS,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS2,
					0 GET_CREDIT_PAYMENTS_PAPERS
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (25,242,1044,1054)
				GROUP BY
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASES_PAPERS,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_DIFF_PAPERS,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_PURCHASE_RETURN_PAPERS,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_EXPENSE_PAPERS,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_PAPERS,
					0 GET_SALES_CANCELED,
					0 GET_SALES2_CANCELED,
					0 GET_SALES_PAPERS_CANCELED,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_DIFF_PAPERS,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_SALES_RETURN_PAPERS,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_INCOME_PAPERS,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CASH_PAPERS,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_PAPERS,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_CHEQUE_RETURN_PAPERS,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,
					0 GET_VOUCHER_PAPERS,
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_VOUCHER_RETURN_PAPERS,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_REVENUE_PAPERS,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_CREDIT_REVENUE_PAPERS,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_PAYM_PAPERS,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_PAPERS,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_CHEQUE_P_RETURN_PAPERS,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_PAPERS,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_VOUCHER_P_RETURN_PAPERS,
					0 GET_PAYMENTS,
					0 GET_PAYMENTS2,
					0 GET_PAYMENTS_PAPERS,
					SUM(ACTION_VALUE) GET_CREDIT_PAYMENTS,
					SUM(ACTION_VALUE_2) GET_CREDIT_PAYMENTS2,
					COUNT(ACTION_TYPE_ID) GET_CREDIT_PAYMENTS_PAPERS
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (291)
				GROUP BY
					ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
			) GET_CARI_ROWS
		GROUP BY
			ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACTIVITY_SUMMARY_DAILY_FOR_COMPANY]  AS
			SELECT
				COMPANY_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
				SUM(GET_PURCHASES) GET_PURCHASES,
				SUM(GET_PURCHASES2) GET_PURCHASES2,
				SUM(GET_PURCHASE_DIFF) GET_PURCHASE_DIFF,
				SUM(GET_PURCHASE_DIFF2) GET_PURCHASE_DIFF2,
				SUM(GET_PURCHASE_RETURN) GET_PURCHASE_RETURN,
				SUM(GET_PURCHASE_RETURN2) GET_PURCHASE_RETURN2,
				SUM(GET_EXPENSE) GET_EXPENSE,
				SUM(GET_EXPENSE2) GET_EXPENSE2,
				SUM(GET_SALES) GET_SALES,
				SUM(GET_SALES2) GET_SALES2,
				SUM(GET_SALES_DIFF) GET_SALES_DIFF,
				SUM(GET_SALES_DIFF2) GET_SALES_DIFF2,
				SUM(GET_SALES_RETURN) GET_SALES_RETURN,
				SUM(GET_SALES_RETURN2) GET_SALES_RETURN2,
				SUM(GET_INCOME) GET_INCOME,
				SUM(GET_INCOME2) GET_INCOME2,
				SUM(GET_CASH) GET_CASH,
				SUM(GET_CASH2) GET_CASH2,
				SUM(GET_CHEQUE) GET_CHEQUE,
				SUM(GET_CHEQUE2)GET_CHEQUE2,
				SUM(GET_CHEQUE_RETURN) GET_CHEQUE_RETURN,
				SUM(GET_CHEQUE2_RETURN)GET_CHEQUE2_RETURN,
				SUM(GET_VOUCHER) GET_VOUCHER,		
				SUM(GET_VOUCHER2) GET_VOUCHER2,
				SUM(GET_VOUCHER_RETURN) GET_VOUCHER_RETURN,
				SUM(GET_VOUCHER2_RETURN) GET_VOUCHER2_RETURN,
				SUM(GET_REVENUE) GET_REVENUE,
				SUM(GET_REVENUE2)GET_REVENUE2,
				SUM(GET_CREDIT_REVENUE) GET_CREDIT_REVENUE,
				SUM(GET_CREDIT_REVENUE2)GET_CREDIT_REVENUE2,
				SUM(GET_PAYM) GET_PAYM,
				SUM(GET_PAYM2)GET_PAYM2,
				SUM(GET_CHEQUE_P) GET_CHEQUE_P,
				SUM(GET_CHEQUE_P2) GET_CHEQUE_P2,
				SUM(GET_CHEQUE_P_RETURN) GET_CHEQUE_P_RETURN,
				SUM(GET_CHEQUE_P2_RETURN) GET_CHEQUE_P2_RETURN,
				SUM(GET_VOUCHER_P) GET_VOUCHER_P,	
				SUM(GET_VOUCHER_P2) GET_VOUCHER_P2,
				SUM(GET_VOUCHER_P_RETURN) GET_VOUCHER_P_RETURN,
				SUM(GET_VOUCHER_P2_RETURN) GET_VOUCHER_P2_RETURN,
				SUM(GET_PAYMENTS) GET_PAYMENTS,
				SUM(GET_PAYMENTS_2) GET_PAYMENTS2,
				SUM(GET_CREDIT_PAYMENTS) GET_CREDIT_PAYMENTS,
				SUM(GET_CREDIT_PAYMENTS_2) GET_CREDIT_PAYMENTS2
			FROM (
			
					SELECT
						FROM_CMP_ID COMPANY_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
						SUM(ACTION_VALUE) GET_PURCHASES,
						SUM(ACTION_VALUE_2) GET_PURCHASES2,
						0 GET_PURCHASE_DIFF,
						0 GET_PURCHASE_DIFF2,
						0 GET_PURCHASE_RETURN,
						0 GET_PURCHASE_RETURN2,
						0 GET_EXPENSE,
						0 GET_EXPENSE2,
						0 GET_SALES,
						0 GET_SALES2,
						0 GET_SALES_DIFF,
						0 GET_SALES_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_INCOME,
						0 GET_INCOME2,
						0 GET_CASH,
						0 GET_CASH2,
						0 GET_CHEQUE,
						0 GET_CHEQUE2,
						0 GET_CHEQUE_RETURN,
						0 GET_CHEQUE2_RETURN,
						0 GET_VOUCHER,
						0 GET_VOUCHER2,	
						0 GET_VOUCHER_RETURN,			
						0 GET_VOUCHER2_RETURN,
						0 GET_REVENUE,
						0 GET_REVENUE2,
						0 GET_CREDIT_REVENUE,
						0 GET_CREDIT_REVENUE2,
						0 GET_PAYM,
						0 GET_PAYM2,
						0 GET_CHEQUE_P,
						0 GET_CHEQUE_P2,
						0 GET_CHEQUE_P_RETURN,
						0 GET_CHEQUE_P2_RETURN,
						0 GET_VOUCHER_P,
						0 GET_VOUCHER_P2,
						0 GET_VOUCHER_P_RETURN,	
						0 GET_VOUCHER_P2_RETURN,
						0 GET_PAYMENTS,
						0 GET_PAYMENTS_2,
						0 GET_CREDIT_PAYMENTS,
						0 GET_CREDIT_PAYMENTS_2
					FROM
						CARI_ROWS
					WHERE
						ACTION_TYPE_ID IN (59,60,601,64,65,68,690,691,591,592) AND
						FROM_CMP_ID IS NOT NULL
					GROUP BY
						ACTION_DATE,FROM_CMP_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID	
			UNION ALL
					SELECT
						FROM_CMP_ID COMPANY_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
						0 GET_PURCHASES,
						0 GET_PURCHASES2,
						SUM(ACTION_VALUE) GET_PURCHASE_DIFF,
						SUM(ACTION_VALUE_2) GET_PURCHASE_DIFF2,
						0 GET_PURCHASE_RETURN,
						0 GET_PURCHASE_RETURN2,
						0 GET_EXPENSE,
						0 GET_EXPENSE2,
						0 GET_SALES,
						0 GET_SALES2,
						0 GET_SALES_DIFF,
						0 GET_SALES_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_INCOME,
						0 GET_INCOME2,
						0 GET_CASH,
						0 GET_CASH2,
						0 GET_CHEQUE,					
						0 GET_CHEQUE2,
						0 GET_CHEQUE_RETURN,
						0 GET_CHEQUE2_RETURN,
						0 GET_VOUCHER,
						0 GET_VOUCHER2,	
						0 GET_VOUCHER_RETURN,			
						0 GET_VOUCHER2_RETURN,
						0 GET_REVENUE,
						0 GET_REVENUE2,
						0 GET_CREDIT_REVENUE,
						0 GET_CREDIT_REVENUE2,
						0 GET_PAYM,
						0 GET_PAYM2,
						0 GET_CHEQUE_P,
						0 GET_CHEQUE_P2,
						0 GET_CHEQUE_P_RETURN,
						0 GET_CHEQUE_P2_RETURN,
						0 GET_VOUCHER_P,
						0 GET_VOUCHER_P2,
						0 GET_VOUCHER_P_RETURN,
						0 GET_VOUCHER_P2_RETURN,
						0 GET_PAYMENTS,
						0 GET_PAYMENTS_2,
						0 GET_CREDIT_PAYMENTS,
						0 GET_CREDIT_PAYMENTS_2
						
					FROM
						CARI_ROWS
					WHERE
						ACTION_TYPE_ID IN (51,63) AND
						FROM_CMP_ID IS NOT NULL
					GROUP BY
						ACTION_DATE,FROM_CMP_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
			UNION ALL
					SELECT
						TO_CMP_ID COMPANY_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
						0 GET_PURCHASES,
						0 GET_PURCHASES2,
						0 GET_PURCHASE_DIFF,
						0 GET_PURCHASE_DIFF2,
						SUM(ACTION_VALUE) GET_PURCHASE_RETURN,
						SUM(ACTION_VALUE_2) GET_PURCHASE_RETURN2,
						0 GET_EXPENSE,
						0 GET_EXPENSE2,
						0 GET_SALES,
						0 GET_SALES2,
						0 GET_SALES_DIFF,
						0 GET_SALES_DIFF2,
						0 GET_SALES_RETURN,
	
						0 GET_SALES_RETURN2,
						0 GET_INCOME,
						0 GET_INCOME2,
						0 GET_CASH,
						0 GET_CASH2,
						0 GET_CHEQUE,
						0 GET_CHEQUE2,
						0 GET_CHEQUE_RETURN,
						0 GET_CHEQUE2_RETURN,
						0 GET_VOUCHER,
						0 GET_VOUCHER2,		
						0 GET_VOUCHER_RETURN,		
						0 GET_VOUCHER2_RETURN,
						0 GET_REVENUE,
						0 GET_REVENUE2,
						0 GET_CREDIT_REVENUE,
						0 GET_CREDIT_REVENUE2,
						0 GET_PAYM,
						0 GET_PAYM2,
						0 GET_CHEQUE_P,
						0 GET_CHEQUE_P2,
						0 GET_CHEQUE_P_RETURN,
						0 GET_CHEQUE_P2_RETURN,
						0 GET_VOUCHER_P,
						0 GET_VOUCHER_P2,
						0 GET_VOUCHER_P_RETURN,
						0 GET_VOUCHER_P2_RETURN,
						0 GET_PAYMENTS,
						0 GET_PAYMENTS_2,
						0 GET_CREDIT_PAYMENTS,
						0 GET_CREDIT_PAYMENTS_2
						
					FROM
						CARI_ROWS
					WHERE
						ACTION_TYPE_ID IN (62) AND
						TO_CMP_ID IS NOT NULL
					GROUP BY
						ACTION_DATE,TO_CMP_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
			UNION ALL
					SELECT
						FROM_CMP_ID COMPANY_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
						0 GET_PURCHASES,
						0 GET_PURCHASES2,
						0 GET_PURCHASE_DIFF,
	
						0 GET_PURCHASE_DIFF2,
						0 GET_PURCHASE_RETURN,
						0 GET_PURCHASE_RETURN2,
						SUM(ACTION_VALUE) GET_EXPENSE,
						SUM(ACTION_VALUE_2) GET_EXPENSE2,
						0 GET_SALES,
						0 GET_SALES2,
						0 GET_SALES_DIFF,
						0 GET_SALES_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_INCOME,
						0 GET_INCOME2,
						0 GET_CASH,
						0 GET_CASH2,
						0 GET_CHEQUE,
						0 GET_CHEQUE2,
						0 GET_CHEQUE_RETURN,
						0 GET_CHEQUE2_RETURN,
						0 GET_VOUCHER,
						0 GET_VOUCHER2,		
						0 GET_VOUCHER_RETURN,		
						0 GET_VOUCHER2_RETURN,
						0 GET_REVENUE,
						0 GET_REVENUE2,
						0 GET_CREDIT_REVENUE,
						0 GET_CREDIT_REVENUE2,
						0 GET_PAYM,
						0 GET_PAYM2,
						0 GET_CHEQUE_P,
						0 GET_CHEQUE_P2,
						0 GET_CHEQUE_P_RETURN,
						0 GET_CHEQUE_P2_RETURN,
						0 GET_VOUCHER_P,
						0 GET_VOUCHER_P2,
						0 GET_VOUCHER_P_RETURN,	
						0 GET_VOUCHER_P2_RETURN,
						0 GET_PAYMENTS,
						0 GET_PAYMENTS_2,
						0 GET_CREDIT_PAYMENTS,
						0 GET_CREDIT_PAYMENTS_2
					FROM
						CARI_ROWS
					WHERE
						ACTION_TYPE_ID IN (42,120,131)AND
						FROM_CMP_ID IS NOT NULL
					GROUP BY
						ACTION_DATE,FROM_CMP_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
			UNION ALL
					SELECT
						TO_CMP_ID COMPANY_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
						0 GET_PURCHASES,
						0 GET_PURCHASES2,
						0 GET_PURCHASE_DIFF,
						0 GET_PURCHASE_DIFF2,
						0 GET_PURCHASE_RETURN,
						0 GET_PURCHASE_RETURN2,
						0 GET_EXPENSE,
						0 GET_EXPENSE2,
						SUM(ACTION_VALUE) GET_SALES,
						SUM(ACTION_VALUE_2) GET_SALES2,
						0 GET_SALES_DIFF,
						0 GET_SALES_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_INCOME,
						0 GET_INCOME2,
						0 GET_CASH,
						0 GET_CASH2,
						0 GET_CHEQUE,
						0 GET_CHEQUE2,
						0 GET_CHEQUE_RETURN,
						0 GET_CHEQUE2_RETURN,
						0 GET_VOUCHER,
						0 GET_VOUCHER2,		
						0 GET_VOUCHER_RETURN,		
						0 GET_VOUCHER2_RETURN,
						0 GET_REVENUE,
						0 GET_REVENUE2,
						0 GET_CREDIT_REVENUE,
						0 GET_CREDIT_REVENUE2,
						0 GET_PAYM,
						0 GET_PAYM2,
						0 GET_CHEQUE_P,
						0 GET_CHEQUE_P2,
						0 GET_CHEQUE_P_RETURN,
						0 GET_CHEQUE_P2_RETURN,
						0 GET_VOUCHER_P,
						0 GET_VOUCHER_P2,
						0 GET_VOUCHER_P_RETURN,	
						0 GET_VOUCHER_P2_RETURN,
						0 GET_PAYMENTS,
						0 GET_PAYMENTS_2,
						0 GET_CREDIT_PAYMENTS,
						0 GET_CREDIT_PAYMENTS_2
					FROM
						CARI_ROWS
					WHERE
						ACTION_TYPE_ID IN (52,53,56,561,66,67,531)AND
						TO_CMP_ID IS NOT NULL
					GROUP BY
						ACTION_DATE,TO_CMP_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
			UNION ALL
					SELECT
						TO_CMP_ID COMPANY_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
						0 GET_PURCHASES,
						0 GET_PURCHASES2,
						0 GET_PURCHASE_DIFF,
						0 GET_PURCHASE_DIFF2,
						0 GET_PURCHASE_RETURN,
						0 GET_PURCHASE_RETURN2,
						0 GET_EXPENSE,
						0 GET_EXPENSE2,
						0 GET_SALES,
						0 GET_SALES2,
						SUM(ACTION_VALUE) GET_SALES_DIFF,
						SUM(ACTION_VALUE_2) GET_SALES_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_INCOME,
						0 GET_INCOME2,
						0 GET_CASH,
						0 GET_CASH2,
						0 GET_CHEQUE,
						0 GET_CHEQUE2,
						0 GET_CHEQUE_RETURN,
						0 GET_CHEQUE2_RETURN,
						0 GET_VOUCHER,
						0 GET_VOUCHER2,		
						0 GET_VOUCHER_RETURN,		
						0 GET_VOUCHER2_RETURN,
						0 GET_REVENUE,
						0 GET_REVENUE2,
						0 GET_CREDIT_REVENUE,
						0 GET_CREDIT_REVENUE2,
						0 GET_PAYM,
						0 GET_PAYM2,
						0 GET_CHEQUE_P,
						0 GET_CHEQUE_P2,
						0 GET_CHEQUE_P_RETURN,
						0 GET_CHEQUE_P2_RETURN,
						0 GET_VOUCHER_P,
						0 GET_VOUCHER_P2,
						0 GET_VOUCHER_P_RETURN,	
						0 GET_VOUCHER_P2_RETURN,
						0 GET_PAYMENTS,
						0 GET_PAYMENTS_2,
						0 GET_CREDIT_PAYMENTS,
						0 GET_CREDIT_PAYMENTS_2
					FROM
						CARI_ROWS
					WHERE
						ACTION_TYPE_ID IN (50,58)AND
						TO_CMP_ID IS NOT NULL
					GROUP BY
						ACTION_DATE,TO_CMP_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
			UNION ALL
					SELECT
						FROM_CMP_ID COMPANY_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
						0 GET_PURCHASES,
						0 GET_PURCHASES2,
						0 GET_PURCHASE_DIFF,
						0 GET_PURCHASE_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_EXPENSE,
						0 GET_EXPENSE2,
						0 GET_SALES,
						0 GET_SALES2,
						0 GET_SALES_DIFF,
						0 GET_SALES_DIFF2,
						SUM(ACTION_VALUE) GET_SALES_RETURN,
						SUM(ACTION_VALUE_2) GET_SALES_RETURN2,
						0 GET_INCOME,
						0 GET_INCOME2,
						0 GET_CASH,
						0 GET_CASH2,
						0 GET_CHEQUE,
						0 GET_CHEQUE2,
						0 GET_CHEQUE_RETURN,
						0 GET_CHEQUE2_RETURN,
						0 GET_VOUCHER,
						0 GET_VOUCHER2,		
						0 GET_VOUCHER_RETURN,		
						0 GET_VOUCHER2_RETURN,
						0 GET_REVENUE,
						0 GET_REVENUE2,
						0 GET_CREDIT_REVENUE,
						0 GET_CREDIT_REVENUE2,
						0 GET_PAYM,
						0 GET_PAYM2,
						0 GET_CHEQUE_P,
						0 GET_CHEQUE_P2,
						0 GET_CHEQUE_P_RETURN,
						0 GET_CHEQUE_P2_RETURN,
						0 GET_VOUCHER_P,
						0 GET_VOUCHER_P2,
						0 GET_VOUCHER_P_RETURN,
						0 GET_VOUCHER_P2_RETURN,
						0 GET_PAYMENTS,
						0 GET_PAYMENTS_2,
						0 GET_CREDIT_PAYMENTS,
						0 GET_CREDIT_PAYMENTS_2
					FROM
						CARI_ROWS
					WHERE
						ACTION_TYPE_ID IN (54,55)AND
						FROM_CMP_ID IS NOT NULL
					GROUP BY
						ACTION_DATE,FROM_CMP_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
			UNION ALL
					SELECT
						TO_CMP_ID COMPANY_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
						0 GET_PURCHASES,
						0 GET_PURCHASES2,
						0 GET_PURCHASE_DIFF,
						0 GET_PURCHASE_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_EXPENSE,
						0 GET_EXPENSE2,
						0 GET_SALES,
						0 GET_SALES2,
						0 GET_SALES_DIFF,
						0 GET_SALES_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						SUM(ACTION_VALUE) GET_INCOME,
						SUM(ACTION_VALUE_2) GET_INCOME2,
						0 GET_CASH,
						0 GET_CASH2,
						0 GET_CHEQUE,
						0 GET_CHEQUE2,
						0 GET_CHEQUE_RETURN,
						0 GET_CHEQUE2_RETURN,
						0 GET_VOUCHER,
						0 GET_VOUCHER2,		
						0 GET_VOUCHER_RETURN,		
						0 GET_VOUCHER2_RETURN,
						0 GET_REVENUE,
						0 GET_REVENUE2,
						0 GET_CREDIT_REVENUE,
						0 GET_CREDIT_REVENUE2,
						0 GET_PAYM,
						0 GET_PAYM2,
						0 GET_CHEQUE_P,
						0 GET_CHEQUE_P2,
						0 GET_CHEQUE_P_RETURN,
						0 GET_CHEQUE_P2_RETURN,
						0 GET_VOUCHER_P,
						0 GET_VOUCHER_P2,
						0 GET_VOUCHER_P_RETURN,
						0 GET_VOUCHER_P2_RETURN,
						0 GET_PAYMENTS,
						0 GET_PAYMENTS_2,
						0 GET_CREDIT_PAYMENTS,
						0 GET_CREDIT_PAYMENTS_2
					FROM
						CARI_ROWS
					WHERE
						ACTION_TYPE_ID IN (41,121)AND
						TO_CMP_ID IS NOT NULL
					GROUP BY
						ACTION_DATE,TO_CMP_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
			UNION ALL
					SELECT
						FROM_CMP_ID COMPANY_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
						0 GET_PURCHASES,
						0 GET_PURCHASES2,
						0 GET_PURCHASE_DIFF,
						0 GET_PURCHASE_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_EXPENSE,
						0 GET_EXPENSE2,
						0 GET_SALES,
						0 GET_SALES2,
						0 GET_SALES_DIFF,
						0 GET_SALES_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_INCOME,
						0 GET_INCOME2,
						SUM(ACTION_VALUE) GET_CASH,
						SUM(ACTION_VALUE_2) GET_CASH2,
						0 GET_CHEQUE,
						0 GET_CHEQUE2,
						0 GET_CHEQUE_RETURN,
						0 GET_CHEQUE2_RETURN,
						0 GET_VOUCHER,
						0 GET_VOUCHER2,		
						0 GET_VOUCHER_RETURN,		
						0 GET_VOUCHER2_RETURN,
						0 GET_REVENUE,
						0 GET_REVENUE2,
						0 GET_CREDIT_REVENUE,
						0 GET_CREDIT_REVENUE2,
						0 GET_PAYM,
						0 GET_PAYM2,
						0 GET_CHEQUE_P,
						0 GET_CHEQUE_P2,
						0 GET_CHEQUE_P_RETURN,
						0 GET_CHEQUE_P2_RETURN,
						0 GET_VOUCHER_P,
						0 GET_VOUCHER_P2,
						0 GET_VOUCHER_P_RETURN,
						0 GET_VOUCHER_P2_RETURN,
						0 GET_PAYMENTS,
						0 GET_PAYMENTS_2,
						0 GET_CREDIT_PAYMENTS,
						0 GET_CREDIT_PAYMENTS_2			
					FROM
						CARI_ROWS
					WHERE
						ACTION_TYPE_ID IN (31,35,1040,1050)AND
						FROM_CMP_ID IS NOT NULL
					GROUP BY
						ACTION_DATE,FROM_CMP_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
			UNION ALL
					SELECT
						FROM_CMP_ID COMPANY_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
						0 GET_PURCHASES,
						0 GET_PURCHASES2,
						0 GET_PURCHASE_DIFF,
						0 GET_PURCHASE_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_EXPENSE,
						0 GET_EXPENSE2,
						0 GET_SALES,
						0 GET_SALES2,
						0 GET_SALES_DIFF,
						0 GET_SALES_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_INCOME,
						0 GET_INCOME2,
						0 GET_CASH,
						0 GET_CASH2,
						SUM(ACTION_VALUE) GET_CHEQUE,
						SUM(ACTION_VALUE_2) GET_CHEQUE2,
						0 GET_CHEQUE_RETURN,
						0 GET_CHEQUE2_RETURN,
						0 GET_VOUCHER,
						0 GET_VOUCHER2,
						0 GET_VOUCHER_RETURN,		
						0 GET_VOUCHER2_RETURN,
						0 GET_REVENUE,
						0 GET_REVENUE2,
						0 GET_CREDIT_REVENUE,
						0 GET_CREDIT_REVENUE2,
						0 GET_PAYM,
						0 GET_PAYM2,
						0 GET_CHEQUE_P,
						0 GET_CHEQUE_P2,
						0 GET_CHEQUE_P_RETURN,
						0 GET_CHEQUE_P2_RETURN,
						0 GET_VOUCHER_P,
						0 GET_VOUCHER_P2,
						0 GET_VOUCHER_P_RETURN,
						0 GET_VOUCHER_P2_RETURN,
						0 GET_PAYMENTS,
						0 GET_PAYMENTS_2,
						0 GET_CREDIT_PAYMENTS,
						0 GET_CREDIT_PAYMENTS_2			
					FROM
						CARI_ROWS
					WHERE
						ACTION_TYPE_ID IN (90)AND
						FROM_CMP_ID IS NOT NULL
					GROUP BY
						ACTION_DATE,FROM_CMP_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
			UNION ALL
					SELECT
						TO_CMP_ID COMPANY_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
						0 GET_PURCHASES,
						0 GET_PURCHASES2,
						0 GET_PURCHASE_DIFF,
						0 GET_PURCHASE_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_EXPENSE,
						0 GET_EXPENSE2,
						0 GET_SALES,
						0 GET_SALES2,
						0 GET_SALES_DIFF,
						0 GET_SALES_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_INCOME,
						0 GET_INCOME2,
						0 GET_CASH,
						0 GET_CASH2,
						0 GET_CHEQUE,
						0 GET_CHEQUE2,
						SUM(ACTION_VALUE) GET_CHEQUE_RETURN,
						SUM(ACTION_VALUE_2) GET_CHEQUE2_RETURN,
						0 GET_VOUCHER,
						0 GET_VOUCHER2,	
						0 GET_VOUCHER_RETURN,			
						0 GET_VOUCHER2_RETURN,
						0 GET_REVENUE,
						0 GET_REVENUE2,
						0 GET_CREDIT_REVENUE,
						0 GET_CREDIT_REVENUE2,
						0 GET_PAYM,
						0 GET_PAYM2,
						0 GET_CHEQUE_P,
						0 GET_CHEQUE_P2,
						0 GET_CHEQUE_P_RETURN,
						0 GET_CHEQUE_P2_RETURN,
						0 GET_VOUCHER_P,
						0 GET_VOUCHER_P2,
						0 GET_VOUCHER_P_RETURN,
						0 GET_VOUCHER_P2_RETURN,
						0 GET_PAYMENTS,
						0 GET_PAYMENTS_2,
						0 GET_CREDIT_PAYMENTS,
						0 GET_CREDIT_PAYMENTS_2			
					FROM
						CARI_ROWS
					WHERE
						ACTION_TYPE_ID IN (94)AND
						TO_CMP_ID IS NOT NULL
					GROUP BY
						ACTION_DATE,TO_CMP_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
			UNION ALL
					SELECT
						FROM_CMP_ID COMPANY_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
						0 GET_PURCHASES,
						0 GET_PURCHASES2,
						0 GET_PURCHASE_DIFF,
						0 GET_PURCHASE_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_EXPENSE,
						0 GET_EXPENSE2,
						0 GET_SALES,
						0 GET_SALES2,
						0 GET_SALES_DIFF,
						0 GET_SALES_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_INCOME,
						0 GET_INCOME2,
						0 GET_CASH,
						0 GET_CASH2,
						0 GET_CHEQUE,
						0 GET_CHEQUE2,
						0 GET_CHEQUE_RETURN,
						0 GET_CHEQUE2_RETURN,
						SUM(ACTION_VALUE) GET_VOUCHER,
						SUM(ACTION_VALUE_2) GET_VOUCHER2,	
						0 GET_VOUCHER_RETURN,	
						0 GET_VOUCHER2_RETURN,
						0 GET_REVENUE,
						0 GET_REVENUE2,
						0 GET_CREDIT_REVENUE,
						0 GET_CREDIT_REVENUE2,
						0 GET_PAYM,
						0 GET_PAYM2,
						0 GET_CHEQUE_P,
						0 GET_CHEQUE_P2,
						0 GET_CHEQUE_P_RETURN,
						0 GET_CHEQUE_P2_RETURN,
						0 GET_VOUCHER_P,
						0 GET_VOUCHER_P2,
						0 GET_VOUCHER_P_RETURN,
						0 GET_VOUCHER_P2_RETURN,
						0 GET_PAYMENTS,
						0 GET_PAYMENTS_2,
						0 GET_CREDIT_PAYMENTS,
						0 GET_CREDIT_PAYMENTS_2
					FROM
						CARI_ROWS
					WHERE
						ACTION_TYPE_ID IN (97)AND
						FROM_CMP_ID IS NOT NULL
					GROUP BY
						ACTION_DATE,FROM_CMP_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
			UNION ALL
					SELECT
						TO_CMP_ID COMPANY_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
						0 GET_PURCHASES,
						0 GET_PURCHASES2,
						0 GET_PURCHASE_DIFF,
						0 GET_PURCHASE_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_EXPENSE,
						0 GET_EXPENSE2,
						0 GET_SALES,
						0 GET_SALES2,
						0 GET_SALES_DIFF,
						0 GET_SALES_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_INCOME,
						0 GET_INCOME2,
						0 GET_CASH,
						0 GET_CASH2,
						0 GET_CHEQUE,
						0 GET_CHEQUE2,
						0 GET_CHEQUE_RETURN,
						0 GET_CHEQUE2_RETURN,
						0 GET_VOUCHER,
						0 GET_VOUCHER2,		
						SUM(ACTION_VALUE) GET_VOUCHER_RETURN,	
						SUM(ACTION_VALUE_2) GET_VOUCHER2_RETURN,					
						0 GET_REVENUE,
						0 GET_REVENUE2,
						0 GET_CREDIT_REVENUE,
						0 GET_CREDIT_REVENUE2,
						0 GET_PAYM,
						0 GET_PAYM2,
						0 GET_CHEQUE_P,
						0 GET_CHEQUE_P2,
						0 GET_CHEQUE_P_RETURN,
						0 GET_CHEQUE_P2_RETURN,
						0 GET_VOUCHER_P,
						0 GET_VOUCHER_P2,
						0 GET_VOUCHER_P_RETURN,
						0 GET_VOUCHER_P2_RETURN,
						0 GET_PAYMENTS,
						0 GET_PAYMENTS_2,
						0 GET_CREDIT_PAYMENTS,
						0 GET_CREDIT_PAYMENTS_2
					FROM
						CARI_ROWS
					WHERE
						ACTION_TYPE_ID IN (101)AND
						TO_CMP_ID IS NOT NULL
					GROUP BY
						ACTION_DATE,TO_CMP_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
			UNION ALL
					SELECT
						FROM_CMP_ID COMPANY_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
						0 GET_PURCHASES,
						0 GET_PURCHASES2,
						0 GET_PURCHASE_DIFF,
						0 GET_PURCHASE_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_EXPENSE,
						0 GET_EXPENSE2,
						0 GET_SALES,
						0 GET_SALES2,
						0 GET_SALES_DIFF,
						0 GET_SALES_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_INCOME,
						0 GET_INCOME2,
						0 GET_CASH,
						0 GET_CASH2,
						0 GET_CHEQUE,
						0 GET_CHEQUE2,
						0 GET_CHEQUE_RETURN,
						0 GET_CHEQUE2_RETURN,
						0 GET_VOUCHER,
						0 GET_VOUCHER2,		
						0 GET_VOUCHER_RETURN,		
						0 GET_VOUCHER2_RETURN,
						SUM(ACTION_VALUE) GET_REVENUE,
						SUM(ACTION_VALUE_2) GET_REVENUE2,
						0 GET_CREDIT_REVENUE,
						0 GET_CREDIT_REVENUE2,
						0 GET_PAYM,
						0 GET_PAYM2,
						0 GET_CHEQUE_P,
						0 GET_CHEQUE_P2,
						0 GET_CHEQUE_P_RETURN,
						0 GET_CHEQUE_P2_RETURN,
						0 GET_VOUCHER_P,
						0 GET_VOUCHER_P2,
						0 GET_VOUCHER_P_RETURN,
						0 GET_VOUCHER_P2_RETURN,
						0 GET_PAYMENTS,
						0 GET_PAYMENTS_2,
						0 GET_CREDIT_PAYMENTS,
						0 GET_CREDIT_PAYMENTS_2
					FROM
						CARI_ROWS
					WHERE
						ACTION_TYPE_ID IN (24,240,241,1043,1053)AND
						FROM_CMP_ID IS NOT NULL
					GROUP BY
						ACTION_DATE,FROM_CMP_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
			UNION ALL
					SELECT
						FROM_CMP_ID COMPANY_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
						0 GET_PURCHASES,
						0 GET_PURCHASES2,
						0 GET_PURCHASE_DIFF,
						0 GET_PURCHASE_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_EXPENSE,
						0 GET_EXPENSE2,
						0 GET_SALES,
						0 GET_SALES2,
						0 GET_SALES_DIFF,
						0 GET_SALES_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_INCOME,
						0 GET_INCOME2,
						0 GET_CASH,
						0 GET_CASH2,
						0 GET_CHEQUE,
						0 GET_CHEQUE2,
						0 GET_CHEQUE_RETURN,
						0 GET_CHEQUE2_RETURN,
						0 GET_VOUCHER,
						0 GET_VOUCHER2,		
						0 GET_VOUCHER_RETURN,		
						0 GET_VOUCHER2_RETURN,
						0 GET_REVENUE,
						0 GET_REVENUE2,
						SUM(ACTION_VALUE) GET_CREDIT_REVENUE,
						SUM(ACTION_VALUE_2) GET_CREDIT_REVENUE2,
						0 GET_PAYM,
						0 GET_PAYM2,
						0 GET_CHEQUE_P,
						0 GET_CHEQUE_P2,
						0 GET_CHEQUE_P_RETURN,
						0 GET_CHEQUE_P2_RETURN,
						0 GET_VOUCHER_P,
						0 GET_VOUCHER_P2,
						0 GET_VOUCHER_P_RETURN,
						0 GET_VOUCHER_P2_RETURN,
						0 GET_PAYMENTS,
						0 GET_PAYMENTS_2,
						0 GET_CREDIT_PAYMENTS,
						0 GET_CREDIT_PAYMENTS_2			
					FROM
						CARI_ROWS
					WHERE
						ACTION_TYPE_ID IN (292)AND
						FROM_CMP_ID IS NOT NULL			
					GROUP BY
						ACTION_DATE,FROM_CMP_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
			UNION ALL
					SELECT
						TO_CMP_ID COMPANY_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
						0 GET_PURCHASES,
						0 GET_PURCHASES2,
						0 GET_PURCHASE_DIFF,
						0 GET_PURCHASE_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_EXPENSE,
						0 GET_EXPENSE2,
						0 GET_SALES,
						0 GET_SALES2,
						0 GET_SALES_DIFF,
						0 GET_SALES_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_INCOME,
						0 GET_INCOME2,
						0 GET_CASH,
						0 GET_CASH2,
						0 GET_CHEQUE,
						0 GET_CHEQUE2,
						0 GET_CHEQUE_RETURN,
						0 GET_CHEQUE2_RETURN,
						0 GET_VOUCHER,
						0 GET_VOUCHER2,		
						0 GET_VOUCHER_RETURN,		
						0 GET_VOUCHER2_RETURN,
						0 GET_REVENUE,
						0 GET_REVENUE2,
						0 GET_CREDIT_REVENUE,
						0 GET_CREDIT_REVENUE2,
						SUM(ACTION_VALUE) GET_PAYM,
						SUM(ACTION_VALUE_2) GET_PAYM2,
						0 GET_CHEQUE_P,
						0 GET_CHEQUE_P2,
						0 GET_CHEQUE_P_RETURN,
						0 GET_CHEQUE_P2_RETURN,
						0 GET_VOUCHER_P,
						0 GET_VOUCHER_P2,
						0 GET_VOUCHER_P_RETURN,
						0 GET_VOUCHER_P2_RETURN,
						0 GET_PAYMENTS,
						0 GET_PAYMENTS_2,
						0 GET_CREDIT_PAYMENTS,
						0 GET_CREDIT_PAYMENTS_2
					FROM
						CARI_ROWS
					WHERE
						ACTION_TYPE_ID IN (32,1041,1051)AND
						TO_CMP_ID IS NOT NULL
					GROUP BY
						ACTION_DATE,TO_CMP_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
			UNION ALL
					SELECT
						TO_CMP_ID COMPANY_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
						0 GET_PURCHASES,
						0 GET_PURCHASES2,
						0 GET_PURCHASE_DIFF,
						0 GET_PURCHASE_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_EXPENSE,
						0 GET_EXPENSE2,
						0 GET_SALES,
						0 GET_SALES2,
						0 GET_SALES_DIFF,
						0 GET_SALES_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_INCOME,
						0 GET_INCOME2,
						0 GET_CASH,
						0 GET_CASH2,
						0 GET_CHEQUE,
						0 GET_CHEQUE2,
						0 GET_CHEQUE_RETURN,
						0 GET_CHEQUE2_RETURN,
						0 GET_VOUCHER,
						0 GET_VOUCHER2,		
						0 GET_VOUCHER_RETURN,		
						0 GET_VOUCHER2_RETURN,
						0 GET_REVENUE,
						0 GET_REVENUE2,
						0 GET_CREDIT_REVENUE,
						0 GET_CREDIT_REVENUE2,
						0 GET_PAYM,
						0 GET_PAYM2,
						SUM(ACTION_VALUE) GET_CHEQUE_P,
						SUM(ACTION_VALUE_2) GET_CHEQUE_P2,
						0 GET_CHEQUE_P_RETURN,
						0 GET_CHEQUE_P2_RETURN,
						0 GET_VOUCHER_P,
						0 GET_VOUCHER_P2,
						0 GET_VOUCHER_P_RETURN,
						0 GET_VOUCHER_P2_RETURN,
						0 GET_PAYMENTS,
						0 GET_PAYMENTS_2,
						0 GET_CREDIT_PAYMENTS,
						0 GET_CREDIT_PAYMENTS_2
					FROM
						CARI_ROWS
					WHERE
						ACTION_TYPE_ID IN (91)AND
						TO_CMP_ID IS NOT NULL		
					GROUP BY
						ACTION_DATE,TO_CMP_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
			UNION ALL
					SELECT
						FROM_CMP_ID COMPANY_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
						0 GET_PURCHASES,
						0 GET_PURCHASES2,
						0 GET_PURCHASE_DIFF,
						0 GET_PURCHASE_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_EXPENSE,
						0 GET_EXPENSE2,
						0 GET_SALES,
						0 GET_SALES2,
						0 GET_SALES_DIFF,
						0 GET_SALES_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_INCOME,
						0 GET_INCOME2,
						0 GET_CASH,
						0 GET_CASH2,
						0 GET_CHEQUE,
						0 GET_CHEQUE2,
						0 GET_CHEQUE_RETURN,
						0 GET_CHEQUE2_RETURN,
						0 GET_VOUCHER,
						0 GET_VOUCHER2,		
						0 GET_VOUCHER_RETURN,		
						0 GET_VOUCHER2_RETURN,
						0 GET_REVENUE,
						0 GET_REVENUE2,
						0 GET_CREDIT_REVENUE,
						0 GET_CREDIT_REVENUE2,
						0 GET_PAYM,
						0 GET_PAYM2,
						0 GET_CHEQUE_P,
						0 GET_CHEQUE_P2,
						SUM(ACTION_VALUE) GET_CHEQUE_P_RETURN,
						SUM(ACTION_VALUE_2) GET_CHEQUE_P2_RETURN,
						0 GET_VOUCHER_P,
						0 GET_VOUCHER_P2,
						0 GET_VOUCHER_P_RETURN,
						0 GET_VOUCHER_P2_RETURN,
						0 GET_PAYMENTS,
						0 GET_PAYMENTS_2,
						0 GET_CREDIT_PAYMENTS,
						0 GET_CREDIT_PAYMENTS_2
					FROM
						CARI_ROWS
					WHERE
						ACTION_TYPE_ID IN (95)AND
						FROM_CMP_ID IS NOT NULL		
					GROUP BY
						ACTION_DATE,FROM_CMP_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
			UNION ALL
					SELECT
						TO_CMP_ID COMPANY_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
						0 GET_PURCHASES,
						0 GET_PURCHASES2,
						0 GET_PURCHASE_DIFF,
						0 GET_PURCHASE_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_EXPENSE,
						0 GET_EXPENSE2,
						0 GET_SALES,
						0 GET_SALES2,
						0 GET_SALES_DIFF,
						0 GET_SALES_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_INCOME,
						0 GET_INCOME2,
						0 GET_CASH,
						0 GET_CASH2,
						0 GET_CHEQUE,
						0 GET_CHEQUE2,
						0 GET_CHEQUE_RETURN,
						0 GET_CHEQUE2_RETURN,
						0 GET_VOUCHER,
						0 GET_VOUCHER2,		
						0 GET_VOUCHER_RETURN,		
						0 GET_VOUCHER2_RETURN,
						0 GET_REVENUE,
						0 GET_REVENUE2,
						0 GET_CREDIT_REVENUE,
						0 GET_CREDIT_REVENUE2,
						0 GET_PAYM,
						0 GET_PAYM2,
						0 GET_CHEQUE_P,
						0 GET_CHEQUE_P2,
						0 GET_CHEQUE_P_RETURN,
						0 GET_CHEQUE_P2_RETURN,
						SUM(ACTION_VALUE) GET_VOUCHER_P,
						SUM(ACTION_VALUE_2) GET_VOUCHER_P2,
						0 GET_VOUCHER_P_RETURN,
						0 GET_VOUCHER_P2_RETURN,
						0 GET_PAYMENTS,
						0 GET_PAYMENTS_2,
						0 GET_CREDIT_PAYMENTS,
						0 GET_CREDIT_PAYMENTS_2
					FROM
						CARI_ROWS
					WHERE
						ACTION_TYPE_ID IN (98)AND
						TO_CMP_ID IS NOT NULL
					GROUP BY
						ACTION_DATE,TO_CMP_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
			UNION ALL
					SELECT
						FROM_CMP_ID COMPANY_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
						0 GET_PURCHASES,
						0 GET_PURCHASES2,
						0 GET_PURCHASE_DIFF,
						0 GET_PURCHASE_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_EXPENSE,
						0 GET_EXPENSE2,
						0 GET_SALES,
						0 GET_SALES2,
						0 GET_SALES_DIFF,
						0 GET_SALES_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_INCOME,
						0 GET_INCOME2,
						0 GET_CASH,
						0 GET_CASH2,
						0 GET_CHEQUE,
						0 GET_CHEQUE2,
						0 GET_CHEQUE_RETURN,
						0 GET_CHEQUE2_RETURN,
						0 GET_VOUCHER,
						0 GET_VOUCHER2,		
						0 GET_VOUCHER_RETURN,		
						0 GET_VOUCHER2_RETURN,
						0 GET_REVENUE,
						0 GET_REVENUE2,
						0 GET_CREDIT_REVENUE,
						0 GET_CREDIT_REVENUE2,
						0 GET_PAYM,
						0 GET_PAYM2,
						0 GET_CHEQUE_P,
						0 GET_CHEQUE_P2,
						0 GET_CHEQUE_P_RETURN,
						0 GET_CHEQUE_P2_RETURN,
						0 GET_VOUCHER_P,
						0 GET_VOUCHER_P2,
						SUM(ACTION_VALUE) GET_VOUCHER_P_RETURN,
						SUM(ACTION_VALUE_2) GET_VOUCHER_P2_RETURN,
						0 GET_PAYMENTS,
						0 GET_PAYMENTS_2,
						0 GET_CREDIT_PAYMENTS,
						0 GET_CREDIT_PAYMENTS_2
					FROM
						CARI_ROWS
					WHERE
						ACTION_TYPE_ID IN (108)AND
						FROM_CMP_ID IS NOT NULL
					GROUP BY
						ACTION_DATE,FROM_CMP_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
			UNION ALL
					SELECT
						TO_CMP_ID COMPANY_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
						0 GET_PURCHASES,
						0 GET_PURCHASES2,
						0 GET_PURCHASE_DIFF,
						0 GET_PURCHASE_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_EXPENSE,
						0 GET_EXPENSE2,
	
						0 GET_SALES,
						0 GET_SALES2,
						0 GET_SALES_DIFF,
						0 GET_SALES_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_INCOME,
						0 GET_INCOME2,
						0 GET_CASH,
						0 GET_CASH2,
						0 GET_CHEQUE,
						0 GET_CHEQUE2,
						0 GET_CHEQUE_RETURN,
						0 GET_CHEQUE2_RETURN,
						0 GET_VOUCHER,
						0 GET_VOUCHER2,		
						0 GET_VOUCHER_RETURN,		
						0 GET_VOUCHER2_RETURN,
						0 GET_REVENUE,
						0 GET_REVENUE2,
						0 GET_CREDIT_REVENUE,
						0 GET_CREDIT_REVENUE2,
						0 GET_PAYM,
						0 GET_PAYM2,
						0 GET_CHEQUE_P,
						0 GET_CHEQUE_P2,
						0 GET_CHEQUE_P_RETURN,
						0 GET_CHEQUE_P2_RETURN,
						0 GET_VOUCHER_P,
						0 GET_VOUCHER_P2,
						0 GET_VOUCHER_P_RETURN,	
						0 GET_VOUCHER_P2_RETURN,
						SUM(ACTION_VALUE) GET_PAYMENTS,
						SUM(ACTION_VALUE_2) GET_PAYMENTS_2,
						0 GET_CREDIT_PAYMENTS,
						0 GET_CREDIT_PAYMENTS_2
					FROM
						CARI_ROWS
					WHERE
						ACTION_TYPE_ID IN (25,242,1044,1054)AND
						TO_CMP_ID IS NOT NULL
					GROUP BY
						ACTION_DATE,TO_CMP_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
			UNION ALL
					SELECT
						TO_CMP_ID COMPANY_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
						0 GET_PURCHASES,
						0 GET_PURCHASES2,
						0 GET_PURCHASE_DIFF,
						0 GET_PURCHASE_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_EXPENSE,
						0 GET_EXPENSE2,
						0 GET_SALES,
						0 GET_SALES2,
						0 GET_SALES_DIFF,
						0 GET_SALES_DIFF2,
						0 GET_SALES_RETURN,
						0 GET_SALES_RETURN2,
						0 GET_INCOME,
						0 GET_INCOME2,
						0 GET_CASH,
						0 GET_CASH2,
						0 GET_CHEQUE,
						0 GET_CHEQUE2,
						0 GET_CHEQUE_RETURN,
						0 GET_CHEQUE2_RETURN,
						0 GET_VOUCHER,
						0 GET_VOUCHER2,		
						0 GET_VOUCHER_RETURN,		
						0 GET_VOUCHER2_RETURN,
						0 GET_REVENUE,
						0 GET_REVENUE2,
						0 GET_CREDIT_REVENUE,
						0 GET_CREDIT_REVENUE2,
						0 GET_PAYM,
						0 GET_PAYM2,
						0 GET_CHEQUE_P,
						0 GET_CHEQUE_P2,
						0 GET_CHEQUE_P_RETURN,
						0 GET_CHEQUE_P2_RETURN,
						0 GET_VOUCHER_P,
						0 GET_VOUCHER_P2,
						0 GET_VOUCHER_P_RETURN,		
						0 GET_VOUCHER_P2_RETURN,
						0 GET_PAYMENTS,
						0 GET_PAYMENTS_2,
						SUM(ACTION_VALUE) GET_CREDIT_PAYMENTS,
						SUM(ACTION_VALUE_2) GET_CREDIT_PAYMENTS_2
					FROM
						CARI_ROWS
					WHERE
						ACTION_TYPE_ID IN (291)AND
						TO_CMP_ID IS NOT NULL
					GROUP BY
						ACTION_DATE,TO_CMP_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
				) GET_CARI_ROWS
			GROUP BY
				ACTION_DATE,COMPANY_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[ACTIVITY_SUMMARY_DAILY_FOR_CONSUMER] AS
		SELECT
			CONSUMER_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
			SUM(GET_PURCHASES) GET_PURCHASES,
			SUM(GET_PURCHASES2) GET_PURCHASES2,
			SUM(GET_PURCHASE_DIFF) GET_PURCHASE_DIFF,
			SUM(GET_PURCHASE_DIFF2) GET_PURCHASE_DIFF2,
			SUM(GET_PURCHASE_RETURN) GET_PURCHASE_RETURN,
			SUM(GET_PURCHASE_RETURN2) GET_PURCHASE_RETURN2,
			SUM(GET_EXPENSE) GET_EXPENSE,
			SUM(GET_EXPENSE2) GET_EXPENSE2,
			SUM(GET_SALES) GET_SALES,
			SUM(GET_SALES2) GET_SALES2,
			SUM(GET_SALES_DIFF) GET_SALES_DIFF,
			SUM(GET_SALES_DIFF2) GET_SALES_DIFF2,
			SUM(GET_SALES_RETURN) GET_SALES_RETURN,
			SUM(GET_SALES_RETURN2) GET_SALES_RETURN2,
			SUM(GET_INCOME) GET_INCOME,
			SUM(GET_INCOME2) GET_INCOME2,
			SUM(GET_CASH) GET_CASH,
			SUM(GET_CASH2) GET_CASH2,
			SUM(GET_CHEQUE) GET_CHEQUE,
			SUM(GET_CHEQUE2)GET_CHEQUE2,
			SUM(GET_CHEQUE_RETURN) GET_CHEQUE_RETURN,
			SUM(GET_CHEQUE2_RETURN)GET_CHEQUE2_RETURN,
			SUM(GET_VOUCHER) GET_VOUCHER,		
			SUM(GET_VOUCHER2) GET_VOUCHER2,
			SUM(GET_VOUCHER_RETURN) GET_VOUCHER_RETURN,
			SUM(GET_VOUCHER2_RETURN) GET_VOUCHER2_RETURN,
			SUM(GET_REVENUE) GET_REVENUE,
			SUM(GET_REVENUE2)GET_REVENUE2,
			SUM(GET_CREDIT_REVENUE) GET_CREDIT_REVENUE,
			SUM(GET_CREDIT_REVENUE2)GET_CREDIT_REVENUE2,
			SUM(GET_PAYM) GET_PAYM,
			SUM(GET_PAYM2)GET_PAYM2,
			SUM(GET_CHEQUE_P) GET_CHEQUE_P,
			SUM(GET_CHEQUE_P2) GET_CHEQUE_P2,
			SUM(GET_CHEQUE_P_RETURN) GET_CHEQUE_P_RETURN,
			SUM(GET_CHEQUE_P2_RETURN) GET_CHEQUE_P2_RETURN,
			SUM(GET_VOUCHER_P) GET_VOUCHER_P,	
			SUM(GET_VOUCHER_P2) GET_VOUCHER_P2,
			SUM(GET_VOUCHER_P_RETURN) GET_VOUCHER_P_RETURN,
			SUM(GET_VOUCHER_P2_RETURN) GET_VOUCHER_P2_RETURN,
			SUM(GET_PAYMENTS) GET_PAYMENTS,
			SUM(GET_PAYMENTS_2) GET_PAYMENTS2,
			SUM(GET_CREDIT_PAYMENTS) GET_CREDIT_PAYMENTS,
			SUM(GET_CREDIT_PAYMENTS_2) GET_CREDIT_PAYMENTS2
		FROM (
		
				SELECT
					FROM_CONSUMER_ID CONSUMER_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					SUM(ACTION_VALUE) GET_PURCHASES,
					SUM(ACTION_VALUE_2) GET_PURCHASES2,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,	
					0 GET_VOUCHER_RETURN,			
					0 GET_VOUCHER2_RETURN,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_PAYMENTS,
					0 GET_PAYMENTS_2,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS_2
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (59,60,601,64,65,68,690,691,591,592) AND
					FROM_CONSUMER_ID IS NOT NULL
				GROUP BY
					ACTION_DATE,FROM_CONSUMER_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID			
		UNION ALL
				SELECT
					FROM_CONSUMER_ID CONSUMER_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					SUM(ACTION_VALUE) GET_PURCHASE_DIFF,
					SUM(ACTION_VALUE_2) GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CHEQUE,					
					0 GET_CHEQUE2,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,	
					0 GET_VOUCHER_RETURN,			
					0 GET_VOUCHER2_RETURN,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_RETURN,
					0 GET_VOUCHER_P2_RETURN,
					0 GET_PAYMENTS,
					0 GET_PAYMENTS_2,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS_2
					
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (51,63) AND
					FROM_CONSUMER_ID IS NOT NULL
				GROUP BY
					ACTION_DATE,FROM_CONSUMER_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					TO_CONSUMER_ID CONSUMER_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					SUM(ACTION_VALUE) GET_PURCHASE_RETURN,
					SUM(ACTION_VALUE_2) GET_PURCHASE_RETURN2,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,		
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_RETURN,
					0 GET_VOUCHER_P2_RETURN,
					0 GET_PAYMENTS,
					0 GET_PAYMENTS_2,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS_2
					
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (62) AND
					TO_CONSUMER_ID IS NOT NULL
				GROUP BY
					ACTION_DATE,TO_CONSUMER_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					FROM_CONSUMER_ID CONSUMER_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					SUM(ACTION_VALUE) GET_EXPENSE,
					SUM(ACTION_VALUE_2) GET_EXPENSE2,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,		
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_PAYMENTS,
					0 GET_PAYMENTS_2,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS_2
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (42,120,131)AND
					FROM_CONSUMER_ID IS NOT NULL
				GROUP BY
					ACTION_DATE,FROM_CONSUMER_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					TO_CONSUMER_ID CONSUMER_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					SUM(ACTION_VALUE) GET_SALES,
					SUM(ACTION_VALUE_2) GET_SALES2,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,		
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_PAYMENTS,
					0 GET_PAYMENTS_2,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS_2
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (52,53,56,561,66,67,531)AND
					TO_CONSUMER_ID IS NOT NULL
				GROUP BY
					ACTION_DATE,TO_CONSUMER_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					TO_CONSUMER_ID CONSUMER_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_PURCHASE_RETURN,
					0 GET_PURCHASE_RETURN2,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_SALES,
					0 GET_SALES2,
					SUM(ACTION_VALUE) GET_SALES_DIFF,
					SUM(ACTION_VALUE_2) GET_SALES_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,		
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					0 GET_PAYMENTS,
					0 GET_PAYMENTS_2,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS_2
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (50,58)AND
					TO_CONSUMER_ID IS NOT NULL
				GROUP BY
					ACTION_DATE,TO_CONSUMER_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					FROM_CONSUMER_ID CONSUMER_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					SUM(ACTION_VALUE) GET_SALES_RETURN,
					SUM(ACTION_VALUE_2) GET_SALES_RETURN2,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,		
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_RETURN,
					0 GET_VOUCHER_P2_RETURN,
					0 GET_PAYMENTS,
					0 GET_PAYMENTS_2,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS_2
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (54,55)AND
					FROM_CONSUMER_ID IS NOT NULL
				GROUP BY
					ACTION_DATE,FROM_CONSUMER_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					TO_CONSUMER_ID CONSUMER_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					SUM(ACTION_VALUE) GET_INCOME,
					SUM(ACTION_VALUE_2) GET_INCOME2,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,		
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_RETURN,
					0 GET_VOUCHER_P2_RETURN,
					0 GET_PAYMENTS,
					0 GET_PAYMENTS_2,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS_2
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (41,121)AND
					TO_CONSUMER_ID IS NOT NULL
				GROUP BY
					ACTION_DATE,TO_CONSUMER_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					FROM_CONSUMER_ID CONSUMER_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_INCOME,
					0 GET_INCOME2,
					SUM(ACTION_VALUE) GET_CASH,
					SUM(ACTION_VALUE_2) GET_CASH2,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,		
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_RETURN,
					0 GET_VOUCHER_P2_RETURN,
					0 GET_PAYMENTS,
					0 GET_PAYMENTS_2,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS_2			
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (31,35,1040,1050)AND
					FROM_CONSUMER_ID IS NOT NULL
				GROUP BY
					ACTION_DATE,FROM_CONSUMER_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					FROM_CONSUMER_ID CONSUMER_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_CASH,
					0 GET_CASH2,
					SUM(ACTION_VALUE) GET_CHEQUE,
					SUM(ACTION_VALUE_2) GET_CHEQUE2,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_RETURN,
					0 GET_VOUCHER_P2_RETURN,
					0 GET_PAYMENTS,
					0 GET_PAYMENTS_2,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS_2			
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (90)AND
					FROM_CONSUMER_ID IS NOT NULL
				GROUP BY
					ACTION_DATE,FROM_CONSUMER_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					TO_CONSUMER_ID CONSUMER_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					SUM(ACTION_VALUE) GET_CHEQUE_RETURN,
					SUM(ACTION_VALUE_2) GET_CHEQUE2_RETURN,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,	
					0 GET_VOUCHER_RETURN,			
					0 GET_VOUCHER2_RETURN,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_VOUCHER_P,
	
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_RETURN,
					0 GET_VOUCHER_P2_RETURN,
					0 GET_PAYMENTS,
					0 GET_PAYMENTS_2,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS_2			
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (94)AND
					TO_CONSUMER_ID IS NOT NULL
				GROUP BY
					ACTION_DATE,TO_CONSUMER_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					FROM_CONSUMER_ID CONSUMER_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					SUM(ACTION_VALUE) GET_VOUCHER,
					SUM(ACTION_VALUE_2) GET_VOUCHER2,	
					0 GET_VOUCHER_RETURN,	
					0 GET_VOUCHER2_RETURN,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_RETURN,
					0 GET_VOUCHER_P2_RETURN,
					0 GET_PAYMENTS,
					0 GET_PAYMENTS_2,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS_2
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (97)AND
					FROM_CONSUMER_ID IS NOT NULL
				GROUP BY
					ACTION_DATE,FROM_CONSUMER_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					TO_CONSUMER_ID CONSUMER_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,		
					SUM(ACTION_VALUE) GET_VOUCHER_RETURN,	
					SUM(ACTION_VALUE_2) GET_VOUCHER2_RETURN,					
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_RETURN,
					0 GET_VOUCHER_P2_RETURN,
					0 GET_PAYMENTS,
					0 GET_PAYMENTS_2,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS_2
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (101)AND
					TO_CONSUMER_ID IS NOT NULL
				GROUP BY
					ACTION_DATE,TO_CONSUMER_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					FROM_CONSUMER_ID CONSUMER_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,		
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					SUM(ACTION_VALUE) GET_REVENUE,
					SUM(ACTION_VALUE_2) GET_REVENUE2,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_RETURN,
					0 GET_VOUCHER_P2_RETURN,
					0 GET_PAYMENTS,
					0 GET_PAYMENTS_2,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS_2
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (24,240,241,1043,1053)AND
					FROM_CONSUMER_ID IS NOT NULL
				GROUP BY
					ACTION_DATE,FROM_CONSUMER_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					FROM_CONSUMER_ID CONSUMER_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,		
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					SUM(ACTION_VALUE) GET_CREDIT_REVENUE,
					SUM(ACTION_VALUE_2) GET_CREDIT_REVENUE2,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_RETURN,
					0 GET_VOUCHER_P2_RETURN,
					0 GET_PAYMENTS,
					0 GET_PAYMENTS_2,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS_2			
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (292)AND
					FROM_CONSUMER_ID IS NOT NULL			
				GROUP BY
					ACTION_DATE,FROM_CONSUMER_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					TO_CONSUMER_ID CONSUMER_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,		
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					SUM(ACTION_VALUE) GET_PAYM,
					SUM(ACTION_VALUE_2) GET_PAYM2,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_RETURN,
					0 GET_VOUCHER_P2_RETURN,
					0 GET_PAYMENTS,
					0 GET_PAYMENTS_2,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS_2
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (32,1041,1051)AND
					TO_CONSUMER_ID IS NOT NULL
				GROUP BY
					ACTION_DATE,TO_CONSUMER_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					TO_CONSUMER_ID CONSUMER_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,		
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_PAYM,
					0 GET_PAYM2,
					SUM(ACTION_VALUE) GET_CHEQUE_P,
					SUM(ACTION_VALUE_2) GET_CHEQUE_P2,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_RETURN,
					0 GET_VOUCHER_P2_RETURN,
					0 GET_PAYMENTS,
					0 GET_PAYMENTS_2,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS_2
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (91)AND
					TO_CONSUMER_ID IS NOT NULL		
				GROUP BY
					ACTION_DATE,TO_CONSUMER_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					FROM_CONSUMER_ID CONSUMER_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,		
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					SUM(ACTION_VALUE) GET_CHEQUE_P_RETURN,
					SUM(ACTION_VALUE_2) GET_CHEQUE_P2_RETURN,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_RETURN,
					0 GET_VOUCHER_P2_RETURN,
					0 GET_PAYMENTS,
					0 GET_PAYMENTS_2,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS_2
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (95)AND
					FROM_CONSUMER_ID IS NOT NULL		
				GROUP BY
					ACTION_DATE,FROM_CONSUMER_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					TO_CONSUMER_ID CONSUMER_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,		
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					SUM(ACTION_VALUE) GET_VOUCHER_P,
					SUM(ACTION_VALUE_2) GET_VOUCHER_P2,
					0 GET_VOUCHER_P_RETURN,
					0 GET_VOUCHER_P2_RETURN,
					0 GET_PAYMENTS,
					0 GET_PAYMENTS_2,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS_2
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (98)AND
					TO_CONSUMER_ID IS NOT NULL
				GROUP BY
					ACTION_DATE,TO_CONSUMER_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					FROM_CONSUMER_ID CONSUMER_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,		
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					SUM(ACTION_VALUE) GET_VOUCHER_P_RETURN,
					SUM(ACTION_VALUE_2) GET_VOUCHER_P2_RETURN,
					0 GET_PAYMENTS,
					0 GET_PAYMENTS_2,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS_2
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (108)AND
					FROM_CONSUMER_ID IS NOT NULL
				GROUP BY
					ACTION_DATE,FROM_CONSUMER_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					TO_CONSUMER_ID CONSUMER_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,		
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_RETURN,	
					0 GET_VOUCHER_P2_RETURN,
					SUM(ACTION_VALUE) GET_PAYMENTS,
					SUM(ACTION_VALUE_2) GET_PAYMENTS_2,
					0 GET_CREDIT_PAYMENTS,
					0 GET_CREDIT_PAYMENTS_2
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (25,242,1044,1054)AND
					TO_CONSUMER_ID IS NOT NULL
				GROUP BY
					ACTION_DATE,TO_CONSUMER_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
		UNION ALL
				SELECT
					TO_CONSUMER_ID CONSUMER_ID,ACTION_DATE,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID,
					0 GET_PURCHASES,
					0 GET_PURCHASES2,
					0 GET_PURCHASE_DIFF,
					0 GET_PURCHASE_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_EXPENSE,
					0 GET_EXPENSE2,
					0 GET_SALES,
					0 GET_SALES2,
					0 GET_SALES_DIFF,
					0 GET_SALES_DIFF2,
					0 GET_SALES_RETURN,
					0 GET_SALES_RETURN2,
					0 GET_INCOME,
					0 GET_INCOME2,
					0 GET_CASH,
					0 GET_CASH2,
					0 GET_CHEQUE,
					0 GET_CHEQUE2,
					0 GET_CHEQUE_RETURN,
					0 GET_CHEQUE2_RETURN,
					0 GET_VOUCHER,
					0 GET_VOUCHER2,		
					0 GET_VOUCHER_RETURN,		
					0 GET_VOUCHER2_RETURN,
					0 GET_REVENUE,
					0 GET_REVENUE2,
					0 GET_CREDIT_REVENUE,
					0 GET_CREDIT_REVENUE2,
					0 GET_PAYM,
					0 GET_PAYM2,
					0 GET_CHEQUE_P,
					0 GET_CHEQUE_P2,
					0 GET_CHEQUE_P_RETURN,
					0 GET_CHEQUE_P2_RETURN,
					0 GET_VOUCHER_P,
					0 GET_VOUCHER_P2,
					0 GET_VOUCHER_P_RETURN,		
					0 GET_VOUCHER_P2_RETURN,
					0 GET_PAYMENTS,
					0 GET_PAYMENTS_2,
					SUM(ACTION_VALUE) GET_CREDIT_PAYMENTS,
					SUM(ACTION_VALUE_2) GET_CREDIT_PAYMENTS_2
				FROM
					CARI_ROWS
				WHERE
					ACTION_TYPE_ID IN (291)AND
					TO_CONSUMER_ID IS NOT NULL
				GROUP BY
					ACTION_DATE,TO_CONSUMER_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID
			) GET_CARI_ROWS
		GROUP BY
			ACTION_DATE,CONSUMER_ID,FROM_BRANCH_ID,TO_BRANCH_ID,PROJECT_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE_IN_BANK] AS
			SELECT
				0 AS ALACAK, 
				SUM(CHEQUE.OTHER_MONEY_VALUE) AS BORC, 
				ACCOUNTS.ACCOUNT_ID, 
				ACCOUNTS.ACCOUNT_NAME
			FROM
				#attributes.dsn#_#get_period.our_company_id#.ACCOUNTS AS ACCOUNTS,
				PAYROLL,
				CHEQUE,
				CHEQUE_HISTORY
			WHERE
				CHEQUE.CHEQUE_STATUS_ID = 2 AND 
				ACCOUNTS.ACCOUNT_ID = PAYROLL.PAYROLL_ACCOUNT_ID AND
				CHEQUE_HISTORY.CHEQUE_ID = CHEQUE.CHEQUE_ID AND
				CHEQUE_HISTORY.PAYROLL_ID = PAYROLL.ACTION_ID AND
				CHEQUE_HISTORY.HISTORY_ID = (SELECT MAX(CH.HISTORY_ID) FROM CHEQUE_HISTORY CH WHERE CH.CHEQUE_ID = CHEQUE.CHEQUE_ID AND CH.STATUS = 2)
			GROUP BY
				ACCOUNTS.ACCOUNT_ID, 
				ACCOUNTS.ACCOUNT_NAME

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE_IN_GUARANTEE] AS
			SELECT
				SUM(CHEQUE.OTHER_MONEY_VALUE) AS TEMINAT_CEKLER, 
				ACCOUNTS.ACCOUNT_ID, 
				ACCOUNTS.ACCOUNT_NAME
			FROM
				#attributes.dsn#_#get_period.our_company_id#.ACCOUNTS AS ACCOUNTS,
				PAYROLL,
				CHEQUE,
				CHEQUE_HISTORY
			WHERE
				CHEQUE.CHEQUE_STATUS_ID = 13 AND 
				ACCOUNTS.ACCOUNT_ID = PAYROLL.PAYROLL_ACCOUNT_ID AND
				CHEQUE_HISTORY.CHEQUE_ID = CHEQUE.CHEQUE_ID AND
				CHEQUE_HISTORY.PAYROLL_ID = PAYROLL.ACTION_ID AND
				CHEQUE_HISTORY.HISTORY_ID = (SELECT MAX(CH.HISTORY_ID) FROM CHEQUE_HISTORY CH WHERE CH.CHEQUE_ID = CHEQUE.CHEQUE_ID AND CH.STATUS = 13)
			GROUP BY
				ACCOUNTS.ACCOUNT_ID, 
				ACCOUNTS.ACCOUNT_NAME

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE_TO_PAY] AS
		SELECT
			0 AS ALACAK, 
			SUM(CHEQUE.OTHER_MONEY_VALUE) AS BORC,
			ACCOUNTS.ACCOUNT_ID,
			ACCOUNTS.ACCOUNT_NAME
		FROM 
			#attributes.dsn#_#get_period.our_company_id#.ACCOUNTS AS ACCOUNTS,
			CHEQUE
		WHERE
			CHEQUE.CHEQUE_STATUS_ID = 6 AND 
			ACCOUNTS.ACCOUNT_ID = CHEQUE.ACCOUNT_ID 
		GROUP BY
			ACCOUNTS.ACCOUNT_ID, 
			ACCOUNTS.ACCOUNT_NAME

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE_VOUCHER_TOTAL] 
		AS
		SELECT
			0 ACTION_VALUE_B,
			SUM(OTHER_MONEY_VALUE) ACTION_VALUE_A,
			OTHER_MONEY ACTION_CURRENCY,
			0 ACTION_VALUE2_B,
			SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_A,
			OTHER_MONEY2 ACTION_MONEY2,		
			0 OTHER_CASH_ACT_VALUE_B,
			SUM(OTHER_MONEY_VALUE/(PAYROLL_MONEY.RATE2/PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_A,
			--CHEQUE.CURRENCY_ID OTHER_MONEY,
			PAYROLL_OTHER_MONEY OTHER_MONEY,
			CHEQUE.COMPANY_ID,
			CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
		FROM
			CHEQUE,
			PAYROLL,
			PAYROLL_MONEY
		WHERE
			(CHEQUE_STATUS_ID IN (1,2,13,5,10) OR (CHEQUE_STATUS_ID = 4 AND CHEQUE_DUEDATE > GETDATE())) AND
			CHEQUE_PAYROLL_ID = PAYROLL.ACTION_ID AND
			CHEQUE.COMPANY_ID IS NOT NULL AND 
			PAYROLL.PAYROLL_OTHER_MONEY = PAYROLL_MONEY.MONEY_TYPE AND
			PAYROLL.ACTION_ID = PAYROLL_MONEY.ACTION_ID
		GROUP BY
			--CHEQUE.CURRENCY_ID,
			OTHER_MONEY,
			OTHER_MONEY2,
			CHEQUE.COMPANY_ID,
			PAYROLL_REVENUE_DATE,
			CHEQUE_DUEDATE,
			PAYROLL_RECORD_DATE,
			PAYROLL_OTHER_MONEY
	UNION ALL
		SELECT
			0 ACTION_VALUE_B,
			SUM(OTHER_MONEY_VALUE) ACTION_VALUE_A,
			OTHER_MONEY ACTION_CURRENCY,
			0 ACTION_VALUE2_B,
			SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_A,
			OTHER_MONEY2 ACTION_MONEY2,		
			0 OTHER_CASH_ACT_VALUE_B,
			SUM(OTHER_MONEY_VALUE/(VOUCHER_PAYROLL_MONEY.RATE2/VOUCHER_PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_A,
			--VOUCHER.CURRENCY_ID OTHER_MONEY,
			PAYROLL_OTHER_MONEY OTHER_MONEY,
			VOUCHER.COMPANY_ID,
			CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
		FROM
			VOUCHER,
			VOUCHER_PAYROLL,
			VOUCHER_PAYROLL_MONEY
		WHERE
			(VOUCHER_STATUS_ID IN (1,2,13,5,10,11) OR (VOUCHER_STATUS_ID = 4 AND VOUCHER_DUEDATE > GETDATE())) AND
			VOUCHER_PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
			VOUCHER.COMPANY_ID IS NOT NULL AND 
			VOUCHER_PAYROLL.PAYROLL_OTHER_MONEY = VOUCHER_PAYROLL_MONEY.MONEY_TYPE AND
			VOUCHER_PAYROLL.ACTION_ID = VOUCHER_PAYROLL_MONEY.ACTION_ID
		GROUP BY 
			--VOUCHER.CURRENCY_ID,
			OTHER_MONEY,
			OTHER_MONEY2,
			VOUCHER.COMPANY_ID,
			PAYROLL_REVENUE_DATE,
			VOUCHER_DUEDATE,
			PAYROLL_RECORD_DATE,
			PAYROLL_OTHER_MONEY
	UNION ALL
		SELECT
			SUM(OTHER_MONEY_VALUE) ACTION_VALUE_B,
			0 ACTION_VALUE_A,
			OTHER_MONEY ACTION_CURRENCY,
			SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_B,
			0 ACTION_VALUE2_A,
			OTHER_MONEY2 ACTION_MONEY2,		
			SUM(OTHER_MONEY_VALUE/(PAYROLL_MONEY.RATE2/PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_B,
			0 OTHER_CASH_ACT_VALUE_A,
			--CHEQUE.CURRENCY_ID OTHER_MONEY,
			PAYROLL_OTHER_MONEY OTHER_MONEY,
			CHEQUE.COMPANY_ID,
			CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
		FROM
			CHEQUE,
			PAYROLL,
			PAYROLL_MONEY
		WHERE
			CHEQUE_STATUS_ID IN (6) AND
			CHEQUE_PAYROLL_ID = PAYROLL.ACTION_ID AND
			CHEQUE.COMPANY_ID IS NOT NULL AND 
			PAYROLL.PAYROLL_OTHER_MONEY = PAYROLL_MONEY.MONEY_TYPE AND
			PAYROLL.ACTION_ID = PAYROLL_MONEY.ACTION_ID
		GROUP BY
			--CHEQUE.CURRENCY_ID,
	
			OTHER_MONEY,
			OTHER_MONEY2,
			CHEQUE.COMPANY_ID,
			PAYROLL_REVENUE_DATE,
			CHEQUE_DUEDATE,
			PAYROLL_RECORD_DATE,
			PAYROLL_OTHER_MONEY
	UNION ALL
		SELECT
			SUM(OTHER_MONEY_VALUE) ACTION_VALUE_B,
			0 ACTION_VALUE_A,
			OTHER_MONEY ACTION_CURRENCY,
			SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_B,
			0 ACTION_VALUE2_A,
			OTHER_MONEY2 ACTION_MONEY2,		
			SUM(OTHER_MONEY_VALUE/(VOUCHER_PAYROLL_MONEY.RATE2/VOUCHER_PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_B,
			0 OTHER_CASH_ACT_VALUE_A,
			--VOUCHER.CURRENCY_ID OTHER_MONEY,
			PAYROLL_OTHER_MONEY OTHER_MONEY,			
			VOUCHER.COMPANY_ID,
			CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
		FROM
			VOUCHER,
			VOUCHER_PAYROLL,
			VOUCHER_PAYROLL_MONEY
		WHERE
			VOUCHER_STATUS_ID IN (6) AND
			VOUCHER_PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
			VOUCHER.COMPANY_ID IS NOT NULL AND 
			VOUCHER_PAYROLL.PAYROLL_OTHER_MONEY = VOUCHER_PAYROLL_MONEY.MONEY_TYPE AND
			VOUCHER_PAYROLL.ACTION_ID = VOUCHER_PAYROLL_MONEY.ACTION_ID
		GROUP BY 
			--VOUCHER.CURRENCY_ID,
			OTHER_MONEY,
			OTHER_MONEY2,
			VOUCHER.COMPANY_ID,
			PAYROLL_REVENUE_DATE,
			VOUCHER_DUEDATE,
			PAYROLL_RECORD_DATE,
			PAYROLL_OTHER_MONEY

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE_VOUCHER_TOTAL_BRANCH]  AS
			SELECT
				0 ACTION_VALUE_B,
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				0 ACTION_VALUE2_B,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				0 OTHER_CASH_ACT_VALUE_B,
				SUM(OTHER_MONEY_VALUE/(PAYROLL_MONEY.RATE2/PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_A,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				CHEQUE.COMPANY_ID,
				PAYROLL.BRANCH_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				CHEQUE,
				PAYROLL,
				PAYROLL_MONEY
			WHERE
				(CHEQUE_STATUS_ID IN (1,2,13,5,10) OR (CHEQUE_STATUS_ID = 4 AND CHEQUE_DUEDATE > GETDATE())) AND
				CHEQUE_PAYROLL_ID = PAYROLL.ACTION_ID AND
				CHEQUE.COMPANY_ID IS NOT NULL AND 
				PAYROLL.PAYROLL_OTHER_MONEY = PAYROLL_MONEY.MONEY_TYPE AND
				PAYROLL.ACTION_ID = PAYROLL_MONEY.ACTION_ID
			GROUP BY
				OTHER_MONEY,
				OTHER_MONEY2,
				CHEQUE.COMPANY_ID,
				PAYROLL.BRANCH_ID,
				PAYROLL_REVENUE_DATE,
				CHEQUE_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				0 ACTION_VALUE_B,
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				0 ACTION_VALUE2_B,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				0 OTHER_CASH_ACT_VALUE_B,
				SUM(OTHER_MONEY_VALUE/(VOUCHER_PAYROLL_MONEY.RATE2/VOUCHER_PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_A,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				VOUCHER.COMPANY_ID,
				VOUCHER_PAYROLL.BRANCH_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				VOUCHER,
				VOUCHER_PAYROLL,
				VOUCHER_PAYROLL_MONEY
			WHERE
				(VOUCHER_STATUS_ID IN (1,2,13,5,10,11) OR (VOUCHER_STATUS_ID = 4 AND VOUCHER_DUEDATE > GETDATE())) AND
				VOUCHER_PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
				VOUCHER.COMPANY_ID IS NOT NULL AND 
				VOUCHER_PAYROLL.PAYROLL_OTHER_MONEY = VOUCHER_PAYROLL_MONEY.MONEY_TYPE AND
				VOUCHER_PAYROLL.ACTION_ID = VOUCHER_PAYROLL_MONEY.ACTION_ID
			GROUP BY 
				OTHER_MONEY,
				OTHER_MONEY2,
				VOUCHER.COMPANY_ID,
				VOUCHER_PAYROLL.BRANCH_ID,
				PAYROLL_REVENUE_DATE,
				VOUCHER_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_B,
				0 ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_B,
				0 ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				SUM(OTHER_MONEY_VALUE/(PAYROLL_MONEY.RATE2/PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_B,
				0 OTHER_CASH_ACT_VALUE_A,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				CHEQUE.COMPANY_ID,
				PAYROLL.BRANCH_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				CHEQUE,
				PAYROLL,
				PAYROLL_MONEY
			WHERE
				CHEQUE_STATUS_ID IN (6) AND
				CHEQUE_PAYROLL_ID = PAYROLL.ACTION_ID AND
				CHEQUE.COMPANY_ID IS NOT NULL AND 
				PAYROLL.PAYROLL_OTHER_MONEY = PAYROLL_MONEY.MONEY_TYPE AND
				PAYROLL.ACTION_ID = PAYROLL_MONEY.ACTION_ID
			GROUP BY
				OTHER_MONEY,
				OTHER_MONEY2,
				CHEQUE.COMPANY_ID,
				PAYROLL.BRANCH_ID,
				PAYROLL_REVENUE_DATE,
				CHEQUE_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT

				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_B,
	
				0 ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_B,
				0 ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				SUM(OTHER_MONEY_VALUE/(VOUCHER_PAYROLL_MONEY.RATE2/VOUCHER_PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_B,
				0 OTHER_CASH_ACT_VALUE_A,
				PAYROLL_OTHER_MONEY OTHER_MONEY,			
				VOUCHER.COMPANY_ID,
				VOUCHER_PAYROLL.BRANCH_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				VOUCHER,
				VOUCHER_PAYROLL,
				VOUCHER_PAYROLL_MONEY
			WHERE
				VOUCHER_STATUS_ID IN (6) AND
				VOUCHER_PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
				VOUCHER.COMPANY_ID IS NOT NULL AND 
				VOUCHER_PAYROLL.PAYROLL_OTHER_MONEY = VOUCHER_PAYROLL_MONEY.MONEY_TYPE AND
				VOUCHER_PAYROLL.ACTION_ID = VOUCHER_PAYROLL_MONEY.ACTION_ID
			GROUP BY 
				OTHER_MONEY,
				OTHER_MONEY2,
				VOUCHER.COMPANY_ID,
				VOUCHER_PAYROLL.BRANCH_ID,
				PAYROLL_REVENUE_DATE,
				VOUCHER_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE_VOUCHER_TOTAL_CONSUMER] AS
			SELECT
				0 ACTION_VALUE_B,
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				0 ACTION_VALUE2_B,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				0 OTHER_CASH_ACT_VALUE_B,
				SUM(OTHER_MONEY_VALUE/(PAYROLL_MONEY.RATE2/PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_A,
				--CHEQUE.CURRENCY_ID OTHER_MONEY,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				CHEQUE.CONSUMER_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				CHEQUE,
				PAYROLL,
				PAYROLL_MONEY
			WHERE
				(CHEQUE_STATUS_ID IN (1,2,13,5,10) OR (CHEQUE_STATUS_ID = 4 AND CHEQUE_DUEDATE > GETDATE())) AND
				CHEQUE_PAYROLL_ID = PAYROLL.ACTION_ID AND
				CHEQUE.CONSUMER_ID IS NOT NULL AND 
				PAYROLL.PAYROLL_OTHER_MONEY = PAYROLL_MONEY.MONEY_TYPE AND
				PAYROLL.ACTION_ID = PAYROLL_MONEY.ACTION_ID
			GROUP BY
				--CHEQUE.CURRENCY_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				CHEQUE.CONSUMER_ID,
				PAYROLL_REVENUE_DATE,
				CHEQUE_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				0 ACTION_VALUE_B,
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				0 ACTION_VALUE2_B,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				0 OTHER_CASH_ACT_VALUE_B,
				SUM(OTHER_MONEY_VALUE/(VOUCHER_PAYROLL_MONEY.RATE2/VOUCHER_PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_A,
				--VOUCHER.CURRENCY_ID OTHER_MONEY,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				VOUCHER.CONSUMER_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				VOUCHER,
				VOUCHER_PAYROLL,
				VOUCHER_PAYROLL_MONEY
			WHERE
				(VOUCHER_STATUS_ID IN (1,2,13,5,10,11) OR (VOUCHER_STATUS_ID = 4 AND VOUCHER_DUEDATE > GETDATE())) AND
				VOUCHER_PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
				VOUCHER.CONSUMER_ID IS NOT NULL AND 
				VOUCHER_PAYROLL.PAYROLL_OTHER_MONEY = VOUCHER_PAYROLL_MONEY.MONEY_TYPE AND
				VOUCHER_PAYROLL.ACTION_ID = VOUCHER_PAYROLL_MONEY.ACTION_ID
			GROUP BY 
				--VOUCHER.CURRENCY_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				VOUCHER.CONSUMER_ID,
				PAYROLL_REVENUE_DATE,
				VOUCHER_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_B,
				0 ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_B,
				0 ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				SUM(OTHER_MONEY_VALUE/(PAYROLL_MONEY.RATE2/PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_B,
				0 OTHER_CASH_ACT_VALUE_A,
				--CHEQUE.CURRENCY_ID OTHER_MONEY,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				CHEQUE.CONSUMER_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				CHEQUE,
				PAYROLL,
				PAYROLL_MONEY
			WHERE
				CHEQUE_STATUS_ID IN (6) AND
				CHEQUE_PAYROLL_ID = PAYROLL.ACTION_ID AND
				CHEQUE.CONSUMER_ID IS NOT NULL AND 
				PAYROLL.PAYROLL_OTHER_MONEY = PAYROLL_MONEY.MONEY_TYPE AND
				PAYROLL.ACTION_ID = PAYROLL_MONEY.ACTION_ID
			GROUP BY
				--CHEQUE.CURRENCY_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				CHEQUE.CONSUMER_ID,
				PAYROLL_REVENUE_DATE,
				CHEQUE_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_B,
				0 ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_B,
				0 ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				SUM(OTHER_MONEY_VALUE/(VOUCHER_PAYROLL_MONEY.RATE2/VOUCHER_PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_B,
				0 OTHER_CASH_ACT_VALUE_A,
				--VOUCHER.CURRENCY_ID OTHER_MONEY,
				PAYROLL_OTHER_MONEY OTHER_MONEY,			
				VOUCHER.CONSUMER_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				VOUCHER,
				VOUCHER_PAYROLL,
				VOUCHER_PAYROLL_MONEY
			WHERE
				VOUCHER_STATUS_ID IN (6) AND
				VOUCHER_PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
				VOUCHER.CONSUMER_ID IS NOT NULL AND 
				VOUCHER_PAYROLL.PAYROLL_OTHER_MONEY = VOUCHER_PAYROLL_MONEY.MONEY_TYPE AND
				VOUCHER_PAYROLL.ACTION_ID = VOUCHER_PAYROLL_MONEY.ACTION_ID
			GROUP BY 
				--VOUCHER.CURRENCY_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				VOUCHER.CONSUMER_ID,
				PAYROLL_REVENUE_DATE,
				VOUCHER_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE_VOUCHER_TOTAL_CONSUMER_BRANCH] AS
				SELECT
					0 ACTION_VALUE_B,
					SUM(OTHER_MONEY_VALUE) ACTION_VALUE_A,
					OTHER_MONEY ACTION_CURRENCY,
					0 ACTION_VALUE2_B,
					SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_A,
					OTHER_MONEY2 ACTION_MONEY2,		
					0 OTHER_CASH_ACT_VALUE_B,
					SUM(OTHER_MONEY_VALUE/(PAYROLL_MONEY.RATE2/PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_A,

					PAYROLL_OTHER_MONEY OTHER_MONEY,
					CHEQUE.CONSUMER_ID,
					PAYROLL.BRANCH_ID,
					CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
				FROM
					CHEQUE,
					PAYROLL,
					PAYROLL_MONEY
				WHERE
					(CHEQUE_STATUS_ID IN (1,2,13,5,10) OR (CHEQUE_STATUS_ID = 4 AND CHEQUE_DUEDATE > GETDATE())) AND
					CHEQUE_PAYROLL_ID = PAYROLL.ACTION_ID AND
					CHEQUE.CONSUMER_ID IS NOT NULL AND 
					PAYROLL.PAYROLL_OTHER_MONEY = PAYROLL_MONEY.MONEY_TYPE AND
					PAYROLL.ACTION_ID = PAYROLL_MONEY.ACTION_ID
				GROUP BY
					OTHER_MONEY,
					OTHER_MONEY2,
					CHEQUE.CONSUMER_ID,
					PAYROLL.BRANCH_ID,
					PAYROLL_REVENUE_DATE,
					CHEQUE_DUEDATE,
					PAYROLL_RECORD_DATE,
					PAYROLL_OTHER_MONEY
			UNION ALL
				SELECT
					0 ACTION_VALUE_B,
					SUM(OTHER_MONEY_VALUE) ACTION_VALUE_A,
					OTHER_MONEY ACTION_CURRENCY,
					0 ACTION_VALUE2_B,
					SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_A,
					OTHER_MONEY2 ACTION_MONEY2,		
					0 OTHER_CASH_ACT_VALUE_B,
					SUM(OTHER_MONEY_VALUE/(VOUCHER_PAYROLL_MONEY.RATE2/VOUCHER_PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_A,
					PAYROLL_OTHER_MONEY OTHER_MONEY,
					VOUCHER.CONSUMER_ID,
					VOUCHER_PAYROLL.BRANCH_ID,
					CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
				FROM
					VOUCHER,
					VOUCHER_PAYROLL,
					VOUCHER_PAYROLL_MONEY
				WHERE
					(VOUCHER_STATUS_ID IN (1,2,13,5,10,11) OR (VOUCHER_STATUS_ID = 4 AND VOUCHER_DUEDATE > GETDATE())) AND
					VOUCHER_PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
					VOUCHER.CONSUMER_ID IS NOT NULL AND 
					VOUCHER_PAYROLL.PAYROLL_OTHER_MONEY = VOUCHER_PAYROLL_MONEY.MONEY_TYPE AND
					VOUCHER_PAYROLL.ACTION_ID = VOUCHER_PAYROLL_MONEY.ACTION_ID
				GROUP BY 
					OTHER_MONEY,
					OTHER_MONEY2,
					VOUCHER.CONSUMER_ID,
					VOUCHER_PAYROLL.BRANCH_ID,
					PAYROLL_REVENUE_DATE,
					VOUCHER_DUEDATE,
					PAYROLL_RECORD_DATE,
					PAYROLL_OTHER_MONEY
			UNION ALL
				SELECT
					SUM(OTHER_MONEY_VALUE) ACTION_VALUE_B,
					0 ACTION_VALUE_A,
					OTHER_MONEY ACTION_CURRENCY,
					SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_B,
					0 ACTION_VALUE2_A,
					OTHER_MONEY2 ACTION_MONEY2,		
					SUM(OTHER_MONEY_VALUE/(PAYROLL_MONEY.RATE2/PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_B,
					0 OTHER_CASH_ACT_VALUE_A,
					PAYROLL_OTHER_MONEY OTHER_MONEY,
					CHEQUE.CONSUMER_ID,
					PAYROLL.BRANCH_ID,
					CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
				FROM
					CHEQUE,
					PAYROLL,
					PAYROLL_MONEY
				WHERE
					CHEQUE_STATUS_ID IN (6) AND
					CHEQUE_PAYROLL_ID = PAYROLL.ACTION_ID AND
					CHEQUE.CONSUMER_ID IS NOT NULL AND 
					PAYROLL.PAYROLL_OTHER_MONEY = PAYROLL_MONEY.MONEY_TYPE AND
					PAYROLL.ACTION_ID = PAYROLL_MONEY.ACTION_ID
				GROUP BY
					OTHER_MONEY,
					OTHER_MONEY2,
					CHEQUE.CONSUMER_ID,
					PAYROLL.BRANCH_ID,
					PAYROLL_REVENUE_DATE,
					CHEQUE_DUEDATE,
					PAYROLL_RECORD_DATE,
					PAYROLL_OTHER_MONEY
			UNION ALL
				SELECT
					SUM(OTHER_MONEY_VALUE) ACTION_VALUE_B,
					0 ACTION_VALUE_A,
					OTHER_MONEY ACTION_CURRENCY,
					SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_B,
					0 ACTION_VALUE2_A,
					OTHER_MONEY2 ACTION_MONEY2,		
					SUM(OTHER_MONEY_VALUE/(VOUCHER_PAYROLL_MONEY.RATE2/VOUCHER_PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_B,
					0 OTHER_CASH_ACT_VALUE_A,
					PAYROLL_OTHER_MONEY OTHER_MONEY,			
					VOUCHER.CONSUMER_ID,
					VOUCHER_PAYROLL.BRANCH_ID,
					CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
				FROM
					VOUCHER,
					VOUCHER_PAYROLL,
					VOUCHER_PAYROLL_MONEY
				WHERE
					VOUCHER_STATUS_ID IN (6) AND
					VOUCHER_PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
					VOUCHER.CONSUMER_ID IS NOT NULL AND 
					VOUCHER_PAYROLL.PAYROLL_OTHER_MONEY = VOUCHER_PAYROLL_MONEY.MONEY_TYPE AND
					VOUCHER_PAYROLL.ACTION_ID = VOUCHER_PAYROLL_MONEY.ACTION_ID
				GROUP BY 
					OTHER_MONEY,
					OTHER_MONEY2,
					VOUCHER.CONSUMER_ID,
					VOUCHER_PAYROLL.BRANCH_ID,
					PAYROLL_REVENUE_DATE,
					VOUCHER_DUEDATE,
					PAYROLL_RECORD_DATE,
					PAYROLL_OTHER_MONEY

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE_VOUCHER_TOTAL_CONSUMER_PROJECT] AS
			SELECT
				0 ACTION_VALUE_B,
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				0 ACTION_VALUE2_B,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				0 OTHER_CASH_ACT_VALUE_B,
				SUM(OTHER_MONEY_VALUE/(PAYROLL_MONEY.RATE2/PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_A,
				PAYROLL.PROJECT_ID,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				CHEQUE.CONSUMER_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				CHEQUE,
				PAYROLL,
				PAYROLL_MONEY
			WHERE
				(CHEQUE_STATUS_ID IN (1,2,13,5,10) OR (CHEQUE_STATUS_ID = 4 AND CHEQUE_DUEDATE > GETDATE())) AND
				CHEQUE_PAYROLL_ID = PAYROLL.ACTION_ID AND
				CHEQUE.CONSUMER_ID IS NOT NULL AND 
				PAYROLL.PAYROLL_OTHER_MONEY = PAYROLL_MONEY.MONEY_TYPE AND
				PAYROLL.ACTION_ID = PAYROLL_MONEY.ACTION_ID
			GROUP BY
				PAYROLL.PROJECT_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				CHEQUE.CONSUMER_ID,
				PAYROLL_REVENUE_DATE,
				CHEQUE_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				0 ACTION_VALUE_B,
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				0 ACTION_VALUE2_B,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				0 OTHER_CASH_ACT_VALUE_B,
				SUM(OTHER_MONEY_VALUE/(VOUCHER_PAYROLL_MONEY.RATE2/VOUCHER_PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_A,
				VOUCHER_PAYROLL.PROJECT_ID,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				VOUCHER.CONSUMER_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				VOUCHER,
				VOUCHER_PAYROLL,
				VOUCHER_PAYROLL_MONEY
			WHERE
				(VOUCHER_STATUS_ID IN (1,2,13,5,10,11) OR (VOUCHER_STATUS_ID = 4 AND VOUCHER_DUEDATE > GETDATE())) AND
				VOUCHER_PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
				VOUCHER.CONSUMER_ID IS NOT NULL AND 
				VOUCHER_PAYROLL.PAYROLL_OTHER_MONEY = VOUCHER_PAYROLL_MONEY.MONEY_TYPE AND
				VOUCHER_PAYROLL.ACTION_ID = VOUCHER_PAYROLL_MONEY.ACTION_ID
			GROUP BY 
				VOUCHER_PAYROLL.PROJECT_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				VOUCHER.CONSUMER_ID,
				PAYROLL_REVENUE_DATE,
				VOUCHER_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_B,
				0 ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_B,
				0 ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				SUM(OTHER_MONEY_VALUE/(PAYROLL_MONEY.RATE2/PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_B,
				0 OTHER_CASH_ACT_VALUE_A,
				PAYROLL.PROJECT_ID,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				CHEQUE.CONSUMER_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				CHEQUE,
				PAYROLL,
				PAYROLL_MONEY
			WHERE
				CHEQUE_STATUS_ID IN (6) AND
				CHEQUE_PAYROLL_ID = PAYROLL.ACTION_ID AND
				CHEQUE.CONSUMER_ID IS NOT NULL AND 
				PAYROLL.PAYROLL_OTHER_MONEY = PAYROLL_MONEY.MONEY_TYPE AND
				PAYROLL.ACTION_ID = PAYROLL_MONEY.ACTION_ID
			GROUP BY
				PAYROLL.PROJECT_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				CHEQUE.CONSUMER_ID,
				PAYROLL_REVENUE_DATE,
				CHEQUE_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_B,
				0 ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_B,
				0 ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				SUM(OTHER_MONEY_VALUE/(VOUCHER_PAYROLL_MONEY.RATE2/VOUCHER_PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_B,
				0 OTHER_CASH_ACT_VALUE_A,
				VOUCHER_PAYROLL.PROJECT_ID,
				PAYROLL_OTHER_MONEY OTHER_MONEY,			
				VOUCHER.CONSUMER_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				VOUCHER,
				VOUCHER_PAYROLL,
				VOUCHER_PAYROLL_MONEY
			WHERE
				VOUCHER_STATUS_ID IN (6) AND
				VOUCHER_PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
				VOUCHER.CONSUMER_ID IS NOT NULL AND 
				VOUCHER_PAYROLL.PAYROLL_OTHER_MONEY = VOUCHER_PAYROLL_MONEY.MONEY_TYPE AND
				VOUCHER_PAYROLL.ACTION_ID = VOUCHER_PAYROLL_MONEY.ACTION_ID
			GROUP BY 
				VOUCHER_PAYROLL.PROJECT_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				VOUCHER.CONSUMER_ID,
				PAYROLL_REVENUE_DATE,
				VOUCHER_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE_VOUCHER_TOTAL_CONSUMER_PROJECT_BRANCH] AS
			SELECT
				0 ACTION_VALUE_B,
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				0 ACTION_VALUE2_B,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				0 OTHER_CASH_ACT_VALUE_B,
				SUM(OTHER_MONEY_VALUE/(PAYROLL_MONEY.RATE2/PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_A,
				PAYROLL.PROJECT_ID,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				CHEQUE.CONSUMER_ID,
				PAYROLL.BRANCH_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				CHEQUE,
				PAYROLL,
				PAYROLL_MONEY
			WHERE
				(CHEQUE_STATUS_ID IN (1,2,13,5,10) OR (CHEQUE_STATUS_ID = 4 AND CHEQUE_DUEDATE > GETDATE())) AND
				CHEQUE_PAYROLL_ID = PAYROLL.ACTION_ID AND
				CHEQUE.CONSUMER_ID IS NOT NULL AND 
				PAYROLL.PAYROLL_OTHER_MONEY = PAYROLL_MONEY.MONEY_TYPE AND
				PAYROLL.ACTION_ID = PAYROLL_MONEY.ACTION_ID
			GROUP BY
				PAYROLL.PROJECT_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				CHEQUE.CONSUMER_ID,
				PAYROLL.BRANCH_ID,
				PAYROLL_REVENUE_DATE,
				CHEQUE_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				0 ACTION_VALUE_B,
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				0 ACTION_VALUE2_B,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				0 OTHER_CASH_ACT_VALUE_B,
				SUM(OTHER_MONEY_VALUE/(VOUCHER_PAYROLL_MONEY.RATE2/VOUCHER_PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_A,
				VOUCHER_PAYROLL.PROJECT_ID,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				VOUCHER.CONSUMER_ID,
				VOUCHER_PAYROLL.BRANCH_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				VOUCHER,
				VOUCHER_PAYROLL,
				VOUCHER_PAYROLL_MONEY
			WHERE
				(VOUCHER_STATUS_ID IN (1,2,13,5,10,11) OR (VOUCHER_STATUS_ID = 4 AND VOUCHER_DUEDATE > GETDATE())) AND
				VOUCHER_PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
				VOUCHER.CONSUMER_ID IS NOT NULL AND 
				VOUCHER_PAYROLL.PAYROLL_OTHER_MONEY = VOUCHER_PAYROLL_MONEY.MONEY_TYPE AND
				VOUCHER_PAYROLL.ACTION_ID = VOUCHER_PAYROLL_MONEY.ACTION_ID
			GROUP BY 
				VOUCHER_PAYROLL.PROJECT_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				VOUCHER.CONSUMER_ID,
				VOUCHER_PAYROLL.BRANCH_ID,
				PAYROLL_REVENUE_DATE,
				VOUCHER_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_B,
				0 ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_B,
				0 ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				SUM(OTHER_MONEY_VALUE/(PAYROLL_MONEY.RATE2/PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_B,
				0 OTHER_CASH_ACT_VALUE_A,
				PAYROLL.PROJECT_ID,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				CHEQUE.CONSUMER_ID,
				PAYROLL.BRANCH_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				CHEQUE,
				PAYROLL,
				PAYROLL_MONEY
			WHERE
				CHEQUE_STATUS_ID IN (6) AND
				CHEQUE_PAYROLL_ID = PAYROLL.ACTION_ID AND
				CHEQUE.CONSUMER_ID IS NOT NULL AND 
				PAYROLL.PAYROLL_OTHER_MONEY = PAYROLL_MONEY.MONEY_TYPE AND
				PAYROLL.ACTION_ID = PAYROLL_MONEY.ACTION_ID
			GROUP BY
				PAYROLL.PROJECT_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				CHEQUE.CONSUMER_ID,
				PAYROLL.BRANCH_ID,
				PAYROLL_REVENUE_DATE,
				CHEQUE_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_B,
				0 ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_B,
				0 ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				SUM(OTHER_MONEY_VALUE/(VOUCHER_PAYROLL_MONEY.RATE2/VOUCHER_PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_B,
				0 OTHER_CASH_ACT_VALUE_A,
				VOUCHER_PAYROLL.PROJECT_ID,
				PAYROLL_OTHER_MONEY OTHER_MONEY,			
				VOUCHER.CONSUMER_ID,
				VOUCHER_PAYROLL.BRANCH_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				VOUCHER,
				VOUCHER_PAYROLL,
				VOUCHER_PAYROLL_MONEY
			WHERE
				VOUCHER_STATUS_ID IN (6) AND
				VOUCHER_PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
				VOUCHER.CONSUMER_ID IS NOT NULL AND 
				VOUCHER_PAYROLL.PAYROLL_OTHER_MONEY = VOUCHER_PAYROLL_MONEY.MONEY_TYPE AND
				VOUCHER_PAYROLL.ACTION_ID = VOUCHER_PAYROLL_MONEY.ACTION_ID
			GROUP BY 
				VOUCHER_PAYROLL.PROJECT_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				VOUCHER.CONSUMER_ID,
				VOUCHER_PAYROLL.BRANCH_ID,
				PAYROLL_REVENUE_DATE,
				VOUCHER_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE_VOUCHER_TOTAL_EMPLOYEE] AS
			SELECT
				0 ACTION_VALUE_B,
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				0 ACTION_VALUE2_B,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				0 OTHER_CASH_ACT_VALUE_B,
				SUM(OTHER_MONEY_VALUE/(PAYROLL_MONEY.RATE2/PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_A,
				--CHEQUE.CURRENCY_ID OTHER_MONEY,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				CHEQUE.EMPLOYEE_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				CHEQUE,
				PAYROLL,
				PAYROLL_MONEY
			WHERE
				(CHEQUE_STATUS_ID IN (1,2,13,5,10) OR (CHEQUE_STATUS_ID = 4 AND CHEQUE_DUEDATE > GETDATE())) AND
				CHEQUE_PAYROLL_ID = PAYROLL.ACTION_ID AND
				CHEQUE.EMPLOYEE_ID IS NOT NULL AND 
				PAYROLL.PAYROLL_OTHER_MONEY = PAYROLL_MONEY.MONEY_TYPE AND
				PAYROLL.ACTION_ID = PAYROLL_MONEY.ACTION_ID
			GROUP BY
				--CHEQUE.CURRENCY_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				CHEQUE.EMPLOYEE_ID,
				PAYROLL_REVENUE_DATE,
				CHEQUE_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				0 ACTION_VALUE_B,
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				0 ACTION_VALUE2_B,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				0 OTHER_CASH_ACT_VALUE_B,
				SUM(OTHER_MONEY_VALUE/(VOUCHER_PAYROLL_MONEY.RATE2/VOUCHER_PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_A,
				--VOUCHER.CURRENCY_ID OTHER_MONEY,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				VOUCHER.EMPLOYEE_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				VOUCHER,
				VOUCHER_PAYROLL,
				VOUCHER_PAYROLL_MONEY
			WHERE
				(VOUCHER_STATUS_ID IN (1,2,13,5,10,11) OR (VOUCHER_STATUS_ID = 4 AND VOUCHER_DUEDATE > GETDATE())) AND
				VOUCHER_PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
				VOUCHER.EMPLOYEE_ID IS NOT NULL AND 
				VOUCHER_PAYROLL.PAYROLL_OTHER_MONEY = VOUCHER_PAYROLL_MONEY.MONEY_TYPE AND
				VOUCHER_PAYROLL.ACTION_ID = VOUCHER_PAYROLL_MONEY.ACTION_ID
			GROUP BY 
				--VOUCHER.CURRENCY_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				VOUCHER.EMPLOYEE_ID,
				PAYROLL_REVENUE_DATE,
				VOUCHER_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_B,
				0 ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_B,
				0 ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				SUM(OTHER_MONEY_VALUE/(PAYROLL_MONEY.RATE2/PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_B,
				0 OTHER_CASH_ACT_VALUE_A,
				--CHEQUE.CURRENCY_ID OTHER_MONEY,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				CHEQUE.EMPLOYEE_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				CHEQUE,
				PAYROLL,
				PAYROLL_MONEY
			WHERE
				CHEQUE_STATUS_ID IN (6) AND
				CHEQUE_PAYROLL_ID = PAYROLL.ACTION_ID AND
				CHEQUE.EMPLOYEE_ID IS NOT NULL AND 
				PAYROLL.PAYROLL_OTHER_MONEY = PAYROLL_MONEY.MONEY_TYPE AND
				PAYROLL.ACTION_ID = PAYROLL_MONEY.ACTION_ID
			GROUP BY
				--CHEQUE.CURRENCY_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				CHEQUE.EMPLOYEE_ID,
				PAYROLL_REVENUE_DATE,
				CHEQUE_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_B,
				0 ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_B,
				0 ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				SUM(OTHER_MONEY_VALUE/(VOUCHER_PAYROLL_MONEY.RATE2/VOUCHER_PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_B,
				0 OTHER_CASH_ACT_VALUE_A,
				--VOUCHER.CURRENCY_ID OTHER_MONEY,
				PAYROLL_OTHER_MONEY OTHER_MONEY,			
				VOUCHER.EMPLOYEE_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				VOUCHER,
				VOUCHER_PAYROLL,
				VOUCHER_PAYROLL_MONEY
			WHERE
				VOUCHER_STATUS_ID IN (6) AND
				VOUCHER_PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
				VOUCHER.EMPLOYEE_ID IS NOT NULL AND 
				VOUCHER_PAYROLL.PAYROLL_OTHER_MONEY = VOUCHER_PAYROLL_MONEY.MONEY_TYPE AND
				VOUCHER_PAYROLL.ACTION_ID = VOUCHER_PAYROLL_MONEY.ACTION_ID
			GROUP BY 
				--VOUCHER.CURRENCY_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				VOUCHER.EMPLOYEE_ID,
				PAYROLL_REVENUE_DATE,
				VOUCHER_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE_VOUCHER_TOTAL_EMPLOYEE_BRANCH] AS
		SELECT
			0 ACTION_VALUE_B,
			SUM(OTHER_MONEY_VALUE) ACTION_VALUE_A,
			OTHER_MONEY ACTION_CURRENCY,
			0 ACTION_VALUE2_B,
			SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_A,
			OTHER_MONEY2 ACTION_MONEY2,		
			0 OTHER_CASH_ACT_VALUE_B,
			SUM(OTHER_MONEY_VALUE/(PAYROLL_MONEY.RATE2/PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_A,
			PAYROLL_OTHER_MONEY OTHER_MONEY,
			CHEQUE.EMPLOYEE_ID,
			PAYROLL.BRANCH_ID,
			CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
		FROM
			CHEQUE,
			PAYROLL,
			PAYROLL_MONEY
		WHERE
			(CHEQUE_STATUS_ID IN (1,2,13,5,10) OR (CHEQUE_STATUS_ID = 4 AND CHEQUE_DUEDATE > GETDATE())) AND
			CHEQUE_PAYROLL_ID = PAYROLL.ACTION_ID AND
			CHEQUE.EMPLOYEE_ID IS NOT NULL AND 
			PAYROLL.PAYROLL_OTHER_MONEY = PAYROLL_MONEY.MONEY_TYPE AND
			PAYROLL.ACTION_ID = PAYROLL_MONEY.ACTION_ID
		GROUP BY
			OTHER_MONEY,
			OTHER_MONEY2,
			CHEQUE.EMPLOYEE_ID,
			PAYROLL.BRANCH_ID,
			PAYROLL_REVENUE_DATE,
			CHEQUE_DUEDATE,
			PAYROLL_RECORD_DATE,
			PAYROLL_OTHER_MONEY
	UNION ALL
		SELECT
			0 ACTION_VALUE_B,
			SUM(OTHER_MONEY_VALUE) ACTION_VALUE_A,
			OTHER_MONEY ACTION_CURRENCY,
			0 ACTION_VALUE2_B,
			SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_A,
			OTHER_MONEY2 ACTION_MONEY2,		
			0 OTHER_CASH_ACT_VALUE_B,
			SUM(OTHER_MONEY_VALUE/(VOUCHER_PAYROLL_MONEY.RATE2/VOUCHER_PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_A,
			PAYROLL_OTHER_MONEY OTHER_MONEY,
			VOUCHER.EMPLOYEE_ID,
			VOUCHER_PAYROLL.BRANCH_ID,
			CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
		FROM
			VOUCHER,
			VOUCHER_PAYROLL,
			VOUCHER_PAYROLL_MONEY
		WHERE
			(VOUCHER_STATUS_ID IN (1,2,13,5,10,11) OR (VOUCHER_STATUS_ID = 4 AND VOUCHER_DUEDATE > GETDATE())) AND
			VOUCHER_PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
			VOUCHER.EMPLOYEE_ID IS NOT NULL AND 
			VOUCHER_PAYROLL.PAYROLL_OTHER_MONEY = VOUCHER_PAYROLL_MONEY.MONEY_TYPE AND
			VOUCHER_PAYROLL.ACTION_ID = VOUCHER_PAYROLL_MONEY.ACTION_ID
		GROUP BY 
			OTHER_MONEY,
			OTHER_MONEY2,
			VOUCHER.EMPLOYEE_ID,
			VOUCHER_PAYROLL.BRANCH_ID,
			PAYROLL_REVENUE_DATE,
			VOUCHER_DUEDATE,
			PAYROLL_RECORD_DATE,
			PAYROLL_OTHER_MONEY
	UNION ALL
		SELECT
			SUM(OTHER_MONEY_VALUE) ACTION_VALUE_B,
			0 ACTION_VALUE_A,
			OTHER_MONEY ACTION_CURRENCY,
			SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_B,
			0 ACTION_VALUE2_A,
			OTHER_MONEY2 ACTION_MONEY2,		
			SUM(OTHER_MONEY_VALUE/(PAYROLL_MONEY.RATE2/PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_B,
			0 OTHER_CASH_ACT_VALUE_A,
			PAYROLL_OTHER_MONEY OTHER_MONEY,
			CHEQUE.EMPLOYEE_ID,
			PAYROLL.BRANCH_ID,
			CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
		FROM
			CHEQUE,
			PAYROLL,
			PAYROLL_MONEY
		WHERE
			CHEQUE_STATUS_ID IN (6) AND
			CHEQUE_PAYROLL_ID = PAYROLL.ACTION_ID AND
			CHEQUE.EMPLOYEE_ID IS NOT NULL AND 
			PAYROLL.PAYROLL_OTHER_MONEY = PAYROLL_MONEY.MONEY_TYPE AND
			PAYROLL.ACTION_ID = PAYROLL_MONEY.ACTION_ID
		GROUP BY
			OTHER_MONEY,
			OTHER_MONEY2,
			CHEQUE.EMPLOYEE_ID,
			PAYROLL.BRANCH_ID,
			PAYROLL_REVENUE_DATE,
			CHEQUE_DUEDATE,
			PAYROLL_RECORD_DATE,
			PAYROLL_OTHER_MONEY
	UNION ALL
		SELECT
			SUM(OTHER_MONEY_VALUE) ACTION_VALUE_B,
			0 ACTION_VALUE_A,
			OTHER_MONEY ACTION_CURRENCY,
			SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_B,
			0 ACTION_VALUE2_A,
			OTHER_MONEY2 ACTION_MONEY2,		
			SUM(OTHER_MONEY_VALUE/(VOUCHER_PAYROLL_MONEY.RATE2/VOUCHER_PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_B,
			0 OTHER_CASH_ACT_VALUE_A,
			PAYROLL_OTHER_MONEY OTHER_MONEY,			
			VOUCHER.EMPLOYEE_ID,
			VOUCHER_PAYROLL.BRANCH_ID,
			CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
		FROM
			VOUCHER,
			VOUCHER_PAYROLL,
			VOUCHER_PAYROLL_MONEY
		WHERE
			VOUCHER_STATUS_ID IN (6) AND
			VOUCHER_PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
			VOUCHER.EMPLOYEE_ID IS NOT NULL AND 
			VOUCHER_PAYROLL.PAYROLL_OTHER_MONEY = VOUCHER_PAYROLL_MONEY.MONEY_TYPE AND
			VOUCHER_PAYROLL.ACTION_ID = VOUCHER_PAYROLL_MONEY.ACTION_ID
		GROUP BY 
			OTHER_MONEY,
			OTHER_MONEY2,
			VOUCHER.EMPLOYEE_ID,
			VOUCHER_PAYROLL.BRANCH_ID,
			PAYROLL_REVENUE_DATE,
			VOUCHER_DUEDATE,
			PAYROLL_RECORD_DATE,
			PAYROLL_OTHER_MONEY

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE_VOUCHER_TOTAL_EMPLOYEE_PROJECT] AS
			SELECT
				0 ACTION_VALUE_B,
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				0 ACTION_VALUE2_B,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				0 OTHER_CASH_ACT_VALUE_B,
				SUM(OTHER_MONEY_VALUE/(PAYROLL_MONEY.RATE2/PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_A,
				PAYROLL.PROJECT_ID,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				CHEQUE.EMPLOYEE_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				CHEQUE,
				PAYROLL,
				PAYROLL_MONEY
			WHERE
				(CHEQUE_STATUS_ID IN (1,2,13,5,10) OR (CHEQUE_STATUS_ID = 4 AND CHEQUE_DUEDATE > GETDATE())) AND
				CHEQUE_PAYROLL_ID = PAYROLL.ACTION_ID AND
				CHEQUE.EMPLOYEE_ID IS NOT NULL AND 
				PAYROLL.PAYROLL_OTHER_MONEY = PAYROLL_MONEY.MONEY_TYPE AND
				PAYROLL.ACTION_ID = PAYROLL_MONEY.ACTION_ID
			GROUP BY
				PAYROLL.PROJECT_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				CHEQUE.EMPLOYEE_ID,
				PAYROLL_REVENUE_DATE,
				CHEQUE_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				0 ACTION_VALUE_B,
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				0 ACTION_VALUE2_B,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				0 OTHER_CASH_ACT_VALUE_B,
				SUM(OTHER_MONEY_VALUE/(VOUCHER_PAYROLL_MONEY.RATE2/VOUCHER_PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_A,
				VOUCHER_PAYROLL.PROJECT_ID,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				VOUCHER.EMPLOYEE_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				VOUCHER,
				VOUCHER_PAYROLL,
				VOUCHER_PAYROLL_MONEY
			WHERE
				(VOUCHER_STATUS_ID IN (1,2,13,5,10,11) OR (VOUCHER_STATUS_ID = 4 AND VOUCHER_DUEDATE > GETDATE())) AND
				VOUCHER_PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
				VOUCHER.EMPLOYEE_ID IS NOT NULL AND 
				VOUCHER_PAYROLL.PAYROLL_OTHER_MONEY = VOUCHER_PAYROLL_MONEY.MONEY_TYPE AND
				VOUCHER_PAYROLL.ACTION_ID = VOUCHER_PAYROLL_MONEY.ACTION_ID
			GROUP BY 
				VOUCHER_PAYROLL.PROJECT_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				VOUCHER.EMPLOYEE_ID,
				PAYROLL_REVENUE_DATE,
				VOUCHER_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_B,
				0 ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_B,
				0 ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				SUM(OTHER_MONEY_VALUE/(PAYROLL_MONEY.RATE2/PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_B,
				0 OTHER_CASH_ACT_VALUE_A,
				PAYROLL.PROJECT_ID,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				CHEQUE.EMPLOYEE_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				CHEQUE,
				PAYROLL,
				PAYROLL_MONEY
			WHERE
				CHEQUE_STATUS_ID IN (6) AND
				CHEQUE_PAYROLL_ID = PAYROLL.ACTION_ID AND
				CHEQUE.EMPLOYEE_ID IS NOT NULL AND 
				PAYROLL.PAYROLL_OTHER_MONEY = PAYROLL_MONEY.MONEY_TYPE AND
				PAYROLL.ACTION_ID = PAYROLL_MONEY.ACTION_ID
			GROUP BY
				PAYROLL.PROJECT_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				CHEQUE.EMPLOYEE_ID,
				PAYROLL_REVENUE_DATE,
				CHEQUE_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_B,
				0 ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_B,
				0 ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				SUM(OTHER_MONEY_VALUE/(VOUCHER_PAYROLL_MONEY.RATE2/VOUCHER_PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_B,
				0 OTHER_CASH_ACT_VALUE_A,
				VOUCHER_PAYROLL.PROJECT_ID,
				PAYROLL_OTHER_MONEY OTHER_MONEY,			
				VOUCHER.EMPLOYEE_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				VOUCHER,
				VOUCHER_PAYROLL,
				VOUCHER_PAYROLL_MONEY
			WHERE
				VOUCHER_STATUS_ID IN (6) AND
				VOUCHER_PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
				VOUCHER.EMPLOYEE_ID IS NOT NULL AND 
				VOUCHER_PAYROLL.PAYROLL_OTHER_MONEY = VOUCHER_PAYROLL_MONEY.MONEY_TYPE AND
				VOUCHER_PAYROLL.ACTION_ID = VOUCHER_PAYROLL_MONEY.ACTION_ID
			GROUP BY 
				VOUCHER_PAYROLL.PROJECT_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				VOUCHER.EMPLOYEE_ID,
				PAYROLL_REVENUE_DATE,
				VOUCHER_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE_VOUCHER_TOTAL_EMPLOYEE_PROJECT_BRANCH] AS
			SELECT
				0 ACTION_VALUE_B,
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				0 ACTION_VALUE2_B,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				0 OTHER_CASH_ACT_VALUE_B,
				SUM(OTHER_MONEY_VALUE/(PAYROLL_MONEY.RATE2/PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_A,
				PAYROLL.PROJECT_ID,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				CHEQUE.EMPLOYEE_ID,
				PAYROLL.BRANCH_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				CHEQUE,
				PAYROLL,
				PAYROLL_MONEY
			WHERE
				(CHEQUE_STATUS_ID IN (1,2,13,5,10) OR (CHEQUE_STATUS_ID = 4 AND CHEQUE_DUEDATE > GETDATE())) AND
				CHEQUE_PAYROLL_ID = PAYROLL.ACTION_ID AND
				CHEQUE.EMPLOYEE_ID IS NOT NULL AND 
				PAYROLL.PAYROLL_OTHER_MONEY = PAYROLL_MONEY.MONEY_TYPE AND
				PAYROLL.ACTION_ID = PAYROLL_MONEY.ACTION_ID
			GROUP BY
				PAYROLL.PROJECT_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				CHEQUE.EMPLOYEE_ID,
				PAYROLL.BRANCH_ID,
				PAYROLL_REVENUE_DATE,
				CHEQUE_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				0 ACTION_VALUE_B,
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				0 ACTION_VALUE2_B,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				0 OTHER_CASH_ACT_VALUE_B,
				SUM(OTHER_MONEY_VALUE/(VOUCHER_PAYROLL_MONEY.RATE2/VOUCHER_PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_A,
				VOUCHER_PAYROLL.PROJECT_ID,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				VOUCHER.EMPLOYEE_ID,
				VOUCHER_PAYROLL.BRANCH_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				VOUCHER,
				VOUCHER_PAYROLL,
				VOUCHER_PAYROLL_MONEY
			WHERE
				(VOUCHER_STATUS_ID IN (1,2,13,5,10,11) OR (VOUCHER_STATUS_ID = 4 AND VOUCHER_DUEDATE > GETDATE())) AND
				VOUCHER_PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
				VOUCHER.EMPLOYEE_ID IS NOT NULL AND 
				VOUCHER_PAYROLL.PAYROLL_OTHER_MONEY = VOUCHER_PAYROLL_MONEY.MONEY_TYPE AND
				VOUCHER_PAYROLL.ACTION_ID = VOUCHER_PAYROLL_MONEY.ACTION_ID
			GROUP BY 
				VOUCHER_PAYROLL.PROJECT_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				VOUCHER.EMPLOYEE_ID,
				VOUCHER_PAYROLL.BRANCH_ID,
				PAYROLL_REVENUE_DATE,
				VOUCHER_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_B,
				0 ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_B,
				0 ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				SUM(OTHER_MONEY_VALUE/(PAYROLL_MONEY.RATE2/PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_B,
				0 OTHER_CASH_ACT_VALUE_A,
				PAYROLL.PROJECT_ID,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				CHEQUE.EMPLOYEE_ID,
				PAYROLL.BRANCH_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				CHEQUE,
				PAYROLL,
				PAYROLL_MONEY
			WHERE
				CHEQUE_STATUS_ID IN (6) AND
				CHEQUE_PAYROLL_ID = PAYROLL.ACTION_ID AND
				CHEQUE.EMPLOYEE_ID IS NOT NULL AND 
				PAYROLL.PAYROLL_OTHER_MONEY = PAYROLL_MONEY.MONEY_TYPE AND
				PAYROLL.ACTION_ID = PAYROLL_MONEY.ACTION_ID
			GROUP BY
				PAYROLL.PROJECT_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				CHEQUE.EMPLOYEE_ID,
				PAYROLL.BRANCH_ID,
				PAYROLL_REVENUE_DATE,
				CHEQUE_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_B,
				0 ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_B,
				0 ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				SUM(OTHER_MONEY_VALUE/(VOUCHER_PAYROLL_MONEY.RATE2/VOUCHER_PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_B,
				0 OTHER_CASH_ACT_VALUE_A,
				VOUCHER_PAYROLL.PROJECT_ID,
				PAYROLL_OTHER_MONEY OTHER_MONEY,			
				VOUCHER.EMPLOYEE_ID,
				VOUCHER_PAYROLL.BRANCH_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				VOUCHER,
				VOUCHER_PAYROLL,
				VOUCHER_PAYROLL_MONEY
			WHERE
				VOUCHER_STATUS_ID IN (6) AND
				VOUCHER_PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
				VOUCHER.EMPLOYEE_ID IS NOT NULL AND 
				VOUCHER_PAYROLL.PAYROLL_OTHER_MONEY = VOUCHER_PAYROLL_MONEY.MONEY_TYPE AND
				VOUCHER_PAYROLL.ACTION_ID = VOUCHER_PAYROLL_MONEY.ACTION_ID
			GROUP BY 
				VOUCHER_PAYROLL.PROJECT_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				VOUCHER.EMPLOYEE_ID,
				VOUCHER_PAYROLL.BRANCH_ID,
				PAYROLL_REVENUE_DATE,
				VOUCHER_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE_VOUCHER_TOTAL_PROJECT] AS
			SELECT
				0 ACTION_VALUE_B,
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				0 ACTION_VALUE2_B,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				0 OTHER_CASH_ACT_VALUE_B,
				SUM(OTHER_MONEY_VALUE/(PAYROLL_MONEY.RATE2/PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_A,
				PAYROLL.PROJECT_ID,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				CHEQUE.COMPANY_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				CHEQUE,
				PAYROLL,
				PAYROLL_MONEY
			WHERE
				(CHEQUE_STATUS_ID IN (1,2,13,5,10) OR (CHEQUE_STATUS_ID = 4 AND CHEQUE_DUEDATE > GETDATE())) AND
				CHEQUE_PAYROLL_ID = PAYROLL.ACTION_ID AND
				CHEQUE.COMPANY_ID IS NOT NULL AND 
				PAYROLL.PAYROLL_OTHER_MONEY = PAYROLL_MONEY.MONEY_TYPE AND
				PAYROLL.ACTION_ID = PAYROLL_MONEY.ACTION_ID
			GROUP BY
				PAYROLL.PROJECT_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				CHEQUE.COMPANY_ID,
				PAYROLL_REVENUE_DATE,
				CHEQUE_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				0 ACTION_VALUE_B,
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				0 ACTION_VALUE2_B,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				0 OTHER_CASH_ACT_VALUE_B,
				SUM(OTHER_MONEY_VALUE/(VOUCHER_PAYROLL_MONEY.RATE2/VOUCHER_PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_A,
				VOUCHER_PAYROLL.PROJECT_ID,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				VOUCHER.COMPANY_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				VOUCHER,
				VOUCHER_PAYROLL,
				VOUCHER_PAYROLL_MONEY
			WHERE
				(VOUCHER_STATUS_ID IN (1,2,13,5,10,11) OR (VOUCHER_STATUS_ID = 4 AND VOUCHER_DUEDATE > GETDATE())) AND
				VOUCHER_PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
				VOUCHER.COMPANY_ID IS NOT NULL AND 
				VOUCHER_PAYROLL.PAYROLL_OTHER_MONEY = VOUCHER_PAYROLL_MONEY.MONEY_TYPE AND
				VOUCHER_PAYROLL.ACTION_ID = VOUCHER_PAYROLL_MONEY.ACTION_ID
			GROUP BY 
				VOUCHER_PAYROLL.PROJECT_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				VOUCHER.COMPANY_ID,
				PAYROLL_REVENUE_DATE,
				VOUCHER_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_B,
				0 ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_B,
				0 ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				SUM(OTHER_MONEY_VALUE/(PAYROLL_MONEY.RATE2/PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_B,
				0 OTHER_CASH_ACT_VALUE_A,
				PAYROLL.PROJECT_ID,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				CHEQUE.COMPANY_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				CHEQUE,
				PAYROLL,
				PAYROLL_MONEY
			WHERE
				CHEQUE_STATUS_ID IN (6) AND
				CHEQUE_PAYROLL_ID = PAYROLL.ACTION_ID AND
				CHEQUE.COMPANY_ID IS NOT NULL AND 
				PAYROLL.PAYROLL_OTHER_MONEY = PAYROLL_MONEY.MONEY_TYPE AND
				PAYROLL.ACTION_ID = PAYROLL_MONEY.ACTION_ID
			GROUP BY
				PAYROLL.PROJECT_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				CHEQUE.COMPANY_ID,
				PAYROLL_REVENUE_DATE,
				CHEQUE_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_B,
				0 ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_B,
				0 ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				SUM(OTHER_MONEY_VALUE/(VOUCHER_PAYROLL_MONEY.RATE2/VOUCHER_PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_B,
				0 OTHER_CASH_ACT_VALUE_A,
				VOUCHER_PAYROLL.PROJECT_ID,
				PAYROLL_OTHER_MONEY OTHER_MONEY,			
				VOUCHER.COMPANY_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				VOUCHER,
				VOUCHER_PAYROLL,
				VOUCHER_PAYROLL_MONEY
			WHERE
				VOUCHER_STATUS_ID IN (6) AND
				VOUCHER_PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
				VOUCHER.COMPANY_ID IS NOT NULL AND 
				VOUCHER_PAYROLL.PAYROLL_OTHER_MONEY = VOUCHER_PAYROLL_MONEY.MONEY_TYPE AND
				VOUCHER_PAYROLL.ACTION_ID = VOUCHER_PAYROLL_MONEY.ACTION_ID
			GROUP BY 
				VOUCHER_PAYROLL.PROJECT_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				VOUCHER.COMPANY_ID,
				PAYROLL_REVENUE_DATE,
				VOUCHER_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CHEQUE_VOUCHER_TOTAL_PROJECT_BRANCH] AS
			SELECT
				0 ACTION_VALUE_B,
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				0 ACTION_VALUE2_B,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				0 OTHER_CASH_ACT_VALUE_B,
				SUM(OTHER_MONEY_VALUE/(PAYROLL_MONEY.RATE2/PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_A,
				PAYROLL.PROJECT_ID,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				CHEQUE.COMPANY_ID,
				PAYROLL.BRANCH_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				CHEQUE,
				PAYROLL,
				PAYROLL_MONEY
			WHERE
				(CHEQUE_STATUS_ID IN (1,2,13,5,10) OR (CHEQUE_STATUS_ID = 4 AND CHEQUE_DUEDATE > GETDATE())) AND
				CHEQUE_PAYROLL_ID = PAYROLL.ACTION_ID AND
				CHEQUE.COMPANY_ID IS NOT NULL AND 
				PAYROLL.PAYROLL_OTHER_MONEY = PAYROLL_MONEY.MONEY_TYPE AND
				PAYROLL.ACTION_ID = PAYROLL_MONEY.ACTION_ID
			GROUP BY
				PAYROLL.PROJECT_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				CHEQUE.COMPANY_ID,
				PAYROLL.BRANCH_ID,
				PAYROLL_REVENUE_DATE,
				CHEQUE_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				0 ACTION_VALUE_B,
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				0 ACTION_VALUE2_B,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				0 OTHER_CASH_ACT_VALUE_B,
				SUM(OTHER_MONEY_VALUE/(VOUCHER_PAYROLL_MONEY.RATE2/VOUCHER_PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_A,
				VOUCHER_PAYROLL.PROJECT_ID,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				VOUCHER.COMPANY_ID,
				VOUCHER_PAYROLL.BRANCH_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				VOUCHER,
				VOUCHER_PAYROLL,
				VOUCHER_PAYROLL_MONEY
			WHERE
				(VOUCHER_STATUS_ID IN (1,2,13,5,10,11) OR (VOUCHER_STATUS_ID = 4 AND VOUCHER_DUEDATE > GETDATE())) AND
				VOUCHER_PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
				VOUCHER.COMPANY_ID IS NOT NULL AND 
				VOUCHER_PAYROLL.PAYROLL_OTHER_MONEY = VOUCHER_PAYROLL_MONEY.MONEY_TYPE AND
				VOUCHER_PAYROLL.ACTION_ID = VOUCHER_PAYROLL_MONEY.ACTION_ID
			GROUP BY 
				VOUCHER_PAYROLL.PROJECT_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				VOUCHER.COMPANY_ID,
				VOUCHER_PAYROLL.BRANCH_ID,
				PAYROLL_REVENUE_DATE,
				VOUCHER_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_B,
				0 ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_B,
				0 ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				SUM(OTHER_MONEY_VALUE/(PAYROLL_MONEY.RATE2/PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_B,
				0 OTHER_CASH_ACT_VALUE_A,
				PAYROLL.PROJECT_ID,
				PAYROLL_OTHER_MONEY OTHER_MONEY,
				CHEQUE.COMPANY_ID,
				PAYROLL.BRANCH_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(CHEQUE_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				CHEQUE,
				PAYROLL,
				PAYROLL_MONEY
			WHERE
				CHEQUE_STATUS_ID IN (6) AND
				CHEQUE_PAYROLL_ID = PAYROLL.ACTION_ID AND
				CHEQUE.COMPANY_ID IS NOT NULL AND 
				PAYROLL.PAYROLL_OTHER_MONEY = PAYROLL_MONEY.MONEY_TYPE AND
				PAYROLL.ACTION_ID = PAYROLL_MONEY.ACTION_ID
			GROUP BY
				PAYROLL.PROJECT_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				CHEQUE.COMPANY_ID,
				PAYROLL.BRANCH_ID,
				PAYROLL_REVENUE_DATE,
				CHEQUE_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY
		UNION ALL
			SELECT
				SUM(OTHER_MONEY_VALUE) ACTION_VALUE_B,
				0 ACTION_VALUE_A,
				OTHER_MONEY ACTION_CURRENCY,
				SUM(OTHER_MONEY_VALUE2) ACTION_VALUE2_B,
				0 ACTION_VALUE2_A,
				OTHER_MONEY2 ACTION_MONEY2,		
				SUM(OTHER_MONEY_VALUE/(VOUCHER_PAYROLL_MONEY.RATE2/VOUCHER_PAYROLL_MONEY.RATE1)) OTHER_CASH_ACT_VALUE_B,
				0 OTHER_CASH_ACT_VALUE_A,
				VOUCHER_PAYROLL.PROJECT_ID,
				PAYROLL_OTHER_MONEY OTHER_MONEY,			
				VOUCHER.COMPANY_ID,
				VOUCHER_PAYROLL.BRANCH_ID,
				CASE WHEN DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) = 0 THEN 1 ELSE  DATEDIFF(day,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE),ISNULL(VOUCHER_DUEDATE,ISNULL(PAYROLL_REVENUE_DATE,PAYROLL_RECORD_DATE))) END AS DATE_DIFF
			FROM
				VOUCHER,
				VOUCHER_PAYROLL,
				VOUCHER_PAYROLL_MONEY
			WHERE
				VOUCHER_STATUS_ID IN (6) AND
				VOUCHER_PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
				VOUCHER.COMPANY_ID IS NOT NULL AND 
				VOUCHER_PAYROLL.PAYROLL_OTHER_MONEY = VOUCHER_PAYROLL_MONEY.MONEY_TYPE AND
				VOUCHER_PAYROLL.ACTION_ID = VOUCHER_PAYROLL_MONEY.ACTION_ID
			GROUP BY 
				VOUCHER_PAYROLL.PROJECT_ID,
				OTHER_MONEY,
				OTHER_MONEY2,
				VOUCHER.COMPANY_ID,
				VOUCHER_PAYROLL.BRANCH_ID,
				PAYROLL_REVENUE_DATE,
				VOUCHER_DUEDATE,
				PAYROLL_RECORD_DATE,
				PAYROLL_OTHER_MONEY

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CONSUMER_GROUP_SALE] AS
			SELECT
				SALE_STAGE,
				CONSUMER_ID,
				INVOICE_DATE,
				SUM(NETTOTAL) NETTOTAL,
				SUM(GROSSTOTAL) GROSSTOTAL,
				SUM(INV_NETTOTAL) INV_NETTOTAL,
				SUM(INV_GROSSTOTAL) INV_GROSSTOTAL
			FROM
			(
				SELECT
					I.SALE_STAGE,
					I.CONSUMER_ID,
					I.INVOICE_DATE,
					CASE WHEN INVOICE_CAT IN(54,55,62) THEN -1*I.GROSSTOTAL ELSE I.GROSSTOTAL END AS NETTOTAL,
					CASE WHEN INVOICE_CAT IN(54,55,62) THEN -1*I.NETTOTAL ELSE I.NETTOTAL END AS GROSSTOTAL,
					CASE WHEN INVOICE_CAT IN(54,55,62) THEN -1*I.INV_GROSSTOTAL ELSE I.INV_GROSSTOTAL END AS INV_NETTOTAL,
					CASE WHEN INVOICE_CAT IN(54,55,62) THEN -1*I.INV_NETTOTAL ELSE I.INV_NETTOTAL END AS INV_GROSSTOTAL
				FROM
					INVOICE_MULTILEVEL_SALES I
				WHERE
					I.INVOICE_CAT IN(52,53,54,55,62))
			T1
			GROUP BY
				SALE_STAGE,
				CONSUMER_ID,
				INVOICE_DATE

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[CONSUMER_SALE] AS
			SELECT
				CONSUMER_ID,
				INVOICE_DATE,
				INVOICE_ID,
				INVOICE_CAT,
				SUM(NETTOTAL) NETTOTAL,
				SUM(GROSSTOTAL) GROSSTOTAL,
				SUM(INV_NETTOTAL) INV_NETTOTAL,
				SUM(INV_GROSSTOTAL) INV_GROSSTOTAL
			FROM
			(
				SELECT DISTINCT
					I.REF_CONSUMER_ID AS CONSUMER_ID,
					I.INVOICE_DATE,
					I.INVOICE_ID,
					I.INVOICE_CAT,
					CASE WHEN INVOICE_CAT IN(54,55,62) THEN -1*I.GROSSTOTAL ELSE I.GROSSTOTAL END AS NETTOTAL,
					CASE WHEN INVOICE_CAT IN(54,55,62) THEN -1*I.NETTOTAL ELSE I.NETTOTAL END AS GROSSTOTAL,
					CASE WHEN INVOICE_CAT IN(54,55,62) THEN -1*I.INV_GROSSTOTAL ELSE I.INV_GROSSTOTAL END AS INV_NETTOTAL,
					CASE WHEN INVOICE_CAT IN(54,55,62) THEN -1*I.INV_NETTOTAL ELSE I.INV_NETTOTAL END AS INV_GROSSTOTAL
				FROM
					INVOICE_MULTILEVEL_SALES I
				WHERE
					I.INVOICE_CAT IN(52,53,54,55,62)		
			)
			T1
			GROUP BY
				CONSUMER_ID,
				INVOICE_DATE,
				INVOICE_ID,
				INVOICE_CAT

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[DAILY_DUE_REMAINDER] AS
		SELECT 
			SUM(BORC) BORC,
			SUM(BORC2) BORC2,
			SUM(ALACAK) ALACAK,
			SUM(ALACAK2) ALACAK2,
			SUM(BORC-ALACAK) BAKIYE,
			SUM(BORC2-ALACAK2) BAKIYE2,
			DUE_DATE
		FROM
			(
			SELECT
				CR.ACTION_VALUE AS BORC,
				CR.ACTION_VALUE_2 AS BORC2,
				0 AS ALACAK,
				0 AS ALACAK2,
				CR.DUE_DATE,
				CR.CARI_ACTION_ID
			FROM
				CARI_ROWS CR
			WHERE 
				(TO_CMP_ID IS NOT NULL
				OR TO_CONSUMER_ID IS NOT NULL
				OR TO_EMPLOYEE_ID IS NOT NULL)
				AND CR.ACTION_ID NOT IN 
					(
						SELECT 
							ICR.ACTION_ID 
						FROM 
							CARI_CLOSED_ROW ICR,
							CARI_CLOSED IC
						WHERE 
							ICR.CLOSED_ID = IC.CLOSED_ID 
							AND ICR.CLOSED_AMOUNT IS NOT NULL
							AND CR.ACTION_TYPE_ID = ICR.ACTION_TYPE_ID
							AND ((CR.ACTION_TABLE <> 'INVOICE' AND CR.ACTION_TABLE <> 'EXPENSE_ITEM_PLANS' AND CR.CARI_ACTION_ID = ICR.CARI_ACTION_ID) OR (CR.ACTION_TABLE = 'INVOICE' OR CR.ACTION_TABLE = 'EXPENSE_ITEM_PLANS'))
							AND (((CR.ACTION_TABLE = 'INVOICE' OR CR.ACTION_TABLE = 'EXPENSE_ITEM_PLANS') AND CR.DUE_DATE = ICR.DUE_DATE) OR (CR.ACTION_TABLE <> 'INVOICE' AND CR.ACTION_TABLE <> 'EXPENSE_ITEM_PLANS'))
							AND CR.OTHER_MONEY = ICR.OTHER_MONEY	
					)
				AND CR.ACTION_TYPE_ID IN (40,50,52,53,56,57,58,62,66,531,561,48,121)
		UNION ALL
			SELECT
				(CR.ACTION_VALUE-ROUND(SUM(ICR.CLOSED_AMOUNT),2)) AS BORC,
				(CR.ACTION_VALUE-ROUND(SUM(ICR.CLOSED_AMOUNT),2))/(CR.ACTION_VALUE/CR.ACTION_VALUE_2) AS BORC2,
				0 AS ALACAK,
				0 AS ALACAK2,
				CR.DUE_DATE,
				CR.CARI_ACTION_ID
			FROM
				CARI_ROWS CR,
				CARI_CLOSED_ROW ICR
			WHERE 
				CR.ACTION_ID = ICR.ACTION_ID
				AND CR.ACTION_TYPE_ID = ICR.ACTION_TYPE_ID
				AND ((CR.ACTION_TABLE <> 'INVOICE' AND CR.ACTION_TABLE <> 'EXPENSE_ITEM_PLANS' AND CR.CARI_ACTION_ID = ICR.CARI_ACTION_ID) OR (CR.ACTION_TABLE = 'INVOICE' OR CR.ACTION_TABLE = 'EXPENSE_ITEM_PLANS'))
				AND (((CR.ACTION_TABLE = 'INVOICE' OR CR.ACTION_TABLE = 'EXPENSE_ITEM_PLANS') AND CR.DUE_DATE = ICR.DUE_DATE) OR (CR.ACTION_TABLE <> 'INVOICE' AND CR.ACTION_TABLE <> 'EXPENSE_ITEM_PLANS'))
				AND (TO_CMP_ID IS NOT NULL
				OR TO_CONSUMER_ID IS NOT NULL
				OR TO_EMPLOYEE_ID IS NOT NULL)	
				AND CR.ACTION_TYPE_ID IN (40,50,52,53,56,57,58,62,66,531,561,48,121)
			GROUP BY
				CR.ACTION_VALUE,
				CR.ACTION_VALUE_2,
				CR.DUE_DATE,
				CR.CARI_ACTION_ID	
		UNION ALL
			SELECT
				0 AS BORC,
				0 AS BORC2,
				CR.ACTION_VALUE AS ALACAK,
				CR.ACTION_VALUE_2 AS ALACAK2,
				CR.DUE_DATE,
				CR.CARI_ACTION_ID
			FROM
				CARI_ROWS CR
			WHERE
				(FROM_CMP_ID IS NOT NULL
				OR FROM_CONSUMER_ID IS NOT NULL
				OR FROM_EMPLOYEE_ID IS NOT NULL	)
				AND CR.ACTION_ID NOT IN 
					(
						SELECT 
							ICR.ACTION_ID 
						FROM 
							CARI_CLOSED_ROW ICR,
							CARI_CLOSED IC
						WHERE 
							ICR.CLOSED_ID = IC.CLOSED_ID 
							AND ICR.CLOSED_AMOUNT IS NOT NULL
							AND CR.ACTION_TYPE_ID = ICR.ACTION_TYPE_ID
							AND ((CR.ACTION_TABLE <> 'INVOICE' AND CR.ACTION_TABLE <> 'EXPENSE_ITEM_PLANS' AND CR.CARI_ACTION_ID = ICR.CARI_ACTION_ID) OR (CR.ACTION_TABLE = 'INVOICE' OR CR.ACTION_TABLE = 'EXPENSE_ITEM_PLANS'))
							AND (((CR.ACTION_TABLE = 'INVOICE' OR CR.ACTION_TABLE = 'EXPENSE_ITEM_PLANS') AND CR.DUE_DATE = ICR.DUE_DATE) OR (CR.ACTION_TABLE <> 'INVOICE' AND CR.ACTION_TABLE <> 'EXPENSE_ITEM_PLANS'))
							AND CR.OTHER_MONEY = ICR.OTHER_MONEY	
					)
				AND CR.ACTION_TYPE_ID IN (40,51,54,55,59,591,592,60,61,63,64,65,68,690,691,601,49,120,122)
		UNION ALL
			SELECT
				0 AS BORC,
				0 AS BORC2,
				(CR.ACTION_VALUE-ROUND(SUM(ICR.CLOSED_AMOUNT),2))AS ALACAK,
				(CR.ACTION_VALUE-ROUND(SUM(ICR.CLOSED_AMOUNT),2))/(CR.ACTION_VALUE/CR.ACTION_VALUE_2) AS ALACAK2,
				CR.DUE_DATE,
				CR.CARI_ACTION_ID
			FROM
				CARI_ROWS CR,
				CARI_CLOSED_ROW ICR
			WHERE
				CR.ACTION_ID = ICR.ACTION_ID
				AND CR.ACTION_TYPE_ID = ICR.ACTION_TYPE_ID
				AND ((CR.ACTION_TABLE <> 'INVOICE' AND CR.ACTION_TABLE <> 'EXPENSE_ITEM_PLANS' AND CR.CARI_ACTION_ID = ICR.CARI_ACTION_ID) OR (CR.ACTION_TABLE = 'INVOICE' OR CR.ACTION_TABLE = 'EXPENSE_ITEM_PLANS'))
				AND (((CR.ACTION_TABLE = 'INVOICE' OR CR.ACTION_TABLE = 'EXPENSE_ITEM_PLANS') AND CR.DUE_DATE = ICR.DUE_DATE) OR (CR.ACTION_TABLE <> 'INVOICE' AND CR.ACTION_TABLE <> 'EXPENSE_ITEM_PLANS'))
				AND (FROM_CMP_ID IS NOT NULL
				OR FROM_CONSUMER_ID IS NOT NULL
				OR FROM_EMPLOYEE_ID IS NOT NULL)
				AND CR.ACTION_TYPE_ID IN (40,51,54,55,59,591,592,60,61,63,64,65,68,690,691,601,49,120,122)	
			GROUP BY
				CR.ACTION_VALUE,
				CR.ACTION_VALUE_2,
				CR.DUE_DATE	,
				CR.CARI_ACTION_ID		
		) AS CARI_TOPLAM_1
		GROUP BY DUE_DATE

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_ACCOUNT_CARD_DETAIL] AS
			SELECT 
				ACC.ACTION_DATE,
				ACC.BILL_NO,
				ACC.CARD_TYPE,
				ACC.CARD_TYPE_NO,	
				AP.ACCOUNT_NAME,
				ACC.PAPER_NO,
				ACC.ACTION_TYPE,
				ACC.CARD_DETAIL,
				COMPANY.FULLNAME AS CARI_HESAP,
				COMPANY.TAXOFFICE AS VERGI_DAIRESI,
				COMPANY.TAXNO AS VERGI_NO,
				COMPANY.IS_RELATED_COMPANY AS BAGLI_UYE,
				ACR.CARD_ID,
                ACR.CARD_ROW_ID,
                ACR.ACCOUNT_ID,
                ACR.BA,
                ACR.AMOUNT,
                ACR.AMOUNT_CURRENCY,
                ACR.DETAIL,
                ACR.AMOUNT_2,
                ACR.ROW_ACTION_ID,
                ACR.ROW_ACTION_TYPE_ID,
                ACR.ROW_PAPER_NO,
                ACR.AMOUNT_CURRENCY_2,
                ACR.OTHER_AMOUNT,
                ACR.OTHER_CURRENCY,
                ACR.QUANTITY,
                ACR.PRICE,
                ACR.BILL_CONTROL_NO,
                ACR.IFRS_CODE,
                ACR.ACCOUNT_CODE2,
                ACR.IS_RATE_DIFF_ROW,
                ACR.COST_PROFIT_CENTER,
                ACR.ACC_DEPARTMENT_ID,
                ACR.ACC_BRANCH_ID,
                ACR.ACC_PROJECT_ID	
			FROM
				ACCOUNT_CARD ACC,
				ACCOUNT_CARD_ROWS ACR,
				ACCOUNT_PLAN AP,
				#attributes.dsn#.COMPANY COMPANY
			WHERE 
				ACR.CARD_ID=ACC.CARD_ID AND	
				AP.ACCOUNT_CODE=ACR.ACCOUNT_ID AND 
				ACC.ACC_COMPANY_ID = COMPANY.COMPANY_ID AND 
				ACC.ACC_COMPANY_ID IS NOT NULL
			UNION 
			SELECT 
				ACC.ACTION_DATE,
				ACC.BILL_NO,
				ACC.CARD_TYPE,
				ACC.CARD_TYPE_NO,	
				AP.ACCOUNT_NAME,
				ACC.PAPER_NO,
				ACC.ACTION_TYPE,
				ACC.CARD_DETAIL,
				(CONSUMER.CONSUMER_NAME + CONSUMER.CONSUMER_SURNAME) AS CARI_HESAP,
				CONSUMER.TAX_OFFICE AS VERGI_DAIRESI,
				CONSUMER.TAX_POSTCODE  AS VERGI_NO,
				CONSUMER.IS_RELATED_CONSUMER AS BAGLI_UYE,
				ACR.CARD_ID,
                ACR.CARD_ROW_ID,
                ACR.ACCOUNT_ID,
                ACR.BA,
                ACR.AMOUNT,
                ACR.AMOUNT_CURRENCY,
                ACR.DETAIL,
                ACR.AMOUNT_2,
                ACR.ROW_ACTION_ID,
                ACR.ROW_ACTION_TYPE_ID,
                ACR.ROW_PAPER_NO,
                ACR.AMOUNT_CURRENCY_2,
                ACR.OTHER_AMOUNT,
                ACR.OTHER_CURRENCY,
                ACR.QUANTITY,
                ACR.PRICE,
                ACR.BILL_CONTROL_NO,
                ACR.IFRS_CODE,
                ACR.ACCOUNT_CODE2,
                ACR.IS_RATE_DIFF_ROW,
                ACR.COST_PROFIT_CENTER,
                ACR.ACC_DEPARTMENT_ID,
                ACR.ACC_BRANCH_ID,
                ACR.ACC_PROJECT_ID		
			FROM
				ACCOUNT_CARD ACC,
				ACCOUNT_CARD_ROWS ACR,
				ACCOUNT_PLAN AP,
				#attributes.dsn#.CONSUMER CONSUMER
			WHERE 
				ACR.CARD_ID=ACC.CARD_ID AND	
				AP.ACCOUNT_CODE=ACR.ACCOUNT_ID AND 
				ACC.ACC_CONSUMER_ID = CONSUMER.CONSUMER_ID AND 
				ACC.ACC_CONSUMER_ID IS NOT NULL
			UNION 
			SELECT 
				ACC.ACTION_DATE,
				ACC.BILL_NO,
				ACC.CARD_TYPE,
				ACC.CARD_TYPE_NO,	
				AP.ACCOUNT_NAME,
				ACC.PAPER_NO,
				ACC.ACTION_TYPE,
				ACC.CARD_DETAIL,
				'' AS CARI_HESAP,
				'' AS VERGI_DAIRESI,
				'' AS VERGI_NO,
				2 AS BAGLI_UYE,
				ACR.CARD_ID,
                ACR.CARD_ROW_ID,
                ACR.ACCOUNT_ID,
                ACR.BA,
                ACR.AMOUNT,

                ACR.AMOUNT_CURRENCY,
                ACR.DETAIL,
                ACR.AMOUNT_2,
                ACR.ROW_ACTION_ID,
                ACR.ROW_ACTION_TYPE_ID,
                ACR.ROW_PAPER_NO,
                ACR.AMOUNT_CURRENCY_2,
                ACR.OTHER_AMOUNT,
                ACR.OTHER_CURRENCY,
                ACR.QUANTITY,
                ACR.PRICE,
                ACR.BILL_CONTROL_NO,
                ACR.IFRS_CODE,
                ACR.ACCOUNT_CODE2,
                ACR.IS_RATE_DIFF_ROW,
                ACR.COST_PROFIT_CENTER,
                ACR.ACC_DEPARTMENT_ID,
                ACR.ACC_BRANCH_ID,
                ACR.ACC_PROJECT_ID	
			FROM
				ACCOUNT_CARD ACC,
				ACCOUNT_CARD_ROWS ACR,
				ACCOUNT_PLAN AP
			WHERE 
				ACR.CARD_ID=ACC.CARD_ID AND	
				AP.ACCOUNT_CODE=ACR.ACCOUNT_ID AND 	
				ACC.ACC_CONSUMER_ID IS NULL AND
				ACC.ACC_COMPANY_ID IS NULL

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_ACCOUNT_CARD_GROUP] AS	
			SELECT 
				AP2.ACCOUNT_CODE  AS TOP_ACCOUNT_CODE,	
				AP2.ACCOUNT_NAME AS TOP_ACCOUNT_NAME,
				AP2.IFRS_CODE  AS TOP_ACCOUNT_IFRS_CODE,	
				AP2.IFRS_NAME AS TOP_ACCOUNT_IFRS_NAME,
				AP.IFRS_CODE AS ACC_IFRS_CODE,
				AP.IFRS_NAME,
				AP.ACCOUNT_NAME,
				ACC.ACTION_DATE,
				ACC.BILL_NO,
				ACC.CARD_TYPE,
				ACC.CARD_CAT_ID,
				ACC.CARD_TYPE_NO,		
				ACC.PAPER_NO,
				ACC.ACTION_TYPE,
				ACC.CARD_DETAIL,
				ACC.IS_COMPOUND,	
				ACR.CARD_ID,
                ACR.CARD_ROW_ID,
                ACR.ACCOUNT_ID,
                ACR.BA,
                ACR.AMOUNT,
                ACR.AMOUNT_CURRENCY,
                ACR.DETAIL,
                ACR.AMOUNT_2,
                ACR.ROW_ACTION_ID,
                ACR.ROW_ACTION_TYPE_ID,
                ACR.ROW_PAPER_NO,
                ACR.AMOUNT_CURRENCY_2,
                ACR.OTHER_AMOUNT,
                ACR.OTHER_CURRENCY,
                ACR.QUANTITY,
                ACR.PRICE,
                ACR.BILL_CONTROL_NO,
                ACR.IFRS_CODE,
                ACR.ACCOUNT_CODE2,
                ACR.IS_RATE_DIFF_ROW,
                ACR.COST_PROFIT_CENTER,
                ACR.ACC_DEPARTMENT_ID,
                ACR.ACC_BRANCH_ID,
                ACR.ACC_PROJECT_ID		
			FROM
				ACCOUNT_CARD ACC,
				ACCOUNT_CARD_ROWS ACR,
				ACCOUNT_PLAN AP,
				ACCOUNT_PLAN AP2
			WHERE 
				ACR.CARD_ID=ACC.CARD_ID 
				
				AND AP.ACCOUNT_CODE=ACR.ACCOUNT_ID
				AND (
					AP2.ACCOUNT_CODE =replace(left(AP.ACCOUNT_CODE,charindex('.',AP.ACCOUNT_CODE)),'.','')		
					OR 
					(
						AP2.ACCOUNT_CODE =AP.ACCOUNT_CODE AND
						len(replace(left(AP.ACCOUNT_CODE,charindex('.',AP.ACCOUNT_CODE)),'.',''))=0
					)
				)

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_ACTION_PROJECT_PRODUCTS] AS
			SELECT DISTINCT
				SFR.STOCK_ID,
				ISNULL(SF.PROJECT_ID,SF.PROJECT_ID_IN) AS PROJECT_ID,
				SF.FIS_TYPE AS PROCESS_TYPE,
				SF.FIS_DATE AS ACTION_DATE,
				2 AS PURCHASE_SALES,
				'STOCK_FIS' AS ACTION_TYPE
			FROM
				STOCK_FIS SF,
				STOCK_FIS_ROW SFR
			WHERE
				SF.FIS_ID = SFR.FIS_ID	
				AND (SF.PROJECT_ID IS NOT NULL OR SF.PROJECT_ID_IN IS NOT NULL)
		UNION
			SELECT DISTINCT
				SHIP_ROW.STOCK_ID,
				ISNULL(SHIP.PROJECT_ID,SHIP.PROJECT_ID_IN) AS PROJECT_ID,
				SHIP.SHIP_TYPE AS PROCESS_TYPE,
				SHIP.SHIP_DATE AS ACTION_DATE,
				SHIP.PURCHASE_SALES,
				'SHIP' AS ACTION_TYPE
			FROM
				SHIP,
				SHIP_ROW
			WHERE
				SHIP.SHIP_ID = SHIP_ROW.SHIP_ID
				AND SHIP.IS_SHIP_IPTAL=0
				AND (SHIP.PROJECT_ID_IN IS NOT NULL OR SHIP.PROJECT_ID IS NOT NULL)
		UNION
			SELECT DISTINCT
				INVOICE_ROW.STOCK_ID,
				INVOICE.PROJECT_ID,
				INVOICE.INVOICE_CAT AS PROCESS_TYPE,
				INVOICE.INVOICE_DATE AS ACTION_DATE,
				INVOICE.PURCHASE_SALES,
				'INVOICE' AS ACTION_TYPE
			FROM
				INVOICE,
				INVOICE_ROW
			WHERE
				INVOICE.INVOICE_ID = INVOICE_ROW.INVOICE_ID
				AND INVOICE.IS_IPTAL = 0
				AND INVOICE.PROJECT_ID IS NOT NULL
				AND INVOICE_CAT <> 67
				AND INVOICE_CAT <> 69
		UNION
			SELECT DISTINCT
				ORR.STOCK_ID,
				ORD.PROJECT_ID,
				0 AS PROCESS_TYPE,
				ORD.ORDER_DATE AS ACTION_DATE,
				0 AS PURCHASE_SALES,
				'ORDER_SALE' AS ACTION_TYPE
			FROM
				#attributes.dsn#_#get_period.our_company_id#.ORDERS ORD,
				#attributes.dsn#_#get_period.our_company_id#.ORDER_ROW ORR
			WHERE
				ORR.ORDER_ID = ORD.ORDER_ID
				AND ORD.PROJECT_ID IS NOT NULL
				AND ORD.ORDER_STATUS = 1
				AND ORD.PURCHASE_SALES=0
		UNION
			SELECT DISTINCT
				ORR.STOCK_ID,
				ORD.PROJECT_ID,
				0 AS PROCESS_TYPE,
				ORD.ORDER_DATE AS ACTION_DATE,
				1 AS PURCHASE_SALES,
				'ORDERS' AS ACTION_TYPE
			FROM
				#attributes.dsn#_#get_period.our_company_id#.ORDERS ORD,
				#attributes.dsn#_#get_period.our_company_id#.ORDER_ROW ORR
			WHERE
				ORR.ORDER_ID = ORD.ORDER_ID
				AND ORD.PROJECT_ID IS NOT NULL
				AND ORD.ORDER_STATUS = 1
				AND
				(	
						(ORD.PURCHASE_SALES = 1 AND ORD.ORDER_ZONE = 0)  	OR
						(ORD.PURCHASE_SALES = 0 AND ORD.ORDER_ZONE = 1)	
				)
		UNION
			SELECT DISTINCT
				PMR.STOCK_ID,
				PM.PROJECT_ID,
				0 AS PROCESS_TYPE,
				'' AS ACTION_DATE,
				2 AS PURCHASE_SALES,
				'PROMATERIAL' AS ACTION_TYPE
			FROM
				#attributes.dsn#.PRO_MATERIAL PM,
				#attributes.dsn#.PRO_MATERIAL_ROW PMR
			WHERE 
				PM.PRO_MATERIAL_ID=PMR.PRO_MATERIAL_ID AND
				PM.PROJECT_ID IS NOT NULL
		UNION
			SELECT DISTINCT
				INDR.STOCK_ID,
				IND.PROJECT_ID,
				0 AS PROCESS_TYPE,
				IND.RECORD_DATE AS ACTION_DATE,
				2 AS PURCHASE_SALES,
				'INTERNAL' AS ACTION_TYPE
			FROM
				#attributes.dsn#_#get_period.our_company_id#.INTERNALDEMAND IND,
				#attributes.dsn#_#get_period.our_company_id#.INTERNALDEMAND_ROW INDR
			WHERE
				INDR.I_ID = IND.INTERNAL_ID
				AND IND.PROJECT_ID IS NOT NULL
		UNION
			SELECT DISTINCT
				PORD.STOCK_ID,
				PORD.PROJECT_ID,
				0 AS PROCESS_TYPE,
				PORD.START_DATE AS ACTION_DATE,
				2 AS PURCHASE_SALES,
				'PRODUCTION_ORDERS' AS ACTION_TYPE
			FROM
				#attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS PORD
			WHERE
				PORD.PROJECT_ID IS NOT NULL

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_ALL_ACC_CODE_DAILY_TOTAL] AS
			SELECT 
				SUM(AMOUNT) AS AMOUNT_TOTAL,
				SUM(ISNULL(AMOUNT_2,0)) AS AMOUNT_TOTAL_2,
				AP.ACCOUNT_CODE,
				ACTION_DATE,
				BA
			FROM
				ACCOUNT_CARD ACC,
				ACCOUNT_CARD_ROWS ACR,
				ACCOUNT_PLAN AP
			WHERE 
				ACR.CARD_ID=ACC.CARD_ID
				AND AP.SUB_ACCOUNT = 1
				AND AP.ACCOUNT_CODE = substring(ACR.ACCOUNT_ID,1,len(AP.ACCOUNT_CODE))
				AND substring(ACR.ACCOUNT_ID,(len(AP.ACCOUNT_CODE)+1),1)='.'		
			GROUP BY	
				AP.ACCOUNT_CODE,
				ACTION_DATE,
				BA
		UNION ALL
			SELECT 
				SUM(AMOUNT) AS AMOUNT_TOTAL,
				SUM(ISNULL(AMOUNT_2,0)) AS AMOUNT_TOTAL_2,
				AP.ACCOUNT_CODE,
				ACTION_DATE,
				BA
			FROM
				ACCOUNT_CARD ACC,
				ACCOUNT_CARD_ROWS ACR,
				ACCOUNT_PLAN AP
			WHERE 
				ACR.CARD_ID=ACC.CARD_ID	
				AND AP.SUB_ACCOUNT = 0
				AND AP.ACCOUNT_CODE = ACR.ACCOUNT_ID
			GROUP BY	
				AP.ACCOUNT_CODE,
				ACTION_DATE,
				BA

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_ALL_STOCK_ACTION_DETAIL] AS
			SELECT
				(SR.STOCK_IN - SR.STOCK_OUT) AS TOTAL_STOCK, 
				SR.PRODUCT_ID, 
				SR.STOCK_ID, 
				SR.STOCK_IN AS GIRIS,
				SR.STOCK_OUT AS CIKIS,	
				SR.STORE,
				SR.STORE_LOCATION,
				SR.UPD_ID,
				SR.PROCESS_TYPE,
				SR.PROCESS_DATE,		
				S.RECORD_DATE AS RECORD_DATE,	
				S.SHIP_DATE AS ACTION_DATE,		
				S.SHIP_NUMBER AS ACTION_NUMBER,
				S.PROJECT_ID
			FROM	
				STOCKS_ROW SR,
				SHIP S
			WHERE
				SR.UPD_ID=S.SHIP_ID
				AND SR.PROCESS_TYPE=S.SHIP_TYPE
			UNION ALL
			SELECT
				(SR.STOCK_IN - SR.STOCK_OUT) AS TOTAL_STOCK, 
				SR.PRODUCT_ID, 
				SR.STOCK_ID, 
				SR.STOCK_IN AS GIRIS,
				SR.STOCK_OUT AS CIKIS,	
				SR.STORE,
				SR.STORE_LOCATION,
				SR.UPD_ID,
				SR.PROCESS_TYPE,
				SR.PROCESS_DATE,
				SF.RECORD_DATE AS RECORD_DATE,	
				SF.FIS_DATE AS ACTION_DATE,	
				SF.FIS_NUMBER AS ACTION_NUMBER,
				SF.PROJECT_ID

			FROM	
				STOCKS_ROW SR,
				STOCK_FIS SF
			WHERE
				SR.UPD_ID=SF.FIS_ID
				AND SR.PROCESS_TYPE=SF.FIS_TYPE
			UNION ALL
			SELECT
				(SR.STOCK_IN - SR.STOCK_OUT) AS TOTAL_STOCK, 
				SR.PRODUCT_ID, 
				SR.STOCK_ID, 
				SR.STOCK_IN AS GIRIS,
				SR.STOCK_OUT AS CIKIS,	
				SR.STORE,
				SR.STORE_LOCATION,
				SR.UPD_ID,
				SR.PROCESS_TYPE,
				SR.PROCESS_DATE,
				SF.RECORD_DATE AS RECORD_DATE,
				SF.PROCESS_DATE AS ACTION_DATE,		
				SF.EXCHANGE_NUMBER AS ACTION_NUMBER,
				'' AS PROJECT_ID
			FROM	
				STOCKS_ROW SR,
				STOCK_EXCHANGE SF
			WHERE
				SR.UPD_ID=SF.STOCK_EXCHANGE_ID
				AND SR.PROCESS_TYPE=SF.PROCESS_TYPE
			UNION ALL
			SELECT
				(SR.STOCK_IN - SR.STOCK_OUT) AS TOTAL_STOCK, 
				SR.PRODUCT_ID, 
				SR.STOCK_ID, 
				SR.STOCK_IN AS GIRIS,
				SR.STOCK_OUT AS CIKIS,	
				SR.STORE,
				SR.STORE_LOCATION,
				SR.UPD_ID,
				SR.PROCESS_TYPE,
				SR.PROCESS_DATE,
				SR.PROCESS_DATE AS RECORD_DATE,
				SR.PROCESS_DATE AS ACTION_DATE,
				'' AS FIS_NUMBER,
				'' AS PROJECT_ID
			FROM
				STOCKS_ROW SR
			WHERE
				SR.PROCESS_TYPE =117
			UNION ALL	
			SELECT
				(SR.STOCK_IN - SR.STOCK_OUT) AS TOTAL_STOCK, 
				SR.PRODUCT_ID, 
				SR.STOCK_ID, 
				SR.STOCK_IN AS GIRIS,
				SR.STOCK_OUT AS CIKIS,	
				SR.STORE,
				SR.STORE_LOCATION,
				SR.UPD_ID,
				SR.PROCESS_TYPE,
				SR.PROCESS_DATE,
				EXP_P.RECORD_DATE AS RECORD_DATE,		
				EXP_P.EXPENSE_DATE AS ACTION_DATE,			
				EXP_P.PAPER_NO AS ACTION_NUMBER,
				EXP_P.PROJECT_ID
			FROM	
				STOCKS_ROW SR,
				EXPENSE_ITEM_PLANS EXP_P
			WHERE
				SR.UPD_ID=EXP_P.EXPENSE_ID
				AND SR.PROCESS_TYPE=EXP_P.ACTION_TYPE

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_END_SERIES_PROCESSES] AS 
		SELECT 
			SF.FIS_DATE,
			S.STOCK_ID,
			S.PRODUCT_ID,
			S.PRODUCT_NAME,
			SFR.AMOUNT,
			SFR.PRICE,
			SFR.PRICE_OTHER,
			SFR.OTHER_MONEY,
			SL.DEPARTMENT_ID,
			SL.LOCATION_ID
		FROM 
			STOCK_FIS SF,
			STOCK_FIS_ROW SFR,
			#attributes.dsn#_#get_period.our_company_id#.STOCKS S,
			#attributes.dsn#.STOCKS_LOCATION SL
		WHERE
			SF.FIS_ID=SFR.FIS_ID
			AND SF.FIS_TYPE=1131
			AND SF.FIS_ID IN (SELECT UPD_ID FROM STOCKS_ROW WHERE PROCESS_TYPE=1131)
			AND SF.DEPARTMENT_IN=SL.DEPARTMENT_ID
			AND SF.LOCATION_IN=SL.LOCATION_ID
			AND SL.IS_END_OF_SERIES=1
			AND S.STOCK_ID=SFR.STOCK_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_LOCATION_STOCK_FOR_REPORT] AS
			SELECT
				SUM(SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_REAL_STOCK, 
				S.PRODUCT_ID, 
				S.STOCK_ID
			FROM
				#attributes.dsn#_#get_period.our_company_id#.STOCKS S,
				STOCKS_ROW SR
			WHERE
				S.STOCK_ID = SR.STOCK_ID
				AND (
					(SR.STORE=74 AND SR.STORE_LOCATION=45)
					OR (SR.STORE IS NULL AND SR.STORE_LOCATION IS NULL)
					)
			GROUP BY
				S.PRODUCT_ID,
				S.STOCK_ID


</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_PRODUCT_STOCK_BRANCH] AS

			SELECT
				SUM(SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK,
				SR.PRODUCT_ID,
				B.BRANCH_ID, 
				B.BRANCH_NAME
			FROM
				#attributes.dsn#.DEPARTMENT D,
				#attributes.dsn#.BRANCH B,
				STOCKS_ROW SR
			WHERE
				D.DEPARTMENT_ID = SR.STORE AND
				B.BRANCH_ID = D.BRANCH_ID
			GROUP BY
				SR.PRODUCT_ID,
				B.BRANCH_ID,
				B.BRANCH_NAME

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_SHIP_RESULT] AS
			SELECT
				 'SHIP' IS_TYPE,
				SR.SHIP_RESULT_ID,
				SR.SHIP_FIS_NO,
				SR.SERVICE_COMPANY_ID,
				SR.MAIN_SHIP_FIS_NO,
				SRW.SHIP_ID,
				C.OZEL_KOD_2
			FROM 
				SHIP_RESULT SR, 
				SHIP_RESULT_ROW SRW, 
				#attributes.dsn#.COMPANY C
			WHERE
				SR.SHIP_RESULT_ID = SRW.SHIP_RESULT_ID AND
				SR.IS_TYPE IS NULL AND 
				SR.SERVICE_COMPANY_ID = C.COMPANY_ID
			UNION
			
			SELECT
				'ORDER' IS_TYPE, 
				SR.SHIP_RESULT_ID, 
				SR.SHIP_FIS_NO,
				SR.SERVICE_COMPANY_ID, 
				SR.MAIN_SHIP_FIS_NO,
				SRW.SHIP_ID, 
				C.OZEL_KOD_2
			FROM
				SHIP_RESULT SR, SHIP_RESULT_ROW SRW, 
				#attributes.dsn#.COMPANY C
			WHERE
				SR.SHIP_RESULT_ID = SRW.SHIP_RESULT_ID AND
				SR.IS_TYPE = 2 AND
				SR.SERVICE_COMPANY_ID = C.COMPANY_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_SHIP_ROW_RELATION] AS
			SELECT
				0  AS SHIP_AMOUNT,
				SUM(AMOUNT) AS INVOICE_AMOUNT,
				SHIP_ID,
				SHIP_PERIOD,
				PRODUCT_ID,
				STOCK_ID,
				SPECT_VAR_ID,
				SHIP_WRK_ROW_ID
			FROM
				SHIP_ROW_RELATION
			WHERE
				ISNULL(TO_SHIP_ID,0)=0
			GROUP BY
				SHIP_ID,
				SHIP_PERIOD,
				PRODUCT_ID,
				STOCK_ID,
				SPECT_VAR_ID,
				SHIP_WRK_ROW_ID
				
			UNION ALL
			
			SELECT
				SUM(AMOUNT) AS SHIP_AMOUNT,
				0 AS  INVOICE_AMOUNT,
				SHIP_ID,
				SHIP_PERIOD,
				PRODUCT_ID,
				STOCK_ID,
				SPECT_VAR_ID,
				SHIP_WRK_ROW_ID
			FROM
				SHIP_ROW_RELATION
			WHERE
				ISNULL(TO_INVOICE_ID,0)=0
			GROUP BY
				SHIP_ID,
				SHIP_PERIOD,
				PRODUCT_ID,
				STOCK_ID,
				SPECT_VAR_ID,
				SHIP_WRK_ROW_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCK_LAST] AS
		SELECT 
			ROUND(SUM(REAL_STOCK),4) REAL_STOCK,
			ROUND(SUM(PRODUCT_STOCK),4) PRODUCT_STOCK,
			ROUND(SUM(PRODUCT_STOCK+RESERVED_STOCK),4) SALEABLE_STOCK,
			ROUND(SUM(PURCHASE_ORDER_STOCK),4) PURCHASE_ORDER_STOCK,
			PRODUCT_ID, 
			STOCK_ID
		FROM
		(
			SELECT

				(SR.STOCK_IN - SR.STOCK_OUT) AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS PURCHASE_ORDER_STOCK,
				SR.STOCK_ID,
				SR.PRODUCT_ID
			FROM
				STOCKS_ROW SR
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				(SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS PURCHASE_ORDER_STOCK,
				SR.STOCK_ID,
				SR.PRODUCT_ID
			FROM
				#attributes.dsn#.STOCKS_LOCATION SL,
				STOCKS_ROW SR
			WHERE
				SR.STORE =SL.DEPARTMENT_ID
				AND SR.STORE_LOCATION=SL.LOCATION_ID
				AND SL.NO_SALE = 0
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				((RESERVE_STOCK_OUT-STOCK_OUT)*-1) AS RESERVED_STOCK,
				RESERVE_STOCK_IN AS PURCHASE_ORDER_STOCK,
				ORR.STOCK_ID,
				ORR.PRODUCT_ID
			FROM
				#attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR, 
				#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS
			WHERE
				ORDS.RESERVED = 1 AND 
				ORDS.ORDER_STATUS = 1 AND	
				ORR.ORDER_ID=ORDS.ORDER_ID AND 
				((RESERVE_STOCK_IN-STOCK_IN)>0 OR (RESERVE_STOCK_OUT-STOCK_OUT)>0)
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				(RESERVE_STOCK_IN-STOCK_IN) AS RESERVED_STOCK,
				0 AS PURCHASE_ORDER_STOCK,
				ORR.STOCK_ID,
				ORR.PRODUCT_ID

			FROM
				#attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR, 
				#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS,
				#attributes.dsn#.STOCKS_LOCATION SL
			WHERE
				ORDS.RESERVED = 1 AND 
				ORDS.ORDER_STATUS = 1 AND	
				ORDS.DELIVER_DEPT_ID =SL.DEPARTMENT_ID AND 
				ORDS.LOCATION_ID=SL.LOCATION_ID AND 
				SL.NO_SALE = 0	 AND 
				ORR.ORDER_ID=ORDS.ORDER_ID AND 
				(RESERVE_STOCK_IN-STOCK_IN)>0
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				((RESERVE_STOCK_IN-STOCK_IN) + ((RESERVE_STOCK_OUT-STOCK_OUT)*-1)) AS RESERVED_STOCK,
				0 AS PURCHASE_ORDER_STOCK,
				ORR.STOCK_ID,
				ORR.PRODUCT_ID
			FROM
				#attributes.dsn#_#get_period.our_company_id#.ORDER_ROW_RESERVED  ORR
			WHERE
				ORDER_ID IS NULL
				AND SHIP_ID IS NULL
				AND INVOICE_ID IS NULL
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				(STOCK_ARTIR-STOCK_AZALT) AS RESERVED_STOCK,
				0  AS PURCHASE_ORDER_STOCK,
				STOCK_ID,
				PRODUCT_ID
			FROM
				#attributes.dsn#_#get_period.our_company_id#.GET_PRODUCTION_RESERVED
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				-1*(STOCK_IN - SR.STOCK_OUT) AS RESERVED_STOCK,
				0  AS PURCHASE_ORDER_STOCK,
				SR.STOCK_ID,
				SR.PRODUCT_ID
			FROM
				STOCKS_ROW SR,
				#attributes.dsn#.STOCKS_LOCATION SL 
			WHERE	
				SR.STORE = SL.DEPARTMENT_ID AND
				SR.STORE_LOCATION = SL.LOCATION_ID AND
				ISNULL(SL.IS_SCRAP,0)=1
		) T1
	GROUP BY
			PRODUCT_ID, 
			STOCK_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCK_LAST_LOCATION] AS
		SELECT 
			SUM(REAL_STOCK) REAL_STOCK,
			SUM(PRODUCT_STOCK) PRODUCT_STOCK,
			SUM(RESERVED_STOCK) RESERVED_STOCK,
			SUM(PURCHASE_PROD_STOCK) PURCHASE_PROD_STOCK,
			SUM(RESERVED_PROD_STOCK) RESERVED_PROD_STOCK,
			SUM(PRODUCT_STOCK+RESERVED_STOCK) SALEABLE_STOCK,
			SUM(RESERVE_SALE_ORDER_STOCK) RESERVE_SALE_ORDER_STOCK,
			SUM(NOSALE_STOCK) NOSALE_STOCK,
			SUM(BELONGTO_INSTITUTION_STOCK) BELONGTO_INSTITUTION_STOCK,
			SUM(RESERVE_PURCHASE_ORDER_STOCK) RESERVE_PURCHASE_ORDER_STOCK,
			SUM(PRODUCTION_ORDER_STOCK) PRODUCTION_ORDER_STOCK,
			SUM(NOSALE_RESERVED_STOCK) AS NOSALE_RESERVED_STOCK,
			PRODUCT_ID, 
			STOCK_ID,
			DEPARTMENT_ID,
			LOCATION_ID
		FROM
		(
			SELECT
				(SR.STOCK_IN - SR.STOCK_OUT) AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS PURCHASE_PROD_STOCK,
				0 AS RESERVED_PROD_STOCK,
				0 AS RESERVE_SALE_ORDER_STOCK,
				0 AS NOSALE_STOCK, 
				0 AS BELONGTO_INSTITUTION_STOCK,
				0 AS RESERVE_PURCHASE_ORDER_STOCK,
				0 AS PRODUCTION_ORDER_STOCK,
				0 AS NOSALE_RESERVED_STOCK,
				SR.STOCK_ID,
				SR.PRODUCT_ID,
				SR.STORE AS DEPARTMENT_ID,
				SR.STORE_LOCATION AS LOCATION_ID
			FROM
				STOCKS_ROW SR
			WHERE
				SR.STORE IS NOT NULL AND
				SR.STORE_LOCATION IS NOT NULL 
		UNION ALL
			SELECT
				(SR.STOCK_IN - SR.STOCK_OUT) AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS PURCHASE_PROD_STOCK,
				0 AS RESERVED_PROD_STOCK,
				0 AS RESERVE_SALE_ORDER_STOCK,
				0 AS NOSALE_STOCK, 
				0 AS BELONGTO_INSTITUTION_STOCK,
				0 AS RESERVE_PURCHASE_ORDER_STOCK,
				0 AS PRODUCTION_ORDER_STOCK,
				0 AS NOSALE_RESERVED_STOCK,
				SR.STOCK_ID,
				SR.PRODUCT_ID,
				'-1'  AS DEPARTMENT_ID,
				'-1'  AS LOCATION_ID
			FROM
				STOCKS_ROW SR
			WHERE
				UPD_ID IS NULL
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				(SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS PURCHASE_PROD_STOCK,
				0 AS RESERVED_PROD_STOCK,
				0 AS RESERVE_SALE_ORDER_STOCK,
				0 AS NOSALE_STOCK, 
				0 AS BELONGTO_INSTITUTION_STOCK,
				0 AS RESERVE_PURCHASE_ORDER_STOCK,
				0 AS PRODUCTION_ORDER_STOCK,
				0 AS NOSALE_RESERVED_STOCK,
				SR.STOCK_ID,
				SR.PRODUCT_ID,
				SR.STORE AS DEPARTMENT_ID,
				SR.STORE_LOCATION AS LOCATION_ID
			FROM
				#attributes.dsn#.STOCKS_LOCATION SL,
				STOCKS_ROW SR
			WHERE
				SR.STORE =SL.DEPARTMENT_ID
				AND SR.STORE_LOCATION=SL.LOCATION_ID
				AND SL.NO_SALE = 0
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				-1*(SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS PURCHASE_PROD_STOCK,
				0 AS RESERVED_PROD_STOCK,
				0 AS RESERVE_SALE_ORDER_STOCK,
				0 AS NOSALE_STOCK, 
				0 AS BELONGTO_INSTITUTION_STOCK,
				0 AS RESERVE_PURCHASE_ORDER_STOCK,
				0 AS PRODUCTION_ORDER_STOCK,
				0 AS NOSALE_RESERVED_STOCK,
				SR.STOCK_ID,
				SR.PRODUCT_ID,
				SR.STORE AS DEPARTMENT_ID,
				SR.STORE_LOCATION AS LOCATION_ID
			FROM
				STOCKS_ROW SR,
				#attributes.dsn#.STOCKS_LOCATION SL 
			WHERE	
				SR.STORE = SL.DEPARTMENT_ID AND
				SR.STORE_LOCATION = SL.LOCATION_ID AND
				ISNULL(SL.IS_SCRAP,0)=1
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS PURCHASE_PROD_STOCK,
				0 AS RESERVED_PROD_STOCK,
				0 AS RESERVE_SALE_ORDER_STOCK,
				(SR.STOCK_IN - SR.STOCK_OUT) AS NOSALE_STOCK,
				0 AS BELONGTO_INSTITUTION_STOCK,
				0 AS RESERVE_PURCHASE_ORDER_STOCK,
				0 AS PRODUCTION_ORDER_STOCK,
				0 AS NOSALE_RESERVED_STOCK,
				SR.STOCK_ID,
				SR.PRODUCT_ID,
				SR.STORE AS DEPARTMENT_ID,
				SR.STORE_LOCATION AS LOCATION_ID
			FROM
				#attributes.dsn#.STOCKS_LOCATION SL,
				STOCKS_ROW SR
			WHERE
				SR.STORE =SL.DEPARTMENT_ID
				AND SR.STORE_LOCATION=SL.LOCATION_ID
				AND SL.NO_SALE =1
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS PURCHASE_PROD_STOCK,
				0 AS RESERVED_PROD_STOCK,
				0 AS RESERVE_SALE_ORDER_STOCK,
				0 AS NOSALE_STOCK, 
				(SR.STOCK_IN - SR.STOCK_OUT) AS BELONGTO_INSTITUTION_STOCK,
				0 AS RESERVE_PURCHASE_ORDER_STOCK,
				0 AS PRODUCTION_ORDER_STOCK,
				0 AS NOSALE_RESERVED_STOCK,
				SR.STOCK_ID,
				SR.PRODUCT_ID,
				SR.STORE AS DEPARTMENT_ID,
				SR.STORE_LOCATION AS LOCATION_ID
			FROM
				#attributes.dsn#.STOCKS_LOCATION SL,
				STOCKS_ROW SR
			WHERE
				SR.STORE =SL.DEPARTMENT_ID
				AND SR.STORE_LOCATION=SL.LOCATION_ID
				AND SL.BELONGTO_INSTITUTION =1
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				((RESERVE_STOCK_OUT-STOCK_OUT)*-1) AS RESERVED_STOCK,
				0 AS PURCHASE_PROD_STOCK,
				0 AS RESERVED_PROD_STOCK,
				(RESERVE_STOCK_OUT-STOCK_OUT) AS RESERVE_SALE_ORDER_STOCK,
				0 AS NOSALE_STOCK,
				0 AS BELONGTO_INSTITUTION_STOCK,
				(RESERVE_STOCK_IN-STOCK_IN) AS RESERVE_PURCHASE_ORDER_STOCK,
				0 AS PRODUCTION_ORDER_STOCK,
				0 AS NOSALE_RESERVED_STOCK,
				ORR.STOCK_ID,
				ORR.PRODUCT_ID,
				ORDS.DELIVER_DEPT_ID AS DEPARTMENT_ID,
				ORDS.LOCATION_ID AS LOCATION_ID
			FROM
				#attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR, 
				#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS
			WHERE
				ORDS.RESERVED = 1 AND 
				ORDS.ORDER_STATUS = 1 AND	
				ORDS.DELIVER_DEPT_ID IS NOT NULL AND
				ORDS.LOCATION_ID IS NOT NULL AND
				ORR.ORDER_ID = ORDS.ORDER_ID AND 
				((RESERVE_STOCK_IN-STOCK_IN)>0 OR (RESERVE_STOCK_OUT-STOCK_OUT)>0)
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				(RESERVE_STOCK_IN-STOCK_IN) AS RESERVED_STOCK,
				0 AS PURCHASE_PROD_STOCK,
				0 AS RESERVED_PROD_STOCK,
				0 AS RESERVE_SALE_ORDER_STOCK,
				0 AS NOSALE_STOCK,
				0 AS BELONGTO_INSTITUTION_STOCK,
				0 AS RESERVE_PURCHASE_ORDER_STOCK,
				0 AS PRODUCTION_ORDER_STOCK,
				0 AS NOSALE_RESERVED_STOCK,
				ORR.STOCK_ID,
				ORR.PRODUCT_ID,
				ORDS.DELIVER_DEPT_ID AS DEPARTMENT_ID,
				ORDS.LOCATION_ID AS LOCATION_ID
			FROM
				#attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR, 
				#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS,
				#attributes.dsn#.STOCKS_LOCATION SL
			WHERE
				ORDS.RESERVED = 1 AND 
				ORDS.ORDER_STATUS = 1 AND
				ORDS.DELIVER_DEPT_ID=SL.DEPARTMENT_ID AND
				ORDS.LOCATION_ID=SL.LOCATION_ID AND
				SL.NO_SALE=0 AND
				ORDS.PURCHASE_SALES=0 AND
				ORDS.ORDER_ZONE=0 AND
				ORR.ORDER_ID = ORDS.ORDER_ID AND 
				(RESERVE_STOCK_IN-STOCK_IN)>0	
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS PURCHASE_PROD_STOCK,
				0 AS RESERVED_PROD_STOCK,
				0 AS RESERVE_SALE_ORDER_STOCK,
				0 AS NOSALE_STOCK,
				0 AS BELONGTO_INSTITUTION_STOCK,
				0 AS RESERVE_PURCHASE_ORDER_STOCK,
				0 AS PRODUCTION_ORDER_STOCK,
				(RESERVE_STOCK_IN-STOCK_IN) AS NOSALE_RESERVED_STOCK,
				ORR.STOCK_ID,
				ORR.PRODUCT_ID,
				ORDS.DELIVER_DEPT_ID AS DEPARTMENT_ID,
				ORDS.LOCATION_ID AS LOCATION_ID
			FROM
				#attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR, 
				#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS,
				#attributes.dsn#.STOCKS_LOCATION SL
			WHERE
				ORDS.RESERVED = 1 AND 
				ORDS.ORDER_STATUS = 1 AND	
				ORDS.DELIVER_DEPT_ID IS NOT NULL AND
				ORDS.LOCATION_ID IS NOT NULL AND
				ORDS.DELIVER_DEPT_ID=SL.DEPARTMENT_ID AND
				ORDS.LOCATION_ID=SL.LOCATION_ID AND
				SL.NO_SALE=1 AND
				ORDS.PURCHASE_SALES=0 AND
				ORDS.ORDER_ZONE=0 AND
				ORR.ORDER_ID = ORDS.ORDER_ID AND 
				(RESERVE_STOCK_IN-STOCK_IN)>0
			UNION ALL
			SELECT
					0 AS REAL_STOCK,
					0 AS PRODUCT_STOCK,
					(STOCK_ARTIR-STOCK_AZALT) AS RESERVED_STOCK,
					STOCK_ARTIR AS PURCHASE_PROD_STOCK,
					STOCK_AZALT AS RESERVED_PROD_STOCK,
					0  AS RESERVE_SALE_ORDER_STOCK,
					0 AS NOSALE_STOCK,
					0 AS BELONGTO_INSTITUTION_STOCK,
					0  AS RESERVE_PURCHASE_ORDER_STOCK,
					(STOCK_ARTIR-STOCK_AZALT)  AS PRODUCTION_ORDER_STOCK,
					0 AS NOSALE_RESERVED_STOCK,
					STOCK_ID,
					PRODUCT_ID,
					DEPARTMENT_ID,
					LOCATION_ID
				FROM
					#attributes.dsn#_#get_period.our_company_id#.GET_PRODUCTION_RESERVED_LOCATION
		) T1
		GROUP BY
			PRODUCT_ID, 
			STOCK_ID,
			DEPARTMENT_ID,
			LOCATION_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCK_LAST_PROFILE] AS
		SELECT 
			SUM(REAL_STOCK) REAL_STOCK,
			SUM(PRODUCT_STOCK) PRODUCT_STOCK,
			SUM(RESERVED_STOCK) RESERVED_STOCK,
			SUM(PURCHASE_PROD_STOCK) PURCHASE_PROD_STOCK,
			SUM(RESERVED_PROD_STOCK) RESERVED_PROD_STOCK,
			SUM(PRODUCT_STOCK+RESERVED_STOCK) SALEABLE_STOCK,
			SUM(RESERVE_SALE_ORDER_STOCK) RESERVE_SALE_ORDER_STOCK,
			SUM(NOSALE_STOCK) NOSALE_STOCK,
			SUM(BELONGTO_INSTITUTION_STOCK) BELONGTO_INSTITUTION_STOCK,
			SUM(RESERVE_PURCHASE_ORDER_STOCK) RESERVE_PURCHASE_ORDER_STOCK,
			SUM(PRODUCTION_ORDER_STOCK) PRODUCTION_ORDER_STOCK,
			SUM(NOSALE_RESERVED_STOCK) AS NOSALE_RESERVED_STOCK,
			PRODUCT_ID, 
			STOCK_ID
		FROM
		(
			SELECT
				(SR.STOCK_IN - SR.STOCK_OUT) AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS PURCHASE_PROD_STOCK,
				0 AS RESERVED_PROD_STOCK,
				0 AS RESERVE_SALE_ORDER_STOCK,
				0 AS NOSALE_STOCK, 
				0 AS BELONGTO_INSTITUTION_STOCK,
				0 AS RESERVE_PURCHASE_ORDER_STOCK,
				0 AS PRODUCTION_ORDER_STOCK,
				0 AS NOSALE_RESERVED_STOCK,
				SR.STOCK_ID,
				SR.PRODUCT_ID
			FROM
				STOCKS_ROW SR
			UNION ALL			
				SELECT
					0 AS REAL_STOCK,
					(SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK,
					0 AS RESERVED_STOCK,
					0 AS PURCHASE_PROD_STOCK,
					0 AS RESERVED_PROD_STOCK,
					0 AS RESERVE_SALE_ORDER_STOCK,
					0 AS NOSALE_STOCK, 
					0 AS BELONGTO_INSTITUTION_STOCK,
					0 AS RESERVE_PURCHASE_ORDER_STOCK,
					0 AS PRODUCTION_ORDER_STOCK,
					0 AS NOSALE_RESERVED_STOCK,
					SR.STOCK_ID,
					SR.PRODUCT_ID
				FROM
					#attributes.dsn#.STOCKS_LOCATION SL,
					STOCKS_ROW SR
				WHERE
					SR.STORE =SL.DEPARTMENT_ID
					AND SR.STORE_LOCATION=SL.LOCATION_ID
					AND SL.NO_SALE = 0
			UNION ALL
				SELECT
					0 AS REAL_STOCK,
					-1*(SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK,
					0 AS RESERVED_STOCK,
					0 AS PURCHASE_PROD_STOCK,
					0 AS RESERVED_PROD_STOCK,
					0 AS RESERVE_SALE_ORDER_STOCK,
					0 AS NOSALE_STOCK, 
					0 AS BELONGTO_INSTITUTION_STOCK,
					0 AS RESERVE_PURCHASE_ORDER_STOCK,
					0 AS PRODUCTION_ORDER_STOCK,
					0 AS NOSALE_RESERVED_STOCK,
					SR.STOCK_ID,
					SR.PRODUCT_ID
				FROM
					STOCKS_ROW SR,
					#attributes.dsn#.STOCKS_LOCATION SL 
				WHERE	
					SR.STORE = SL.DEPARTMENT_ID AND
					SR.STORE_LOCATION = SL.LOCATION_ID AND
					ISNULL(SL.IS_SCRAP,0)=1
			UNION ALL			
				SELECT
					0 AS REAL_STOCK,
					0 AS PRODUCT_STOCK,
					0 AS RESERVED_STOCK,
					0 AS PURCHASE_PROD_STOCK,
					0 AS RESERVED_PROD_STOCK,
					0 AS RESERVE_SALE_ORDER_STOCK,
					(SR.STOCK_IN - SR.STOCK_OUT) AS NOSALE_STOCK,
					0 AS BELONGTO_INSTITUTION_STOCK,
					0 AS RESERVE_PURCHASE_ORDER_STOCK,
					0 AS PRODUCTION_ORDER_STOCK,
					0 AS NOSALE_RESERVED_STOCK,
					SR.STOCK_ID,
					SR.PRODUCT_ID
				FROM
					#attributes.dsn#.STOCKS_LOCATION SL,
					STOCKS_ROW SR
				WHERE
					SR.STORE =SL.DEPARTMENT_ID
					AND SR.STORE_LOCATION=SL.LOCATION_ID
					AND SL.NO_SALE =1
			UNION ALL
				SELECT
					0 AS REAL_STOCK,
					0 AS PRODUCT_STOCK,
					0 AS RESERVED_STOCK,
					0 AS PURCHASE_PROD_STOCK,
					0 AS RESERVED_PROD_STOCK,
					0 AS RESERVE_SALE_ORDER_STOCK,
					0 AS NOSALE_STOCK, 
					(SR.STOCK_IN - SR.STOCK_OUT) AS BELONGTO_INSTITUTION_STOCK,
					0 AS RESERVE_PURCHASE_ORDER_STOCK,
					0 AS PRODUCTION_ORDER_STOCK,
					0 AS NOSALE_RESERVED_STOCK,
					SR.STOCK_ID,
					SR.PRODUCT_ID
				FROM
					#attributes.dsn#.STOCKS_LOCATION SL,
					STOCKS_ROW SR
				WHERE
					SR.STORE =SL.DEPARTMENT_ID
					AND SR.STORE_LOCATION=SL.LOCATION_ID
					AND SL.BELONGTO_INSTITUTION =1
			UNION ALL			
				SELECT
					0 AS REAL_STOCK,
					0 AS PRODUCT_STOCK,
					((RESERVE_STOCK_OUT-STOCK_OUT)*-1) AS RESERVED_STOCK,
					0 AS PURCHASE_PROD_STOCK,
					0 AS RESERVED_PROD_STOCK,
					(RESERVE_STOCK_OUT-STOCK_OUT) AS RESERVE_SALE_ORDER_STOCK,
					0 AS NOSALE_STOCK,
					0 AS BELONGTO_INSTITUTION_STOCK,
					(RESERVE_STOCK_IN-STOCK_IN) AS RESERVE_PURCHASE_ORDER_STOCK,
					0 AS PRODUCTION_ORDER_STOCK,
					0 AS NOSALE_RESERVED_STOCK,
					ORR.STOCK_ID,
					ORR.PRODUCT_ID
				FROM
					#attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR, 
					#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS
				WHERE
					ORDS.RESERVED = 1 AND 
					ORDS.ORDER_STATUS = 1 AND	
					ORR.ORDER_ID = ORDS.ORDER_ID AND
					((RESERVE_STOCK_IN-STOCK_IN)>0 OR (RESERVE_STOCK_OUT-STOCK_OUT)>0)	
			UNION ALL			
				SELECT
					0 AS REAL_STOCK,
					0 AS PRODUCT_STOCK,
					(RESERVE_STOCK_IN-STOCK_IN) AS RESERVED_STOCK,
					0 AS PURCHASE_PROD_STOCK,
					0 AS RESERVED_PROD_STOCK,
					0 AS RESERVE_SALE_ORDER_STOCK,
					0 AS NOSALE_STOCK,
					0 AS BELONGTO_INSTITUTION_STOCK,
					0 AS RESERVE_PURCHASE_ORDER_STOCK,
					0 AS PRODUCTION_ORDER_STOCK,
					0 AS NOSALE_RESERVED_STOCK,
					ORR.STOCK_ID,
					ORR.PRODUCT_ID
				FROM
					#attributes.dsn#.STOCKS_LOCATION SL,
					#attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR, 
					#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS
				WHERE
					ORDS.DELIVER_DEPT_ID=SL.DEPARTMENT_ID AND
					ORDS.LOCATION_ID=SL.LOCATION_ID AND
					SL.NO_SALE = 0 AND
					ORDS.PURCHASE_SALES=0 AND
					ORDS.ORDER_ZONE=0 AND
					ORDS.RESERVED = 1 AND 
					ORDS.ORDER_STATUS = 1 AND	
					ORR.ORDER_ID = ORDS.ORDER_ID AND
					(RESERVE_STOCK_IN-STOCK_IN)>0
			UNION ALL			
				SELECT
					0 AS REAL_STOCK,
					0 AS PRODUCT_STOCK,
					0 AS RESERVED_STOCK,
					0 AS PURCHASE_PROD_STOCK,
					0 AS RESERVED_PROD_STOCK,
					0 AS RESERVE_SALE_ORDER_STOCK,
					0 AS NOSALE_STOCK,
					0 AS BELONGTO_INSTITUTION_STOCK,
					0 AS RESERVE_PURCHASE_ORDER_STOCK,
					0 AS PRODUCTION_ORDER_STOCK,
					(RESERVE_STOCK_IN-STOCK_IN) AS NOSALE_RESERVED_STOCK,
					ORR.STOCK_ID,
					ORR.PRODUCT_ID
				FROM
					#attributes.dsn#.STOCKS_LOCATION SL,
					#attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR, 
					#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS
				WHERE
					ORDS.DELIVER_DEPT_ID=SL.DEPARTMENT_ID AND
					ORDS.LOCATION_ID=SL.LOCATION_ID AND
					SL.NO_SALE = 1 AND
					ORDS.PURCHASE_SALES=0 AND
					ORDS.ORDER_ZONE=0 AND
					ORDS.RESERVED = 1 AND 
					ORDS.ORDER_STATUS = 1 AND	
					ORR.ORDER_ID = ORDS.ORDER_ID AND
					(RESERVE_STOCK_IN-STOCK_IN)>0
			UNION ALL			
				SELECT
					0 AS REAL_STOCK,
					0 AS PRODUCT_STOCK,
					((RESERVE_STOCK_IN-STOCK_IN) + ((RESERVE_STOCK_OUT-STOCK_OUT)*-1)) AS RESERVED_STOCK,
					0 AS PURCHASE_PROD_STOCK,
					0 AS RESERVED_PROD_STOCK,
					(RESERVE_STOCK_OUT-STOCK_OUT) AS RESERVE_SALE_ORDER_STOCK,
					0 AS NOSALE_STOCK,
					0 AS BELONGTO_INSTITUTION_STOCK,
					(RESERVE_STOCK_IN-STOCK_IN) AS RESERVE_PURCHASE_ORDER_STOCK,
					0 AS PRODUCTION_ORDER_STOCK,
					0 AS NOSALE_RESERVED_STOCK,
					ORR.STOCK_ID,
					ORR.PRODUCT_ID
				FROM
					#attributes.dsn#_#get_period.our_company_id#.ORDER_ROW_RESERVED  ORR
				WHERE
					ORDER_ID IS NULL
					AND SHIP_ID IS NULL
					AND INVOICE_ID IS NULL
			UNION ALL
				SELECT
					0 AS REAL_STOCK,
					0 AS PRODUCT_STOCK,
					(STOCK_ARTIR-STOCK_AZALT) AS RESERVED_STOCK,
					STOCK_ARTIR AS PURCHASE_PROD_STOCK,
					STOCK_AZALT AS RESERVED_PROD_STOCK,
					0  AS RESERVE_SALE_ORDER_STOCK,
					0 AS NOSALE_STOCK,
					0 AS BELONGTO_INSTITUTION_STOCK,
					0  AS RESERVE_PURCHASE_ORDER_STOCK,
					(STOCK_ARTIR-STOCK_AZALT)  AS PRODUCTION_ORDER_STOCK,
					0 AS NOSALE_RESERVED_STOCK,
					STOCK_ID,
					PRODUCT_ID
				FROM
					#attributes.dsn#_#get_period.our_company_id#.GET_PRODUCTION_RESERVED
		) T1
		GROUP BY
			PRODUCT_ID, 
			STOCK_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCK_LAST_SHELF] AS
		SELECT 
			SUM(REAL_STOCK) REAL_STOCK,
			SUM(PRODUCT_STOCK) PRODUCT_STOCK,
			SUM(RESERVED_STOCK) RESERVED_STOCK,
			SUM(PRODUCT_STOCK+RESERVED_STOCK) SALEABLE_STOCK,
			STOCK_ID,
			PRODUCT_ID,		
			SHELF_NUMBER
		FROM
		(
			SELECT
				(SR.STOCK_IN - SR.STOCK_OUT) AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS SALEABLE_STOCK,
				SR.STOCK_ID,
				SR.PRODUCT_ID,
				SR.SHELF_NUMBER
			FROM
				STOCKS_ROW SR
			WHERE
				SR.SHELF_NUMBER IS NOT NULL
		UNION ALL
			SELECT
				(SR.STOCK_IN - SR.STOCK_OUT) AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS SALEABLE_STOCK,
				SR.STOCK_ID,
				SR.PRODUCT_ID,
				''  AS SHELF_NUMBER
			FROM
				STOCKS_ROW SR
			WHERE
				UPD_ID IS NULL
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				(SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS SALEABLE_STOCK,
				SR.STOCK_ID,
				SR.PRODUCT_ID,
				SR.SHELF_NUMBER
			FROM
				#attributes.dsn#_#get_period.our_company_id#.PRODUCT_PLACE PP,
				STOCKS_ROW SR
			WHERE
				SR.SHELF_NUMBER = PP.PRODUCT_PLACE_ID
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				((RESERVE_STOCK_OUT-STOCK_OUT)*-1) AS RESERVED_STOCK,
				0 AS SALEABLE_STOCK,
				ORR.STOCK_ID,
				ORR.PRODUCT_ID,
				ORDS_R.SHELF_NUMBER
			FROM
				#attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR, 
				#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS,
				#attributes.dsn#_#get_period.our_company_id#.ORDER_ROW ORDS_R
			WHERE	
				ORDS.RESERVED = 1 AND 
				ORDS.ORDER_STATUS = 1 AND	
				ORDS_R.ORDER_ID = ORDS.ORDER_ID AND
				ORDS_R.SHELF_NUMBER IS NOT NULL AND
				ORR.ORDER_ID = ORDS.ORDER_ID AND
				((RESERVE_STOCK_IN-STOCK_IN)>0 OR (RESERVE_STOCK_OUT-STOCK_OUT)>0)			
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				(RESERVE_STOCK_IN-STOCK_IN) AS RESERVED_STOCK,
				0 AS SALEABLE_STOCK,
				ORR.STOCK_ID,
				ORR.PRODUCT_ID,
				ORDS_R.SHELF_NUMBER
			FROM
				#attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR, 
				#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS,
				#attributes.dsn#_#get_period.our_company_id#.ORDER_ROW ORDS_R,
				#attributes.dsn#.STOCKS_LOCATION SL
			WHERE
				ORDS.DELIVER_DEPT_ID=SL.DEPARTMENT_ID AND
				ORDS.LOCATION_ID=SL.LOCATION_ID AND
				SL.NO_SALE = 0 AND
				ORDS.PURCHASE_SALES=0 AND
				ORDS.ORDER_ZONE=0 AND	
				ORDS.RESERVED = 1 AND 
				ORDS.ORDER_STATUS = 1 AND	
				ORDS_R.ORDER_ID = ORDS.ORDER_ID AND
				ORDS_R.SHELF_NUMBER IS NOT NULL AND
				ORR.ORDER_ID = ORDS.ORDER_ID AND
				(RESERVE_STOCK_IN-STOCK_IN)>0			
		) T1
		GROUP BY
			STOCK_ID,
			PRODUCT_ID,		
			SHELF_NUMBER

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCK_LAST_SPECT] AS
		SELECT
			SUM(REAL_STOCK) REAL_STOCK,
			SUM(PRODUCT_STOCK) PRODUCT_STOCK,
			SUM(PRODUCT_STOCK+RESERVED_STOCK) SALEABLE_STOCK,
			SUM(PURCHASE_ORDER_STOCK) PURCHASE_ORDER_STOCK,
			PRODUCT_ID,
			STOCK_ID,
			SPECT_MAIN_ID
		FROM
		(
			SELECT
				(STOCK_IN - STOCK_OUT) AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS SALE_ORDER_STOCK,
				0 AS PURCHASE_ORDER_STOCK,
				SR.PRODUCT_ID, 
				SR.STOCK_ID,
				SR.SPECT_VAR_ID SPECT_MAIN_ID
			FROM			
				STOCKS_ROW SR
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				(STOCK_IN - STOCK_OUT) AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS SALE_ORDER_STOCK,
				0 AS PURCHASE_ORDER_STOCK,
				SR.PRODUCT_ID, 
				SR.STOCK_ID,
				SR.SPECT_VAR_ID SPECT_MAIN_ID
			FROM			
				#attributes.dsn#.STOCKS_LOCATION SL,
				STOCKS_ROW SR
			WHERE			
				SR.STORE =SL.DEPARTMENT_ID
				AND SR.STORE_LOCATION=SL.LOCATION_ID
				AND SL.NO_SALE = 0
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				-1*(STOCK_IN - STOCK_OUT) AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS SALE_ORDER_STOCK,
				0 AS PURCHASE_ORDER_STOCK,
				SR.PRODUCT_ID, 
				SR.STOCK_ID,
				SR.SPECT_VAR_ID SPECT_MAIN_ID
			FROM
				STOCKS_ROW SR,
				#attributes.dsn#.STOCKS_LOCATION SL 
			WHERE	
				SR.STORE = SL.DEPARTMENT_ID AND
				SR.STORE_LOCATION = SL.LOCATION_ID AND
				ISNULL(SL.IS_SCRAP,0)=1	
	UNION ALL
			SELECT
				0 AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				((ORR.RESERVE_STOCK_OUT-ORR.STOCK_OUT)*-1)  AS RESERVED_STOCK,
				0 AS SALE_ORDER_STOCK,
				ORR.RESERVE_STOCK_IN  AS PURCHASE_ORDER_STOCK,
				ORR.PRODUCT_ID, 
				ORR.STOCK_ID,
				(SELECT SPECT_MAIN_ID FROM #attributes.dsn#_#get_period.our_company_id#.SPECTS WHERE SPECT_VAR_ID=ORR.SPECT_VAR_ID) SPECT_MAIN_ID
			FROM
				#attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR, 
				#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS
			WHERE
				ORDS.RESERVED = 1 AND 
				ORDS.ORDER_STATUS = 1 AND	
				ORR.ORDER_ID = ORDS.ORDER_ID AND
				((ORR.RESERVE_STOCK_IN-ORR.STOCK_IN)>0 OR (ORR.RESERVE_STOCK_OUT-ORR.STOCK_OUT)>0)	
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				(ORR.RESERVE_STOCK_IN-ORR.STOCK_IN) AS RESERVED_STOCK,
				0 AS SALE_ORDER_STOCK,
				0 AS PURCHASE_ORDER_STOCK,
				ORR.PRODUCT_ID, 
				ORR.STOCK_ID,
				(SELECT SPECT_MAIN_ID FROM #attributes.dsn#_#get_period.our_company_id#.SPECTS WHERE SPECT_VAR_ID=ORR.SPECT_VAR_ID) SPECT_MAIN_ID
			FROM
				#attributes.dsn#.STOCKS_LOCATION SL,
				#attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR, 
				#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS
			WHERE
				ORDS.DELIVER_DEPT_ID=SL.DEPARTMENT_ID AND
				ORDS.LOCATION_ID=SL.LOCATION_ID AND
				SL.NO_SALE = 0 AND
				ORDS.PURCHASE_SALES=0 AND
				ORDS.ORDER_ZONE=0 AND	
				ORDS.RESERVED = 1 AND 
				ORDS.ORDER_STATUS = 1 AND	
				ORR.ORDER_ID = ORDS.ORDER_ID AND
				(ORR.RESERVE_STOCK_IN-ORR.STOCK_IN)>0
		UNION ALL

			SELECT
				0 AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				(STOCK_ARTIR-STOCK_AZALT) AS RESERVED_STOCK,
				0 AS SALE_ORDER_STOCK,
				0 AS PURCHASE_ORDER_STOCK,
				GRS.PRODUCT_ID, 
				GRS.STOCK_ID,
				GRS.SPECT_MAIN_ID SPECT_MAIN_ID
			FROM
				#attributes.dsn#_#get_period.our_company_id#.GET_PRODUCTION_RESERVED_SPECT GRS
			
		) T1
		GROUP BY
			PRODUCT_ID, 
			STOCK_ID,
			SPECT_MAIN_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCK_LAST_SPECT_LOCATION_REPORT] AS
				SELECT
				SUM(REAL_STOCK) REAL_STOCK,
				SUM(PRODUCT_STOCK) PRODUCT_STOCK,
				SUM(PRODUCT_STOCK+RESERVED_STOCK) SALEABLE_STOCK,
				SUM(PURCHASE_ORDER_STOCK) PURCHASE_ORDER_STOCK,
				PRODUCT_ID,
				STOCK_ID,
				SPECT_MAIN_ID,
				DEPARTMENT_ID,
				LOCATION_ID
			FROM
			(
				SELECT
					(STOCK_IN - STOCK_OUT) AS REAL_STOCK,
					0 AS PRODUCT_STOCK,
					0 AS RESERVED_STOCK,
					0 AS SALE_ORDER_STOCK,
					0 AS PURCHASE_ORDER_STOCK,
					SR.PRODUCT_ID, 
					SR.STOCK_ID,
					SR.SPECT_VAR_ID SPECT_MAIN_ID,
					SR.STORE AS DEPARTMENT_ID,
					SR.STORE_LOCATION AS LOCATION_ID
				FROM			
					STOCKS_ROW SR
			UNION ALL
				SELECT
					0 AS REAL_STOCK,
					(STOCK_IN - STOCK_OUT) AS PRODUCT_STOCK,
					0 AS RESERVED_STOCK,
					0 AS SALE_ORDER_STOCK,
					0 AS PURCHASE_ORDER_STOCK,
					SR.PRODUCT_ID, 
					SR.STOCK_ID,
					SR.SPECT_VAR_ID SPECT_MAIN_ID,
					SR.STORE AS DEPARTMENT_ID,
					SR.STORE_LOCATION AS LOCATION_ID
				FROM			
					#attributes.dsn#.STOCKS_LOCATION SL,
					STOCKS_ROW SR
				WHERE			
					SR.STORE =SL.DEPARTMENT_ID
					AND SR.STORE_LOCATION=SL.LOCATION_ID
					AND SL.NO_SALE = 0
			UNION ALL
				SELECT
					0 AS REAL_STOCK,
					-1*(STOCK_IN - STOCK_OUT) AS PRODUCT_STOCK,
					0 AS RESERVED_STOCK,
					0 AS SALE_ORDER_STOCK,
					0 AS PURCHASE_ORDER_STOCK,
					SR.PRODUCT_ID, 
					SR.STOCK_ID,
					SR.SPECT_VAR_ID SPECT_MAIN_ID,
					SR.STORE AS DEPARTMENT_ID,
					SR.STORE_LOCATION AS LOCATION_ID
				FROM
					STOCKS_ROW SR,
					#attributes.dsn#.STOCKS_LOCATION SL 
				WHERE	
					SR.STORE = SL.DEPARTMENT_ID AND
					SR.STORE_LOCATION = SL.LOCATION_ID AND
					ISNULL(SL.IS_SCRAP,0)=1	
			UNION ALL
				SELECT
					0 AS REAL_STOCK,
					0 AS PRODUCT_STOCK,
					((ORR.RESERVE_STOCK_OUT-ORR.STOCK_OUT)*-1)  AS RESERVED_STOCK,
					0 AS SALE_ORDER_STOCK,
					ORR.RESERVE_STOCK_IN  AS PURCHASE_ORDER_STOCK,
					ORR.PRODUCT_ID, 
					ORR.STOCK_ID,
					(SELECT SPECT_MAIN_ID FROM #attributes.dsn#_#get_period.our_company_id#.SPECTS WHERE SPECT_VAR_ID=ORR.SPECT_VAR_ID) SPECT_MAIN_ID,
					ORDS.DELIVER_DEPT_ID AS DEPARTMENT_ID,
					ORDS.LOCATION_ID AS LOCATION_ID
				FROM
					#attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR, 
					#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS
				WHERE
					ORDS.RESERVED = 1 AND 
					ORDS.ORDER_STATUS = 1 AND	
					ORR.ORDER_ID = ORDS.ORDER_ID AND
					((ORR.RESERVE_STOCK_IN-ORR.STOCK_IN)>0 OR (ORR.RESERVE_STOCK_OUT-ORR.STOCK_OUT)>0)	
			UNION ALL
				SELECT
					0 AS REAL_STOCK,
					0 AS PRODUCT_STOCK,
					(ORR.RESERVE_STOCK_IN-ORR.STOCK_IN) AS RESERVED_STOCK,
					0 AS SALE_ORDER_STOCK,
					0 AS PURCHASE_ORDER_STOCK,
					ORR.PRODUCT_ID, 
					ORR.STOCK_ID,
					(SELECT SPECT_MAIN_ID FROM #attributes.dsn#_#get_period.our_company_id#.SPECTS WHERE SPECT_VAR_ID=ORR.SPECT_VAR_ID) SPECT_MAIN_ID,
					ORDS.DELIVER_DEPT_ID AS DEPARTMENT_ID,
					ORDS.LOCATION_ID AS LOCATION_ID
				FROM
					#attributes.dsn#.STOCKS_LOCATION SL,
					#attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR, 
					#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS
				WHERE
					ORDS.DELIVER_DEPT_ID=SL.DEPARTMENT_ID AND
					ORDS.LOCATION_ID=SL.LOCATION_ID AND
					SL.NO_SALE = 0 AND
					ORDS.PURCHASE_SALES=0 AND
					ORDS.ORDER_ZONE=0 AND	
					ORDS.RESERVED = 1 AND 
					ORDS.ORDER_STATUS = 1 AND	
					ORR.ORDER_ID = ORDS.ORDER_ID AND
					(ORR.RESERVE_STOCK_IN-ORR.STOCK_IN)>0
			UNION ALL
				SELECT
					0 AS REAL_STOCK,
					0 AS PRODUCT_STOCK,
					(STOCK_ARTIR-STOCK_AZALT) AS RESERVED_STOCK,
					0 AS SALE_ORDER_STOCK,
					0 AS PURCHASE_ORDER_STOCK,
					GRS.PRODUCT_ID, 
					GRS.STOCK_ID,
					GRS.SPECT_MAIN_ID SPECT_MAIN_ID,
					DEPARTMENT_ID,
					LOCATION_ID
				FROM
					#attributes.dsn#_#get_period.our_company_id#.GET_PRODUCTION_RESERVED_SPECT_LOCATION GRS
			) T1
			GROUP BY
				PRODUCT_ID, 
				STOCK_ID,
				SPECT_MAIN_ID,
				DEPARTMENT_ID,
				LOCATION_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCK_LOCATION] AS
			SELECT
				SUM(SR.STOCK_IN - SR.STOCK_OUT) AS TOTAL_STOCK,
				S.PRODUCT_ID,
				S.STOCK_ID,
				S.STOCK_CODE,
				S.PROPERTY,
				S.STOCK_STATUS,
				S.BARCOD
			FROM
				#attributes.dsn#_#get_period.our_company_id#.STOCKS S,
				#attributes.dsn#.STOCKS_LOCATION SL,
				STOCKS_ROW SR
			WHERE
				S.STOCK_ID = SR.STOCK_ID AND
				SR.STORE =SL.DEPARTMENT_ID
				AND SR.STORE_LOCATION=SL.LOCATION_ID
				AND SL.NO_SALE = 0
			GROUP BY
				S.PRODUCT_ID,
				S.STOCK_ID,
				S.STOCK_CODE, 
				S.PROPERTY,
				S.STOCK_STATUS,
				S.BARCOD

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCK_LOCATION_SPECT] AS
			SELECT
				SUM(SR.STOCK_IN - SR.STOCK_OUT) AS TOTAL_STOCK, 
				S.PRODUCT_ID, 
				S.STOCK_ID, 
				S.STOCK_CODE, 
				S.PROPERTY,
				S.STOCK_STATUS, 
				S.BARCOD,
				SR.SPECT_VAR_ID
			FROM
				#attributes.dsn#_product.STOCKS S,		
				#attributes.dsn#.STOCKS_LOCATION SL,
				STOCKS_ROW SR
			WHERE
				S.STOCK_ID = SR.STOCK_ID AND	
				SR.STORE =SL.DEPARTMENT_ID
				AND SR.STORE_LOCATION=SL.LOCATION_ID
				AND SL.NO_SALE = 0
			GROUP BY
				S.PRODUCT_ID, 
				S.STOCK_ID, 
				S.STOCK_CODE, 
				S.PROPERTY,
				S.STOCK_STATUS, 
				S.BARCOD,
				SR.SPECT_VAR_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCK_LOCATION_SPECT_TOTAL] AS
			SELECT
				SUM(SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK, 
				S.PRODUCT_ID, 
				S.STOCK_ID, 
				S.STOCK_CODE, 
				S.PROPERTY,
				S.STOCK_STATUS, 
				S.BARCOD,
				SR.SPECT_VAR_ID,
				SR.STORE,
				SR.STORE_LOCATION
			FROM
				#attributes.dsn#_product.STOCKS S,
				STOCKS_ROW SR
			WHERE
				S.STOCK_ID = SR.STOCK_ID	
			GROUP BY
				S.PRODUCT_ID,
				S.STOCK_ID,
				S.STOCK_CODE,
				S.PROPERTY,
				S.STOCK_STATUS, 
				S.BARCOD,
				SR.SPECT_VAR_ID,
				SR.STORE,
				SR.STORE_LOCATION

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCK_LOCATION_TOTAL] AS
			SELECT
				SUM(SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK, 
				S.PRODUCT_ID, 
				S.STOCK_ID, 
				S.STOCK_CODE, 
				S.PROPERTY,
				S.STOCK_STATUS, 
				S.BARCOD,
				SR.STORE,
				SR.STORE_LOCATION
			FROM
				#attributes.dsn#_product.STOCKS S,
				STOCKS_ROW SR
			WHERE
				S.STOCK_ID = SR.STOCK_ID	
			GROUP BY
				S.PRODUCT_ID,
				S.STOCK_ID,
				S.STOCK_CODE,
				S.PROPERTY,
				S.STOCK_STATUS, 
				S.BARCOD,
				SR.STORE,
				SR.STORE_LOCATION

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCK_PRODUCT] AS
			SELECT
				ROUND(SUM(SR.STOCK_IN - SR.STOCK_OUT),4) AS PRODUCT_STOCK, 
				S.PRODUCT_ID, 
				S.STOCK_ID, 
				S.STOCK_CODE, 
				S.PROPERTY, 
				S.BARCOD,
				SR.STORE AS DEPARTMENT_ID
			FROM
				#attributes.dsn#_product.STOCKS S,
				STOCKS_ROW SR
			WHERE
				S.STOCK_ID = SR.STOCK_ID
			GROUP BY
				S.PRODUCT_ID, 
				S.STOCK_ID, 
				S.STOCK_CODE, 
				S.PROPERTY, 
				S.BARCOD, 
				SR.STORE

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCK_PRODUCT_BRANCH] AS
		SELECT
			SUM(Q1.STOCK_IN - Q1.STOCK_OUT) AS PRODUCT_STOCK, 
			Q1.PRODUCT_ID, 
			Q1.STOCK_ID, 
			Q1.STOCK_CODE, 
			Q1.PROPERTY, 
			Q1.BARCOD, 
			Q1.BRANCH_ID	
		FROM
			(SELECT
				SR.STOCK_IN,
				SR.STOCK_OUT, 
				S.PRODUCT_ID, 
				S.STOCK_ID, 
				S.STOCK_CODE, 
				S.PROPERTY, 
				S.BARCOD, 
				D.BRANCH_ID
			FROM
				#attributes.dsn#.DEPARTMENT D,
				#attributes.dsn#_#get_period.our_company_id#.STOCKS S,
				STOCKS_ROW SR
			WHERE
				S.STOCK_ID = SR.STOCK_ID AND
				D.DEPARTMENT_ID = SR.STORE AND
				SR.UPD_ID IS NOT NULL
			UNION ALL
			SELECT
				SR.STOCK_IN,
				SR.STOCK_OUT, 
				S.PRODUCT_ID, 
				S.STOCK_ID, 
				S.STOCK_CODE, 
				S.PROPERTY, 
				S.BARCOD, 
				PB.BRANCH_ID
			FROM
				#attributes.dsn#_#get_period.our_company_id#.STOCKS S,
				STOCKS_ROW SR,
				#attributes.dsn#_product.PRODUCT_BRANCH PB
			WHERE
				S.STOCK_ID = SR.STOCK_ID AND
				SR.UPD_ID IS NULL AND
				PB.PRODUCT_ID = S.PRODUCT_ID
			)Q1
		GROUP BY
			Q1.PRODUCT_ID, 
			Q1.STOCK_ID, 
			Q1.STOCK_CODE, 
			Q1.PROPERTY, 
			Q1.BARCOD,
			Q1.BRANCH_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCK_PRODUCT_BRANCH_SPECT] AS
			SELECT
				SUM(SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK, 
				P.PRODUCT_ID, 
				S.STOCK_ID, 
				S.STOCK_CODE, 
				S.PROPERTY, 
				S.BARCOD, 
				B.BRANCH_ID, 
				B.BRANCH_NAME,
				SR.SPECT_VAR_ID
			FROM
				#attributes.dsn#.DEPARTMENT D,
				#attributes.dsn#.BRANCH B,
				#attributes.dsn#_#get_period.our_company_id#.PRODUCT P,
				#attributes.dsn#_#get_period.our_company_id#.STOCKS S,
				STOCKS_ROW SR
			WHERE
				P.PRODUCT_ID = S.PRODUCT_ID AND
				S.STOCK_ID = SR.STOCK_ID AND
				D.DEPARTMENT_ID = SR.STORE AND
				B.BRANCH_ID = D.BRANCH_ID
			GROUP BY
				P.PRODUCT_ID, 
				S.STOCK_ID, 
				S.STOCK_CODE, 
				S.PROPERTY, 
				S.BARCOD,
				B.BRANCH_ID, 
				B.BRANCH_NAME,
				SR.SPECT_VAR_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCK_PRODUCT_LOT_NO] AS
			SELECT
				ROUND(SUM(SR.STOCK_IN - SR.STOCK_OUT),4) AS PRODUCT_STOCK, 
				S.PRODUCT_ID, 
				S.STOCK_ID, 
				S.STOCK_CODE, 
				S.PROPERTY, 
				S.BARCOD,
				SR.STORE AS DEPARTMENT_ID,
				SR.LOT_NO
			FROM
				#attributes.dsn#_product.STOCKS S,
				STOCKS_ROW SR
			WHERE
				S.STOCK_ID = SR.STOCK_ID
			GROUP BY
				S.PRODUCT_ID, 
				S.STOCK_ID, 
				S.STOCK_CODE, 
				S.PROPERTY, 
				S.BARCOD, 
				SR.STORE,
				SR.LOT_NO

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE  VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCK_PRODUCT_SPECT] AS
			SELECT
				SUM(SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK, 
				S.PRODUCT_ID, 
				S.STOCK_ID, 
				S.STOCK_CODE, 
				S.PROPERTY, 
				S.BARCOD,
				SR.STORE AS DEPARTMENT_ID,
				SR.SPECT_VAR_ID
			FROM
				#attributes.dsn#_product.STOCKS S,
				STOCKS_ROW SR
			WHERE
				S.STOCK_ID = SR.STOCK_ID
			GROUP BY
				S.PRODUCT_ID, 
				S.STOCK_ID, 
				S.STOCK_CODE, 
				S.PROPERTY, 
				S.BARCOD, 
				SR.STORE,
				SR.SPECT_VAR_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCK_SHELF] AS
			SELECT
				SUM(SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK, 
				SR.PRODUCT_ID, 
				SR.STOCK_ID,
				SR.DELIVER_DATE,
				--SR.STORE,
				--SR.STORE_LOCATION,
				SR.SHELF_NUMBER AS SHELF_ID	
			FROM			
				STOCKS_ROW SR
			WHERE
				ISNULL(SR.UPD_ID,0)<>0
			GROUP BY
				SR.PRODUCT_ID, 
				SR.STOCK_ID,
				SR.DELIVER_DATE,
				--SR.STORE,
				--SR.STORE_LOCATION,
				SR.SHELF_NUMBER

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCK_SHELF_ONLY] AS
		 SELECT
            SUM(SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK, 
            SR.PRODUCT_ID, 
            SR.STOCK_ID,
            SR.SHELF_NUMBER AS SHELF_ID,
            SR.DELIVER_DATE
        FROM			
            STOCKS_ROW SR
        GROUP BY
            SR.PRODUCT_ID, 
            SR.STOCK_ID,
            SR.SHELF_NUMBER,
            SR.DELIVER_DATE
</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_STOCK_SPECT] AS
			SELECT
				SUM(SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK, 
				S.PRODUCT_ID, 
				S.STOCK_ID, 
				S.STOCK_CODE, 
				S.PROPERTY,
				S.STOCK_STATUS, 
				S.BARCOD,
				SR.SPECT_VAR_ID
			FROM
				#attributes.dsn#_product.STOCKS S,
				STOCKS_ROW SR
			WHERE
				S.STOCK_ID = SR.STOCK_ID	
			GROUP BY
				S.PRODUCT_ID,
				S.STOCK_ID,
				S.STOCK_CODE,
				S.PROPERTY,
				S.STOCK_STATUS, 
				S.BARCOD,
				SR.SPECT_VAR_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_ROW_POS_SALES] AS
			SELECT
				S.STOCK_ID ,
				S.PRODUCT_ID ,
				S.COMPANY_ID ,
				SUM(IRP.AMOUNT) AS SATISMIKTAR ,
				IRP.PRICE ,
				SUM(IRP.NETTOTAL) AS SATISNET ,
				SUM(IRP.TAXTOTAL) AS SATISVERGI ,
				SUM(IRP.GROSSTOTAL) AS SATISTOPLAM ,
				I.INVOICE_ID ,
				I.INVOICE_NUMBER ,
				I.DEPARTMENT_ID ,
				I.INVOICE_DATE ,
				B.BRANCH_ID,
				S.PRODUCT_NAME + ' ' + S.PROPERTY AS PRODUCT_NAME,
				
				S.PRODUCT_CATID,
				S.STOCK_CODE,
				IRP.PRICE AS KDVLI_SATISFIYATI,
				IRP.UNIT,
				I.INVOICE_CAT,
				DEPARTMENT_HEAD,
				S.PRODUCT_MANAGER,
				S.STOCK_CODE AS PRODUCT_CODE,
				IRP.INVOICE_DATE AS INVOICE_ROW_DATE
			FROM
				#attributes.dsn#_#get_period.our_company_id#.STOCKS S,
				#attributes.dsn#.COMPANY C,
				#attributes.dsn#.DEPARTMENT D,
				#attributes.dsn#.BRANCH B,
				INVOICE_ROW_POS IRP,
				INVOICE I
			WHERE 
				IRP.STOCK_ID = S.STOCK_ID AND	
				S.COMPANY_ID = C.COMPANY_ID AND
				I.INVOICE_ID = IRP.INVOICE_ID AND
				D.BRANCH_ID = B.BRANCH_ID AND
				I.DEPARTMENT_ID = D.DEPARTMENT_ID
			GROUP BY
				I.INVOICE_ID,
				I.INVOICE_NUMBER,
				I.DEPARTMENT_ID,
				I.INVOICE_DATE,
				IRP.PRICE,
				S.STOCK_ID,
				S.PRODUCT_ID,
				S.COMPANY_ID,
				B.BRANCH_ID,
				S.PRODUCT_NAME,
				S.PROPERTY,
				S.PRODUCT_CATID,
				S.STOCK_CODE,
				IRP.PRICE,
				IRP.UNIT,
				I.INVOICE_CAT,
				DEPARTMENT_HEAD,
				S.PRODUCT_MANAGER,	
				IRP.INVOICE_DATE

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[INVOICE_ROW_SALES] AS 
			SELECT
				S.STOCK_ID,
				S.PRODUCT_ID,
				S.COMPANY_ID,
				SUM(IR.AMOUNT) AS SATISMIKTAR, 
				IR.PRICE,
				SUM(IR.NETTOTAL) AS SATISNET,
				SUM(IR.DISCOUNTTOTAL) AS SATISINDIRIM,
				SUM(IR.TAXTOTAL) AS SATISVERGI,
				SUM(IR.GROSSTOTAL) AS SATISTOPLAM,
				I.INVOICE_ID,
				I.INVOICE_NUMBER,
				I.INVOICE_CAT,
				I.DEPARTMENT_ID, 
				I.INVOICE_DATE,
				B.BRANCH_ID,
				IR.UNIT,
				IR.UNIT_ID,
				S.PRODUCT_NAME + ' ' + S.PROPERTY AS PRODUCT_NAME,
				
				S.PRODUCT_CATID,
				S.STOCK_CODE,
				DEPARTMENT_HEAD,
				S.PRODUCT_MANAGER
			FROM 
				#attributes.dsn#_#get_period.our_company_id#.PRODUCT_UNIT PU,	
				#attributes.dsn#.BRANCH B,
				#attributes.dsn#.DEPARTMENT D, 	
				#attributes.dsn#_#get_period.our_company_id#.STOCKS S,
				#attributes.dsn#.COMPANY C,
				INVOICE I,
				INVOICE_ROW IR 
			WHERE 
				S.COMPANY_ID = C.COMPANY_ID AND
				D.BRANCH_ID = B.BRANCH_ID AND		
				I.DEPARTMENT_ID = D.DEPARTMENT_ID AND
				IR.UNIT_ID = PU.PRODUCT_UNIT_ID AND
				S.PRODUCT_ID = IR.PRODUCT_ID AND
				IR.STOCK_ID = S.STOCK_ID AND 
				I.INVOICE_ID = IR.INVOICE_ID
			GROUP BY 
				I.INVOICE_ID, 
				I.INVOICE_NUMBER, 
				I.DEPARTMENT_ID, 
				I.INVOICE_DATE, 
				IR.PRICE, 
				S.STOCK_ID, 
				S.PRODUCT_ID, 
				S.COMPANY_ID,
				B.BRANCH_ID, 
				IR.UNIT, IR.UNIT_ID, 
				S.PRODUCT_NAME, 
				S.PROPERTY, 
				I.INVOICE_CAT, 
				S.PRODUCT_CATID, 
				S.STOCK_CODE,
				DEPARTMENT_HEAD,
				S.PRODUCT_MANAGER

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCK_IN_OUT] AS
			SELECT
				SUM(SR.STOCK_IN) AS GIRIS, 
				SUM(SR.STOCK_OUT) AS CIKIS, 
				S.PROPERTY, 
				SUM(SR.STOCK_IN - SR.STOCK_OUT) AS STOCK_, 
				S.STOCK_ID, 
				S.PRODUCT_NAME
			FROM
				#attributes.dsn#_#get_period.our_company_id#.STOCKS S,		
				STOCKS_ROW SR
			WHERE
				(SR.UPD_ID IS NOT NULL) AND 
				S.STOCK_ID = SR.STOCK_ID
			GROUP BY
				S.STOCK_ID, S.PRODUCT_NAME, S.PROPERTY

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[STOCKS_SALES] AS
			SELECT
				SUM(SR.STOCK_OUT) AS SATIS, 
				S.PRODUCT_ID, 
				S.STOCK_ID, 
				CAST(S.PRODUCT_NAME AS NVARCHAR(50)) + ' ' + CAST(S.PROPERTY AS NVARCHAR(50)) AS STOCK_NAME, 
				
				D.DEPARTMENT_ID, 
				S.PRODUCT_NAME, 
				D.DEPARTMENT_HEAD
			FROM
				STOCKS_ROW SR,
				#attributes.dsn#_#get_period.our_company_id#.STOCKS S,		
				#attributes.dsn#.DEPARTMENT D
			WHERE
				SR.PROCESS_TYPE IN (70, 71, 88)
				AND SR.STORE = D.DEPARTMENT_ID
				AND SR.STOCK_ID = S.STOCK_ID
			GROUP BY
				S.PRODUCT_ID, 
				S.STOCK_ID, 
				D.DEPARTMENT_HEAD, 
				S.PRODUCT_NAME, 
				S.PROPERTY, 
				D.DEPARTMENT_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_IN_BANK] AS
			SELECT
				0 AS ALACAK,
				SUM(VOUCHER.OTHER_MONEY_VALUE) AS BORC,
				ACCOUNTS.ACCOUNT_ID, 
				ACCOUNTS.ACCOUNT_NAME
			FROM
				#attributes.dsn#_#get_period.our_company_id#.ACCOUNTS AS ACCOUNTS,
				VOUCHER_PAYROLL,
				VOUCHER,
				VOUCHER_HISTORY
			WHERE
				VOUCHER.VOUCHER_STATUS_ID = 2 AND
				VOUCHER_HISTORY.VOUCHER_ID = VOUCHER.VOUCHER_ID AND
				VOUCHER_HISTORY.PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
				ACCOUNTS.ACCOUNT_ID = VOUCHER_PAYROLL.PAYROLL_ACCOUNT_ID  AND
				VOUCHER_HISTORY.HISTORY_ID = (SELECT MAX(VH.HISTORY_ID) FROM VOUCHER_HISTORY VH WHERE VH.VOUCHER_ID = VOUCHER.VOUCHER_ID AND VH.STATUS = 2)
			GROUP BY
				ACCOUNTS.ACCOUNT_ID, ACCOUNTS.ACCOUNT_NAME

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_IN_GUARANTEE] AS
			SELECT
				SUM(VOUCHER.OTHER_MONEY_VALUE) AS TEMINAT_SENET,
				ACCOUNTS.ACCOUNT_ID, 
				ACCOUNTS.ACCOUNT_NAME
			FROM
				#attributes.dsn#_#get_period.our_company_id#.ACCOUNTS AS ACCOUNTS,
				VOUCHER_PAYROLL,
				VOUCHER,
				VOUCHER_HISTORY
			WHERE
				VOUCHER.VOUCHER_STATUS_ID = 13 AND
				VOUCHER_HISTORY.VOUCHER_ID = VOUCHER.VOUCHER_ID AND
				VOUCHER_HISTORY.PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID AND
				ACCOUNTS.ACCOUNT_ID = VOUCHER_PAYROLL.PAYROLL_ACCOUNT_ID  AND
				VOUCHER_HISTORY.HISTORY_ID = (SELECT MAX(VH.HISTORY_ID) FROM VOUCHER_HISTORY VH WHERE VH.VOUCHER_ID = VOUCHER.VOUCHER_ID AND VH.STATUS = 13)
			GROUP BY
				ACCOUNTS.ACCOUNT_ID, ACCOUNTS.ACCOUNT_NAME

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_TO_GET] AS
			SELECT
				0 AS BORC, 
				SUM(VOUCHER.OTHER_MONEY_VALUE) AS ALACAK
			FROM 
				VOUCHER,
				VOUCHER_HISTORY,

				VOUCHER_PAYROLL
			WHERE
				VOUCHER.VOUCHER_STATUS_ID = 1 AND 
				VOUCHER_HISTORY.VOUCHER_ID = VOUCHER.VOUCHER_ID AND
				VOUCHER_HISTORY.PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID

</cfquery><cfquery name="CREATE_PERIOD_VIEW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE VIEW [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[VOUCHER_TO_PAY] AS
			SELECT
				0 AS ALACAK, 
				SUM(VOUCHER.OTHER_MONEY_VALUE) AS BORC
			FROM 
				VOUCHER,
				VOUCHER_HISTORY,
				VOUCHER_PAYROLL
			WHERE
				VOUCHER.VOUCHER_STATUS_ID = 6 AND 
				VOUCHER_HISTORY.VOUCHER_ID = VOUCHER.VOUCHER_ID AND
				VOUCHER_HISTORY.PAYROLL_ID = VOUCHER_PAYROLL.ACTION_ID
</cfquery>


<!--- konsinye viewi --->
<cfquery name="get_cons_period" datasource="#attributes.dsn#">
	SELECT 
		* 
	FROM 
		SETUP_PERIOD
	WHERE
		PERIOD_YEAR IN (#get_period.period_year#,#get_period.period_year+1#) AND 
		OUR_COMPANY_ID = #get_period.our_company_id#
</cfquery>
<cfif get_cons_period.recordcount>
    <cfscript>
        str_query = "";
        str_query2 = "";
        str_query = "#str_query# CREATE VIEW GET_CONSIGMENT_PRODUCT_SALE AS SELECT SUM(A1.INVOICE_AMOUNT) AS INVOICE_AMOUNT,A1.PRODUCT_ID,A1.STOCK_ID,A1.ACTION_DATE,A1.DEPARTMENT_ID, A1.LOCATION_ID";
        str_query = "#str_query#,CASE WHEN SPECT_VAR_ID = 0 THEN 0 ELSE ISNULL((SELECT SPECTS.SPECT_MAIN_ID FROM  #attributes.dsn#_#get_period.OUR_COMPANY_ID#.SPECTS SPECTS WHERE SPECTS.SPECT_VAR_ID = A1.SPECT_VAR_ID),0) END AS SPECT_MAIN_ID FROM ( ";
        for( i = 1 ;i lte get_cons_period.recordcount; i = i + 1){
            str_query2 = "#str_query2# SELECT SUM(AMOUNT) AS INVOICE_AMOUNT,GSRR.STOCK_ID,GSRR.PRODUCT_ID,ISNULL(GSRR.SPECT_VAR_ID,0) AS SPECT_VAR_ID,I.INVOICE_DATE AS ACTION_DATE,SR.STORE AS DEPARTMENT_ID,SR.STORE_LOCATION AS LOCATION_ID FROM #attributes.dsn#_#get_cons_period.PERIOD_YEAR[i]#_#get_cons_period.OUR_COMPANY_ID[i]#.SHIP_ROW_RELATION GSRR,#attributes.dsn#_#get_cons_period.PERIOD_YEAR[i]#_#get_cons_period.OUR_COMPANY_ID[i]#.INVOICE I,STOCKS_ROW SR ";
            str_query2 = "#str_query2# WHERE GSRR.SHIP_ID = SR.UPD_ID AND GSRR.SHIP_PERIOD = #attributes.period_id# AND SR.PROCESS_TYPE = 72 AND GSRR.TO_INVOICE_ID IS NOT NULL  AND GSRR.STOCK_ID = SR.STOCK_ID AND GSRR.TO_INVOICE_ID =I.INVOICE_ID AND GSRR.TO_INVOICE_CAT =I.INVOICE_CAT GROUP BY GSRR.PRODUCT_ID,GSRR.STOCK_ID,GSRR.SPECT_VAR_ID,I.INVOICE_DATE,SR.STORE,SR.STORE_LOCATION";
            if(i neq get_cons_period.recordcount)
                str_query2 = "#str_query2# UNION";
        }
        str_query="#str_query# #str_query2# ) AS A1 GROUP BY PRODUCT_ID,STOCK_ID,SPECT_VAR_ID,ACTION_DATE,DEPARTMENT_ID,LOCATION_ID";
    </cfscript>
    <cfquery name="ins_view_main_db" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#">
        #str_query#
    </cfquery>
</cfif>
<cfquery name="control_cons_pre_period" datasource="#attributes.dsn#">
	SELECT 
		PERIOD_ID
	FROM 
		SETUP_PERIOD
	WHERE
		PERIOD_YEAR = #get_period.period_year-1# AND 
		OUR_COMPANY_ID = #get_period.our_company_id#
</cfquery>

<cfif control_cons_pre_period.recordcount> <!--- onceki donemdeki view silinip, bu donem union ı eklenerek tekrar olusturulacak --->
    <cftry>
        <cfquery name="drop_view" datasource="#attributes.dsn#_#get_period.period_year-1#_#get_period.our_company_id#">
            DROP VIEW GET_CONSIGMENT_PRODUCT_SALE
        </cfquery>
        <cfcatch></cfcatch>
    </cftry>
	<cfquery name="get_cons_pre_period" datasource="#attributes.dsn#">
		SELECT 
			* 
		FROM 
			SETUP_PERIOD
		WHERE
			PERIOD_YEAR IN (#get_period.period_year#,#get_period.period_year-1#) AND 
			OUR_COMPANY_ID = #get_period.our_company_id#
    </cfquery>
    <cfif get_cons_pre_period.recordcount>
        <cfscript>
            str_query = "";
            str_query2 = "";
            str_query = "#str_query# CREATE VIEW GET_CONSIGMENT_PRODUCT_SALE AS SELECT SUM(A1.INVOICE_AMOUNT) AS INVOICE_AMOUNT,A1.PRODUCT_ID,A1.STOCK_ID,A1.ACTION_DATE,A1.DEPARTMENT_ID, A1.LOCATION_ID";
            str_query = "#str_query#,CASE WHEN SPECT_VAR_ID = 0 THEN 0 ELSE ISNULL((SELECT SPECTS.SPECT_MAIN_ID FROM  #attributes.dsn#_#get_period.OUR_COMPANY_ID#.SPECTS SPECTS WHERE SPECTS.SPECT_VAR_ID = A1.SPECT_VAR_ID),0) END AS SPECT_MAIN_ID FROM ( ";
            for( i = 1 ;i lte get_cons_pre_period.recordcount; i = i + 1){
                str_query2 = "#str_query2# SELECT SUM(AMOUNT) AS INVOICE_AMOUNT,GSRR.STOCK_ID,GSRR.PRODUCT_ID,ISNULL(GSRR.SPECT_VAR_ID,0) AS SPECT_VAR_ID,I.INVOICE_DATE AS ACTION_DATE,SR.STORE AS DEPARTMENT_ID,STORE_LOCATION AS LOCATION_ID FROM  #attributes.dsn#_#get_cons_pre_period.PERIOD_YEAR[i]#_#get_cons_pre_period.OUR_COMPANY_ID[i]#.SHIP_ROW_RELATION GSRR,#attributes.dsn#_#get_cons_pre_period.PERIOD_YEAR[i]#_#get_cons_pre_period.OUR_COMPANY_ID[i]#.INVOICE I,STOCKS_ROW SR ";
                str_query2 = "#str_query2# WHERE GSRR.SHIP_ID = SR.UPD_ID AND GSRR.SHIP_PERIOD = #control_cons_pre_period.period_id# AND SR.PROCESS_TYPE = 72 AND GSRR.TO_INVOICE_ID IS NOT NULL AND GSRR.TO_INVOICE_ID =I.INVOICE_ID AND GSRR.TO_INVOICE_CAT =I.INVOICE_CAT AND GSRR.PRODUCT_ID = SR.PRODUCT_ID GROUP BY GSRR.PRODUCT_ID,GSRR.STOCK_ID,GSRR.SPECT_VAR_ID,I.INVOICE_DATE,SR.STORE,SR.STORE_LOCATION";
                if(i neq get_cons_pre_period.recordcount)
                    str_query2 = "#str_query2# UNION";
            }
            str_query="#str_query# #str_query2# ) AS A1 GROUP BY PRODUCT_ID,STOCK_ID,SPECT_VAR_ID,ACTION_DATE,DEPARTMENT_ID, LOCATION_ID";
            //WriteOutput("#str_query#");
        </cfscript>
        <cfquery name="ins_view_main_db" datasource="#attributes.dsn#_#get_period.period_year-1#_#get_period.our_company_id#">
            #str_query#
        </cfquery>
    </cfif>
</cfif>

<cfquery name="GET_CONSIGMENT_DETAIL" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#">

    CREATE VIEW GET_CONSIGMENT_DETAIL AS
        SELECT 
            SUM(STOCK_OUT) AS STOCK_IN,
            0 AS STOCK_OUT,
            SHIP_DATE AS ACTION_DATE,
            SR.PRODUCT_ID,
            SR.STOCK_ID,
            SR.SPECT_VAR_ID AS SPECT_MAIN_ID,
            SR.STORE AS DEPARTMENT_ID,
            SR.STORE_LOCATION AS LOCATION_ID 
        FROM
            SHIP S,
            STOCKS_ROW SR
        WHERE
            SR.UPD_ID = S.SHIP_ID
            AND S.SHIP_TYPE=SR.PROCESS_TYPE
            AND S.SHIP_TYPE=72
        GROUP BY
            SHIP_DATE,
            SR.PRODUCT_ID,
            SR.STOCK_ID,
            SR.SPECT_VAR_ID,
            SR.STORE,
            SR.STORE_LOCATION
        UNION ALL
        SELECT
            0 AS STOCK_IN,
            SUM(GSRR.AMOUNT) AS STOCK_OUT,
            SHIP.SHIP_DATE AS ACTION_DATE,
            GSRR.PRODUCT_ID,
            GSRR.STOCK_ID,
            GSRR.SPECT_VAR_ID AS SPECT_MAIN_ID,
            SHIP.DEPARTMENT_IN AS DEPARTMENT_ID,
            SHIP.LOCATION_IN AS LOCATION_ID 
        FROM  
            SHIP_ROW_RELATION GSRR,  
            (SELECT DISTINCT UPD_ID,STORE_LOCATION,STORE,PROCESS_TYPE FROM STOCKS_ROW WHERE PROCESS_TYPE = 72) AS SR,
            SHIP
        WHERE 
            GSRR.SHIP_PERIOD = #attributes.period_id# AND 
            GSRR.SHIP_ID =SR.UPD_ID 
            AND GSRR.TO_SHIP_TYPE = SHIP.SHIP_TYPE
            AND GSRR.TO_SHIP_ID =SHIP.SHIP_ID
            AND SHIP.SHIP_TYPE=75	
        GROUP BY
            SHIP.SHIP_DATE,
            GSRR.PRODUCT_ID,
            GSRR.STOCK_ID,
            GSRR.SPECT_VAR_ID,
            SHIP.DEPARTMENT_IN,
            SHIP.LOCATION_IN
        <cfif get_cons_period.recordcount or ( control_cons_pre_period.recordcount and get_cons_pre_period.recordcount )>
        UNION ALL		
        SELECT 
            0 AS STOCK_IN,
            SUM(GC.INVOICE_AMOUNT) AS STOCK_OUT,
            GC.ACTION_DATE,
            GC.PRODUCT_ID,
            GC.STOCK_ID,
            GC.SPECT_MAIN_ID,
            GC.DEPARTMENT_ID,
            GC.LOCATION_ID 
        FROM
            GET_CONSIGMENT_PRODUCT_SALE GC
        GROUP BY
            ACTION_DATE,
            GC.PRODUCT_ID,
            GC.STOCK_ID,
            GC.SPECT_MAIN_ID,
            GC.DEPARTMENT_ID,
            GC.LOCATION_ID
        </cfif>
</cfquery>

<cfif control_cons_pre_period.recordcount>
	<!--- onceki donem varsa o donemdeki GET_CONSIGMENT_DETAIL viewi bu donemde cekilecek --->
	<cfquery name="GET_PRE_PERIOD_CONSIGMENT_DETAIL" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#">
		CREATE VIEW GET_PRE_PERIOD_CONSIGMENT_DETAIL AS
			SELECT
				STOCK_IN,
				STOCK_OUT,
				ACTION_DATE,
				PRODUCT_ID,
				STOCK_ID,
				SPECT_MAIN_ID,
				DEPARTMENT_ID,
				LOCATION_ID
			FROM
				#attributes.dsn#_#period_year-1#_#get_period.our_company_id#.GET_CONSIGMENT_DETAIL
	</cfquery>
<cfelse><!--- onceki donem yoksa view bos olarak olusturuluyor --->
	<cfquery name="GET_PRE_PERIOD_CONSIGMENT_DETAIL" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#">
		CREATE VIEW GET_PRE_PERIOD_CONSIGMENT_DETAIL AS
			SELECT
				STOCK_IN,
				STOCK_OUT,
				ACTION_DATE,
				PRODUCT_ID,
				STOCK_ID,
				SPECT_MAIN_ID,
				DEPARTMENT_ID,
				LOCATION_ID
			FROM
				GET_CONSIGMENT_DETAIL
			WHERE
				PRODUCT_ID IS NULL
	</cfquery>
</cfif>

<!--- import standard table contents --->
<cfif attributes.is_old_account>
	<cftry>
        <cfquery name="ADD_OLD_DB_PLAN" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#">
            INSERT INTO ACCOUNT_PLAN 
				(ACCOUNT_CODE,
                ACCOUNT_NAME,
                IFRS_CODE,
                IFRS_NAME,
                ACCOUNT_CODE2,
                ACCOUNT_NAME2,
                SUB_ACCOUNT)
            SELECT
                ACCOUNT_CODE,
                ACCOUNT_NAME,
                IFRS_CODE,
                IFRS_NAME,
                ACCOUNT_CODE2,
                ACCOUNT_NAME2,
                SUB_ACCOUNT	
            FROM
                #attributes.dsn#_#period_year-1#_#get_period.our_company_id#.ACCOUNT_PLAN	
        </cfquery>
	
		<cfcatch type="any">
			<cfquery name="DEL_ACCOUNTS" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#">
				DELETE FROM ACCOUNT_PLAN
			</cfquery>
			<!--- account plan --->
			<cffile action="read" file="#attributes.upload_folder##caller.dir_seperator#xml#caller.dir_seperator#account_plan.xml" variable="xmldosyam" charset="UTF-8">
			<cfset dosyam = XmlParse(xmldosyam)>
			<cfset xml_dizi = dosyam.ACCOUNT_PLAN.XmlChildren>
			<cfset d_boyut = ArrayLen(xml_dizi)>
			<cfloop index="i" from = "1" to = #d_boyut#>
				<cfquery name="ADD_ACCOUNT" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#">
					INSERT INTO
						ACCOUNT_PLAN
						(
							ACCOUNT_CODE,
							ACCOUNT_NAME,
							SUB_ACCOUNT
						)
					VALUES
						(
							 <cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.ACCOUNT_PLAN.ACCOUNT[i].ACCOUNT_CODE.XmlText#">,
							 <cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.ACCOUNT_PLAN.ACCOUNT[i].ACCOUNT_NAME.XmlText#">,
							 0
						)
				</cfquery>
			</cfloop>			
		</cfcatch>
	</cftry>
<cfelse>
	<!--- account plan --->
	<cffile action="read" file="#attributes.upload_folder##caller.dir_seperator#xml#caller.dir_seperator#account_plan.xml" variable="xmldosyam" charset="UTF-8">
	<cfset dosyam = XmlParse(xmldosyam)>
	<cfset xml_dizi = dosyam.ACCOUNT_PLAN.XmlChildren>
	<cfset d_boyut = ArrayLen(xml_dizi)>
	<cfloop index="i" from = "1" to = #d_boyut#>
		<cfquery name="ADD_ACCOUNT" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#">
			INSERT INTO
				ACCOUNT_PLAN
				(
					ACCOUNT_CODE,
					ACCOUNT_NAME,
					SUB_ACCOUNT
				)
			VALUES
				(
					 <cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.ACCOUNT_PLAN.ACCOUNT[i].ACCOUNT_CODE.XmlText#">,
					 <cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.ACCOUNT_PLAN.ACCOUNT[i].ACCOUNT_NAME.XmlText#">,
					 0
				)
		</cfquery>
	</cfloop>
</cfif>

<!--- balance sheet table --->
<cffile action="read" file="#attributes.upload_folder##caller.dir_seperator#xml#caller.dir_seperator#balance_sheet_table.xml" variable="xmldosyam" charset="UTF-8">
<cfset dosyam = XmlParse(xmldosyam)>
<cfset xml_dizi = dosyam.BALANCE_SHEET.XmlChildren>
<cfset d_boyut = ArrayLen(xml_dizi)>
<cfloop index="i" from = "1" to = #d_boyut#>
	<cfquery name="ADD_BALANCE" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#">
		INSERT INTO
			BALANCE_SHEET_TABLE
		(
			CODE,
			NAME,
			ACCOUNT_CODE,
			SIGN,
			BA,
			VIEW_AMOUNT_TYPE,
			NAME_LANG_NO
		)
		VALUES
		(
			<cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.BALANCE_SHEET.BALANCE[i].CODE.XmlText#">,
			<cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.BALANCE_SHEET.BALANCE[i].NAME.XmlText#">,
			<cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.BALANCE_SHEET.BALANCE[i].ACCOUNT_CODE.XmlText#">,
			<cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.BALANCE_SHEET.BALANCE[i].SIGN.XmlText#">,
			<cfif len(dosyam.BALANCE_SHEET.BALANCE[i].BA.XmlText)>
				#dosyam.BALANCE_SHEET.BALANCE[i].BA.XmlText#,
			<cfelse>
				NULL,
			</cfif>
			#dosyam.BALANCE_SHEET.BALANCE[i].VIEW_AMOUNT_TYPE.XmlText#,
			<cfif len(dosyam.BALANCE_SHEET.BALANCE[i].NAME_LANG_NO.XmlText)>#dosyam.BALANCE_SHEET.BALANCE[i].NAME_LANG_NO.XmlText#<cfelse>NULL</cfif>
		)
	</cfquery>
</cfloop>

<!--- cost table --->
<cffile action="read" file="#attributes.upload_folder##caller.dir_seperator#xml#caller.dir_seperator#cost_table.xml" variable="xmldosyam" charset="UTF-8">
<cfset dosyam = XmlParse(xmldosyam)>
<cfset xml_dizi = dosyam.COST_TABLE.XmlChildren>
<cfset d_boyut = ArrayLen(xml_dizi)>
<cfloop index="i" from = "1" to = #d_boyut#>
	<cfquery name="ADD_COST" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#">
		INSERT INTO
			COST_TABLE
		(
			CODE,
			NAME,
			ACCOUNT_CODE,
			SIGN,
			BA,
			VIEW_AMOUNT_TYPE,
			ZERO,
			ADD_,
			NAME_LANG_NO
		)
		VALUES
		(
			 <cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.COST_TABLE.COST[i].CODE.XmlText#">,
			 <cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.COST_TABLE.COST[i].NAME.XmlText#">,
			 <cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.COST_TABLE.COST[i].ACCOUNT_CODE.XmlText#">,
			 <cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.COST_TABLE.COST[i].SIGN.XmlText#">,
		<cfif len(dosyam.COST_TABLE.COST[i].BA.XmlText)>
			#dosyam.COST_TABLE.COST[i].BA.XmlText#,
		<cfelse>
			NULL,
		</cfif>
			#dosyam.COST_TABLE.COST[i].VIEW_AMOUNT_TYPE.XmlText#,
		<cfif len(dosyam.COST_TABLE.COST[i].ZERO.XmlText)>
			#dosyam.COST_TABLE.COST[i].ZERO.XmlText#,
		<cfelse>
			NULL,
		</cfif>
		<cfif len(dosyam.COST_TABLE.COST[i].ADD_.XmlText)>
			#dosyam.COST_TABLE.COST[i].ADD_.XmlText#,
		<cfelse>
			NULL,
		</cfif>
			<cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.COST_TABLE.COST[i].NAME_LANG_NO.XmlText#">
		)
	</cfquery>
</cfloop>

<!--- income table --->
<cffile action="read" file="#attributes.upload_folder##caller.dir_seperator#xml#caller.dir_seperator#income_table.xml" variable="xmldosyam" charset="UTF-8">
<cfset dosyam = XmlParse(xmldosyam)>
<cfset xml_dizi = dosyam.INCOME_TABLE.XmlChildren>
<cfset d_boyut = ArrayLen(xml_dizi)>
<cfloop index="i" from = "1" to = #d_boyut#>
	<cfquery name="ADD_INCOME" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#">
		INSERT INTO
			INCOME_TABLE
		(
			CODE,
			NAME,
			NAME_LANG_NO,
			ACCOUNT_CODE,
			SIGN,
			BA,
			VIEW_AMOUNT_TYPE
		)
		VALUES
		(
			 <cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.INCOME_TABLE.INCOME[i].CODE.XmlText#">,
			 <cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.INCOME_TABLE.INCOME[i].NAME.XmlText#">,
		<cfif len(dosyam.INCOME_TABLE.INCOME[i].NAME_LANG_NO.XmlText)>
			#dosyam.INCOME_TABLE.INCOME[i].NAME_LANG_NO.XmlText#,
		<cfelse>
			NULL,
		</cfif>
			<cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.INCOME_TABLE.INCOME[i].ACCOUNT_CODE.XmlText#">,
			<cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.INCOME_TABLE.INCOME[i].SIGN.XmlText#">,
		<cfif len(dosyam.INCOME_TABLE.INCOME[i].BA.XmlText)>
			#dosyam.INCOME_TABLE.INCOME[i].BA.XmlText#,
		<cfelse>
			NULL,
		</cfif>
			#dosyam.INCOME_TABLE.INCOME[i].VIEW_AMOUNT_TYPE.XmlText#
		)
	</cfquery>
</cfloop>

<!--- CASH_FLOW_TABLE --->
<cffile action="read" file="#attributes.upload_folder##caller.dir_seperator#xml#caller.dir_seperator#setup_cash_flow.xml" variable="xmldosyam" charset="UTF-8">
<cfset dosyam = XmlParse(xmldosyam)>
<cfset xml_dizi = dosyam.CASH_FLOW_TABLE.XmlChildren>
<cfset d_boyut = ArrayLen(xml_dizi)>
<cfloop index="i" from = "1" to = #d_boyut#>
	<cfquery name="ADD_CASH_FLOW_TABLE" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#">
		INSERT INTO
			CASH_FLOW_TABLE
			(
				CASH_FLOW_ID,
				CODE,
				NAME,
				NAME_LANG_NO,
				ACCOUNT_CODE,
				SIGN,
			<cfif len(dosyam.CASH_FLOW_TABLE.CASH_FLOW[i].BA.XmlText)>
				BA,
			</cfif>
				VIEW_AMOUNT_TYPE
			)
		VALUES
			(
				#dosyam.CASH_FLOW_TABLE.CASH_FLOW[i].CASH_FLOW_ID.XmlText#,
				<cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.CASH_FLOW_TABLE.CASH_FLOW[i].CODE.XmlText#">,
				<cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.CASH_FLOW_TABLE.CASH_FLOW[i].NAME.XmlText#">,
			<cfif len(dosyam.CASH_FLOW_TABLE.CASH_FLOW[i].NAME_LANG_NO.XmlText)>
				#dosyam.CASH_FLOW_TABLE.CASH_FLOW[i].NAME_LANG_NO.XmlText#,
			<cfelse>
				NULL,
			</cfif>	
				<cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.CASH_FLOW_TABLE.CASH_FLOW[i].ACCOUNT_CODE.XmlText#">,
				<cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.CASH_FLOW_TABLE.CASH_FLOW[i].SIGN.XmlText#">,
			<cfif len(dosyam.CASH_FLOW_TABLE.CASH_FLOW[i].BA.XmlText)>
				#dosyam.CASH_FLOW_TABLE.CASH_FLOW[i].BA.XmlText#,
			</cfif>
				#dosyam.CASH_FLOW_TABLE.CASH_FLOW[i].VIEW_AMOUNT_TYPE.XmlText#																				
			)
	</cfquery>
</cfloop>

<!--- FUND_FLOW table --->
<cffile action="read" file="#attributes.upload_folder##caller.dir_seperator#xml#caller.dir_seperator#setup_fund_flow.xml" variable="xmldosyam" charset="UTF-8">
<cfset dosyam = XmlParse(xmldosyam)>
<cfset xml_dizi = dosyam.FUND_FLOW_TABLE.XmlChildren>
<cfset d_boyut = ArrayLen(xml_dizi)>
<cfloop index="i" from = "1" to = #d_boyut#>
	<cfquery name="ADD_FUND_FLOW_TABLE" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#">
		INSERT INTO
			FUND_FLOW_TABLE
			(
				FUND_FLOW_ID,
				CODE,
				NAME,
				ACCOUNT_CODE,
				SIGN,
			<cfif len(dosyam.FUND_FLOW_TABLE.FUND_FLOW[i].BA.XmlText)>
				BA,
			</cfif>
				VIEW_AMOUNT_TYPE
			)
		VALUES
			(
				<!--- '#dosyam.SETUP_PERIOD_PART.SETUP_PERIOD[i].PERIOD_PART_ID.XmlText#', --->
				#dosyam.FUND_FLOW_TABLE.FUND_FLOW[i].FUND_FLOW_ID.XmlText#,
				<cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.FUND_FLOW_TABLE.FUND_FLOW[i].CODE.XmlText#">,
				<cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.FUND_FLOW_TABLE.FUND_FLOW[i].NAME.XmlText#">,
				<cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.FUND_FLOW_TABLE.FUND_FLOW[i].ACCOUNT_CODE.XmlText#">,
				<cfqueryparam cfsqltype="cf_sql_varchar" value="#dosyam.FUND_FLOW_TABLE.FUND_FLOW[i].SIGN.XmlText#">,
			<cfif len(dosyam.FUND_FLOW_TABLE.FUND_FLOW[i].BA.XmlText)>
				#dosyam.FUND_FLOW_TABLE.FUND_FLOW[i].BA.XmlText#,
			</cfif>
				#dosyam.FUND_FLOW_TABLE.FUND_FLOW[i].VIEW_AMOUNT_TYPE.XmlText#																						
			)
	</cfquery>
</cfloop>


<!--- stocks row --->
<cfquery name="GET_PRODUCTS" datasource="#attributes.dsn#">
	SELECT
		PRODUCT_ID,
		STOCK_ID
	FROM
		#attributes.dsn#_#get_period.our_company_id#.STOCKS
</cfquery>

<cfif get_products.RecordCount>
	<cfloop query="get_products">
		<cfquery name="ADD_STOCKS_ROW" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#">
			INSERT INTO
				STOCKS_ROW
			(
				PRODUCT_ID,
				STOCK_ID,
				STOCK_IN,
				STOCK_OUT
			)
			VALUES
			(
				#PRODUCT_ID#,
				#STOCK_ID#,
				0,
				0
			)
		</cfquery>
	</cfloop>
</cfif>    


<!--- SP EKLEME BASLANDI --->
<cfquery name="CREATE_PERIOD_SP" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE PROCEDURE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[add_multilevel_premium]
			@invoice_id int
		AS
		DECLARE @LEN_REF int;
		DECLARE @LEN_REF2 int;
		DECLARE @REF_POS_CODE int;
		DECLARE @CONSCAT_ID int;
		DECLARE @CONSCAT_ID_2 int;
		DECLARE @PREMIUM_RATE float;
		DECLARE @REF_CODE nvarchar(250);
		DECLARE @REF_CODE_2 nvarchar(250);
		DECLARE @CONS_REF_CODE nvarchar(250);
		DECLARE @MONEY_TYPE nvarchar(20);
		DECLARE @REF_CONS_ID int;
		DECLARE @INV_INDX int;
		DECLARE @INV_CAT int;
		DECLARE @INV_DATE datetime;
		DECLARE @INV_IPTAL bit;
		DECLARE @GROSS_TOTAL float;
		DECLARE @CAMP_ID int;
		SET @INV_INDX = 1;
	
		DELETE FROM 
			INVOICE_MULTILEVEL_PREMIUM 
		WHERE 
			INVOICE_ID = @invoice_id
		SELECT 
			@REF_CONS_ID = CONSUMER_ID,
			@INV_IPTAL = ISNULL(IS_IPTAL,0),
			@INV_CAT = INVOICE_CAT,
			@INV_DATE = INVOICE_DATE,
			@REF_CODE = CONSUMER_REFERENCE_CODE,
			@CONS_REF_CODE = CONSUMER_REFERENCE_CODE
		FROM 
			INVOICE 
		WHERE 
			INVOICE_ID = @invoice_id
	
		SELECT @GROSS_TOTAL= (  SELECT 
									ISNULL(SUM(IR.GROSSTOTAL),0)
								FROM 
									INVOICE_ROW IR,
									#attributes.dsn#_#get_period.our_company_id#.PRODUCT P
								WHERE 
									IR.INVOICE_ID = @invoice_id AND 
									IR.PRODUCT_ID = P.PRODUCT_ID AND 
									P.IS_INVENTORY = 1);
		SELECT @REF_POS_CODE =( SELECT 
									REF_POS_CODE 
								FROM 
									#attributes.dsn#.CONSUMER 
								WHERE 
									CONSUMER_ID = @REF_CONS_ID);
		SELECT @CONSCAT_ID   =( SELECT 
									CONSUMER_CAT_ID 
								FROM 
									#attributes.dsn#.CONSUMER 
								WHERE 
									CONSUMER_ID = @REF_POS_CODE);
		SELECT @MONEY_TYPE= (SELECT 
								MONEY
							FROM 
								SETUP_MONEY
							WHERE 
								RATE1=RATE2);
		SELECT @CAMP_ID = (SELECT TOP 1
							CAMP_ID
						FROM 
							#attributes.dsn#_#get_period.our_company_id#.CAMPAIGNS 
						WHERE 
							CAMP_STARTDATE < @INV_DATE AND 
							CAMP_FINISHDATE > @INV_DATE);
	
		SET @LEN_REF = (LEN(REPLACE(@REF_CODE,'.','..'))-LEN(@REF_CODE)+1);
		SET @LEN_REF2 = LEN(@REF_CODE);
		IF (@INV_IPTAL <>1)
		BEGIN
			WHILE @INV_INDX <= @LEN_REF
				BEGIN  
	
					IF(CHARINDEX('.',@REF_CODE) <> 0)
						SET @REF_CODE_2 = LEFT(@REF_CODE,CHARINDEX('.',@REF_CODE)-1);
					ELSE
						SET @REF_CODE_2 = @REF_CODE;
					
					SELECT @CONSCAT_ID_2 = (SELECT 
												CONSUMER_CAT_ID 
											FROM 
												#attributes.dsn#.CONSUMER
											WHERE 
												CONSUMER_ID = @REF_CODE_2);
						
	
					SELECT @PREMIUM_RATE = (SELECT 
												PREMIUM_RATIO
											FROM
												#attributes.dsn#_#get_period.our_company_id#.SETUP_CONSCAT_PREMIUM  
											WHERE 
												CAMPAIGN_ID = @CAMP_ID AND 
												CONSCAT_ID = @CONSCAT_ID_2 	AND 
												PREMIUM_LEVEL = @LEN_REF - @INV_INDX + 1 AND 
												(REF_MEMBER_CAT = @CONSCAT_ID OR REF_MEMBER_CAT IS NULL));
	
					IF(@PREMIUM_RATE IS NOT NULL)
					BEGIN 
						INSERT INTO	
							INVOICE_MULTILEVEL_PREMIUM
							(					
								CAMPAIGN_ID,
								INVOICE_ID,
								PREMIUM_DATE,
								REF_CONSUMER_ID,
								CONSUMER_ID,
								PREMIUM_LINE,
								PREMIUM_RATE,
								INVOICE_TOTAL,
								PREMIUM_SYSTEM_TOTAL,
								PREMIUM_SYSTEM_MONEY,
								CONSUMER_REFERENCE_CODE,
								PREMIUM_STATUS
							)
						VALUES
							(
								@CAMP_ID,
								@invoice_id,
								@INV_DATE,
								@REF_CONS_ID,
								@REF_CODE_2,
								@LEN_REF - @INV_INDX + 1,
								@PREMIUM_RATE,
								@GROSS_TOTAL,
								@GROSS_TOTAL*@PREMIUM_RATE/100,
								@MONEY_TYPE,
								@CONS_REF_CODE,
								1											
							)
					END;
	
					SET @REF_CODE = SUBSTRING(@REF_CODE,(CHARINDEX('.',@REF_CODE)+1),(@LEN_REF2-CHARINDEX('.',@REF_CODE))); 
					SET @INV_INDX = @INV_INDX+1;
			END;
		END;

</cfquery><cfquery name="CREATE_PERIOD_SP" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE PROCEDURE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[add_multilevel_sales]
			@invoice_id int
		AS
	DECLARE @LEN_REF int;
		DECLARE @LEN_REF2 int;
		DECLARE @REF_CODE nvarchar(250);
		DECLARE @REF_CODE_2 nvarchar(250);
		DECLARE @REF_CONS_ID int;
		DECLARE @INV_INDX int;
		DECLARE @INV_CAT int;
		DECLARE @INV_DATE datetime;
		DECLARE @INV_IPTAL bit;
		DECLARE @NET_TOTAL float;
		DECLARE @GROSS_TOTAL float;
		DECLARE @INV_NET_TOTAL float;
		DECLARE @INV_GROSS_TOTAL float;
		SET @INV_INDX = 1;
	
		DELETE FROM 
			INVOICE_MULTILEVEL_SALES 
		WHERE 
			INVOICE_ID = @invoice_id
	
		SELECT 
			@INV_IPTAL = ISNULL(IS_IPTAL,0),
			@INV_CAT = INVOICE_CAT,
			@INV_DATE = INVOICE_DATE,
			@REF_CODE = CONSUMER_REFERENCE_CODE,
			@REF_CONS_ID = CONSUMER_ID		
		FROM 
			INVOICE 
		WHERE 
			INVOICE_ID = @invoice_id
	
		SELECT @NET_TOTAL= (SELECT 
					ISNULL(SUM(IR.NETTOTAL),0)
				FROM 
					INVOICE_ROW IR,
					#attributes.dsn#_#get_period.our_company_id#.PRODUCT P 
				WHERE 
					IR.INVOICE_ID = @invoice_id AND 
					IR.PRODUCT_ID = P.PRODUCT_ID AND 
					(P.IS_INVENTORY = 1 OR P.IS_KARMA = 1));
		SELECT @GROSS_TOTAL= (SELECT 
					ISNULL(SUM(IR.GROSSTOTAL),0)
				FROM 
					INVOICE_ROW IR,
					#attributes.dsn#_#get_period.our_company_id#.PRODUCT P 
				WHERE 
					IR.INVOICE_ID = @invoice_id AND 
					IR.PRODUCT_ID = P.PRODUCT_ID AND 
					(P.IS_INVENTORY = 1 OR P.IS_KARMA = 1));
		SELECT @INV_NET_TOTAL= (SELECT 
					ISNULL(SUM(IR.NETTOTAL),0)
				FROM 
					INVOICE_ROW IR
				WHERE 
					IR.INVOICE_ID = @invoice_id);
		SELECT @INV_GROSS_TOTAL= (SELECT 
					ISNULL(SUM(IR.GROSSTOTAL),0)
				FROM 
					INVOICE_ROW IR
				WHERE 
					IR.INVOICE_ID = @invoice_id);
		SET @LEN_REF = (LEN(REPLACE(@REF_CODE,'.','..'))-LEN(@REF_CODE)+1);
		SET @LEN_REF2 = LEN(@REF_CODE);
		IF (@INV_IPTAL <>1)
		BEGIN
			WHILE @INV_INDX <= @LEN_REF
				BEGIN  
					IF(CHARINDEX('.',@REF_CODE) <> 0)
						SET @REF_CODE_2 = LEFT(@REF_CODE,CHARINDEX('.',@REF_CODE)-1);
					ELSE
						SET @REF_CODE_2 = @REF_CODE;
					INSERT INTO	
						INVOICE_MULTILEVEL_SALES
						(					
							INVOICE_ID,
							INVOICE_CAT,
							INVOICE_DATE,
							REF_CONSUMER_ID,
							CONSUMER_ID,
							GROSSTOTAL,
							NETTOTAL,
							INV_GROSSTOTAL,
							INV_NETTOTAL,
							SALE_STAGE
						)
					VALUES
						(
							@invoice_id,
							@INV_CAT,
							@INV_DATE,
							@REF_CONS_ID,
							@REF_CODE_2,
							@GROSS_TOTAL,
							@NET_TOTAL,
							@INV_GROSS_TOTAL,
							@INV_NET_TOTAL,
							@LEN_REF - @INV_INDX + 1					
						)
					SET @REF_CODE = SUBSTRING(@REF_CODE,(CHARINDEX('.',@REF_CODE)+1),(@LEN_REF2-CHARINDEX('.',@REF_CODE))); 
					SET @INV_INDX = @INV_INDX+1;
			END;
		END;

</cfquery><cfquery name="CREATE_PERIOD_SP" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE PROCEDURE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[DEL_COST_PRODUCT]
		@del_product_cost_id int
        AS
        BEGIN
            SET NOCOUNT ON;
            DELETE FROM #attributes.dsn#_product.PRODUCT_COST WHERE PRODUCT_COST_ID = @del_product_cost_id
            DELETE FROM PRODUCT_COST_REFERENCE WHERE PRODUCT_COST_ID = @del_product_cost_id
        END

</cfquery><cfquery name="CREATE_PERIOD_SP" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE PROCEDURE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[DEL_COST_SHIP]
            @del_ship_id_list nvarchar(max),
            @del_cost_period_id INT,
            @paper_product_id_ INT
        AS
        BEGIN
            SET NOCOUNT ON;
            IF @paper_product_id_<> 0
                BEGIN
                    exec('DELETE FROM #attributes.dsn#_product.PRODUCT_COST WHERE ACTION_ID  IN ('+@del_ship_id_list+') AND ACTION_TYPE = 2 AND ACTION_PERIOD_ID ='+ @del_cost_period_id+' AND PRODUCT_ID ='+ @paper_product_id_+'');
                END
            ELSE
                BEGIN
                    exec('DELETE FROM #attributes.dsn#_product.PRODUCT_COST WHERE ACTION_ID IN ('+@del_ship_id_list+') AND ACTION_TYPE = 2 AND ACTION_PERIOD_ID ='+ @del_cost_period_id+''); 		
                END
                    exec('DELETE FROM PRODUCT_COST_REFERENCE WHERE ACTION_ID IN ('+@del_ship_id_list+') AND ACTION_TYPE = 2');
        END

</cfquery><cfquery name="CREATE_PERIOD_SP" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE PROCEDURE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_ACCOUNT_PLAN]
				@is_xml bit,
				@account_code NVARCHAR(50),
				@startrow int,
				@maxrows int
			AS
			BEGIN
				
				SET NOCOUNT ON;
			
			   IF @is_xml = 1
					BEGIN
						IF LEN (@account_code) > 0 
							BEGIN
								IF isnumeric(left(@account_code,3)) = 1 
									BEGIN
										WITH CTE1 AS (
												SELECT
													SUM(ACCOUNT_ACCOUNT_REMAINDER.BORC - ACCOUNT_ACCOUNT_REMAINDER.ALACAK) AS BAKIYE,
													ACCOUNT_PLAN.ACCOUNT_CODE, 
													ACCOUNT_PLAN.ACCOUNT_CODE2, 
													ACCOUNT_PLAN.ACCOUNT_NAME,
													ACCOUNT_PLAN.ACCOUNT_ID,
													ACCOUNT_PLAN.SUB_ACCOUNT,
													ACCOUNT_PLAN.IFRS_CODE, 
													ACCOUNT_PLAN.IFRS_NAME
												FROM
													ACCOUNT_PLAN
													LEFT JOIN ACCOUNT_ACCOUNT_REMAINDER ON 
													(
														(ACCOUNT_PLAN.SUB_ACCOUNT =1  AND ACCOUNT_ACCOUNT_REMAINDER.ACCOUNT_ID LIKE ACCOUNT_PLAN.ACCOUNT_CODE +'.%') 
														OR
														(ACCOUNT_PLAN.SUB_ACCOUNT=0 AND ACCOUNT_ACCOUNT_REMAINDER.ACCOUNT_ID = ACCOUNT_PLAN.ACCOUNT_CODE)
													)
												WHERE
													ACCOUNT_PLAN.ACCOUNT_ID IS NOT NULL
													AND ACCOUNT_PLAN.ACCOUNT_CODE LIKE ''+@account_code+'%'
												GROUP BY
													ACCOUNT_PLAN.ACCOUNT_CODE, 
													ACCOUNT_PLAN.ACCOUNT_CODE2, 
													ACCOUNT_PLAN.ACCOUNT_NAME,
													ACCOUNT_PLAN.SUB_ACCOUNT,
													ACCOUNT_PLAN.IFRS_CODE, 
													ACCOUNT_PLAN.IFRS_NAME,
													ACCOUNT_PLAN.ACCOUNT_ID
												),
				
											CTE2 AS (
													SELECT
														CTE1.*,
														ROW_NUMBER() OVER (ORDER BY ACCOUNT_CODE asc) AS RowNum,(SELECT COUNT(*) FROM CTE1) AS QUERY_COUNT
													FROM
														CTE1
												)
												SELECT
													CTE2.*
												FROM
													CTE2
												WHERE
													RowNum BETWEEN @startrow and @startrow+(@maxrows-1)
									END
								ELSE
									BEGIN
										WITH CTE1 AS (
												SELECT
													SUM(ACCOUNT_ACCOUNT_REMAINDER.BORC - ACCOUNT_ACCOUNT_REMAINDER.ALACAK) AS BAKIYE,
													ACCOUNT_PLAN.ACCOUNT_CODE, 
													ACCOUNT_PLAN.ACCOUNT_CODE2, 
													ACCOUNT_PLAN.ACCOUNT_NAME,
													ACCOUNT_PLAN.ACCOUNT_ID,
													ACCOUNT_PLAN.SUB_ACCOUNT,
													ACCOUNT_PLAN.IFRS_CODE, 
													ACCOUNT_PLAN.IFRS_NAME
												FROM
													ACCOUNT_PLAN
													LEFT JOIN ACCOUNT_ACCOUNT_REMAINDER ON 
													(
														(ACCOUNT_PLAN.SUB_ACCOUNT =  1 AND ACCOUNT_ACCOUNT_REMAINDER.ACCOUNT_ID LIKE ACCOUNT_PLAN.ACCOUNT_CODE +'.%') OR
														(ACCOUNT_PLAN.SUB_ACCOUNT=0 AND ACCOUNT_ACCOUNT_REMAINDER.ACCOUNT_ID = ACCOUNT_PLAN.ACCOUNT_CODE)
													)
												WHERE
													ACCOUNT_PLAN.ACCOUNT_ID IS NOT NULL
													AND ACCOUNT_PLAN.ACCOUNT_NAME LIKE '%'+@account_code+'%'
												GROUP BY
													ACCOUNT_PLAN.ACCOUNT_CODE, 
													ACCOUNT_PLAN.ACCOUNT_CODE2, 
													ACCOUNT_PLAN.ACCOUNT_NAME,
													ACCOUNT_PLAN.SUB_ACCOUNT,
													ACCOUNT_PLAN.IFRS_CODE, 
													ACCOUNT_PLAN.IFRS_NAME,
													ACCOUNT_PLAN.ACCOUNT_ID
												),
				
											CTE2 AS (
													SELECT
														CTE1.*,
														ROW_NUMBER() OVER (ORDER BY ACCOUNT_CODE asc) AS RowNum,(SELECT COUNT(*) FROM CTE1) AS QUERY_COUNT
													FROM
														CTE1
												)
												SELECT
													CTE2.*
												FROM
													CTE2
												WHERE
													RowNum BETWEEN @startrow and @startrow+(@maxrows-1)
									END
							END
						ELSE
							BEGIN
								WITH CTE1 AS (
												SELECT
													SUM(ACCOUNT_ACCOUNT_REMAINDER.BORC - ACCOUNT_ACCOUNT_REMAINDER.ALACAK) AS BAKIYE,
													ACCOUNT_PLAN.ACCOUNT_CODE, 
													ACCOUNT_PLAN.ACCOUNT_CODE2, 
													ACCOUNT_PLAN.ACCOUNT_NAME,
													ACCOUNT_PLAN.ACCOUNT_ID,
													ACCOUNT_PLAN.SUB_ACCOUNT,
													ACCOUNT_PLAN.IFRS_CODE, 
													ACCOUNT_PLAN.IFRS_NAME
												FROM
													ACCOUNT_PLAN
													LEFT JOIN ACCOUNT_ACCOUNT_REMAINDER ON 
													(
														(ACCOUNT_PLAN.SUB_ACCOUNT = 1 AND ACCOUNT_ACCOUNT_REMAINDER.ACCOUNT_ID LIKE ACCOUNT_PLAN.ACCOUNT_CODE +'.%') OR
														(ACCOUNT_PLAN.SUB_ACCOUNT=0 AND ACCOUNT_ACCOUNT_REMAINDER.ACCOUNT_ID = ACCOUNT_PLAN.ACCOUNT_CODE)
													)
												WHERE
													ACCOUNT_PLAN.ACCOUNT_ID IS NOT NULL
												GROUP BY
													ACCOUNT_PLAN.ACCOUNT_CODE, 
													ACCOUNT_PLAN.ACCOUNT_CODE2, 
													ACCOUNT_PLAN.ACCOUNT_NAME,
													ACCOUNT_PLAN.SUB_ACCOUNT,
													ACCOUNT_PLAN.IFRS_CODE, 
													ACCOUNT_PLAN.IFRS_NAME,
													ACCOUNT_PLAN.ACCOUNT_ID
												),
				
										CTE2 AS (
													SELECT
														CTE1.*,
														ROW_NUMBER() OVER (ORDER BY ACCOUNT_CODE asc) AS RowNum,(SELECT COUNT(*) FROM CTE1) AS QUERY_COUNT
													FROM
														CTE1
												)
												SELECT
													CTE2.*
												FROM
													CTE2
												WHERE
													RowNum BETWEEN @startrow and @startrow+(@maxrows-1)
							END
					END
			
				ELSE
					BEGIN
						IF LEN (@account_code) > 0 
							BEGIN
								IF isnumeric(left(@account_code,3)) = 1 
									BEGIN
										WITH CTE1 AS (
												SELECT
													ACCOUNT_PLAN.ACCOUNT_CODE, 
													ACCOUNT_PLAN.ACCOUNT_CODE2, 
													ACCOUNT_PLAN.ACCOUNT_NAME,
													ACCOUNT_PLAN.ACCOUNT_ID,
													ACCOUNT_PLAN.SUB_ACCOUNT,
													ACCOUNT_PLAN.IFRS_CODE, 
													ACCOUNT_PLAN.IFRS_NAME
												FROM
													ACCOUNT_PLAN
												WHERE
													ACCOUNT_PLAN.ACCOUNT_ID IS NOT NULL
													AND ACCOUNT_PLAN.ACCOUNT_CODE LIKE ''+@account_code+'%'
												GROUP BY
													ACCOUNT_PLAN.ACCOUNT_CODE, 
													ACCOUNT_PLAN.ACCOUNT_CODE2, 
													ACCOUNT_PLAN.ACCOUNT_NAME,
													ACCOUNT_PLAN.SUB_ACCOUNT,
													ACCOUNT_PLAN.IFRS_CODE, 
													ACCOUNT_PLAN.IFRS_NAME,
													ACCOUNT_PLAN.ACCOUNT_ID
												),
				
											CTE2 AS (
													SELECT
														CTE1.*,
														ROW_NUMBER() OVER (ORDER BY ACCOUNT_CODE asc) AS RowNum,(SELECT COUNT(*) FROM CTE1) AS QUERY_COUNT
													FROM
														CTE1
												)
												SELECT
													CTE2.*
												FROM
													CTE2
												WHERE
													RowNum BETWEEN @startrow and @startrow+(@maxrows-1)
									END
								ELSE
									BEGIN
										WITH CTE1 AS (
												SELECT
													ACCOUNT_PLAN.ACCOUNT_CODE, 
													ACCOUNT_PLAN.ACCOUNT_CODE2, 
													ACCOUNT_PLAN.ACCOUNT_NAME,
													ACCOUNT_PLAN.ACCOUNT_ID,
													ACCOUNT_PLAN.SUB_ACCOUNT,
													ACCOUNT_PLAN.IFRS_CODE, 
													ACCOUNT_PLAN.IFRS_NAME
												FROM
													ACCOUNT_PLAN
												WHERE
													ACCOUNT_PLAN.ACCOUNT_ID IS NOT NULL
													AND ACCOUNT_PLAN.ACCOUNT_NAME LIKE '%'+@account_code+'%'
												GROUP BY
													ACCOUNT_PLAN.ACCOUNT_CODE, 
													ACCOUNT_PLAN.ACCOUNT_CODE2, 
													ACCOUNT_PLAN.ACCOUNT_NAME,
													ACCOUNT_PLAN.SUB_ACCOUNT,
													ACCOUNT_PLAN.IFRS_CODE, 
													ACCOUNT_PLAN.IFRS_NAME,
													ACCOUNT_PLAN.ACCOUNT_ID
												),
				
											CTE2 AS (
													SELECT
														CTE1.*,
														ROW_NUMBER() OVER (ORDER BY ACCOUNT_CODE asc) AS RowNum,(SELECT COUNT(*) FROM CTE1) AS QUERY_COUNT
													FROM
														CTE1
												)
												SELECT
													CTE2.*
												FROM
													CTE2
												WHERE
													RowNum BETWEEN @startrow and @startrow+(@maxrows-1)
									END
							END
						ELSE
							BEGIN
								WITH CTE1 AS (
												SELECT
													ACCOUNT_PLAN.ACCOUNT_CODE, 
													ACCOUNT_PLAN.ACCOUNT_CODE2, 
													ACCOUNT_PLAN.ACCOUNT_NAME,
													ACCOUNT_PLAN.ACCOUNT_ID,
													ACCOUNT_PLAN.SUB_ACCOUNT,
													ACCOUNT_PLAN.IFRS_CODE, 
													ACCOUNT_PLAN.IFRS_NAME
												FROM
													ACCOUNT_PLAN
												WHERE
													ACCOUNT_PLAN.ACCOUNT_ID IS NOT NULL
												GROUP BY
													ACCOUNT_PLAN.ACCOUNT_CODE, 
													ACCOUNT_PLAN.ACCOUNT_CODE2, 
													ACCOUNT_PLAN.ACCOUNT_NAME,
													ACCOUNT_PLAN.SUB_ACCOUNT,
													ACCOUNT_PLAN.IFRS_CODE, 
													ACCOUNT_PLAN.IFRS_NAME,
													ACCOUNT_PLAN.ACCOUNT_ID
												),
				
										CTE2 AS (
													SELECT
														CTE1.*,
														ROW_NUMBER() OVER (ORDER BY ACCOUNT_CODE asc) AS RowNum,(SELECT COUNT(*) FROM CTE1) AS QUERY_COUNT
													FROM
														CTE1
												)
												SELECT
													CTE2.*
												FROM
													CTE2
												WHERE
													RowNum BETWEEN @startrow and @startrow+(@maxrows-1)
							END
					END
			END

</cfquery><cfquery name="CREATE_PERIOD_SP" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE PROCEDURE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_ACTION] 
            @recordcount int ,
            @IS_WITH_SHIP BIT,
            @paper_product_id int, 
            @paper_action_id int,
            @paper_action_type int,
            @cost_money_system_2 NVARCHAR(50) 
        AS
        BEGIN
            
            SET NOCOUNT ON;
                        
                    IF @paper_action_type = 1
                        BEGIN 
                            IF (@recordcount = 1 )
                                BEGIN
                                    IF @IS_WITH_SHIP = 0
                                        BEGIN
                                                SELECT
                                                    SHIP.SHIP_ID,
                                                    INVOICE_ROW.INVOICE_ROW_ID ACTION_ROW_ID,
                                                    INVOICE.RECORD_DATE INSERT_DATE,
                                                    INVOICE.INVOICE_DATE PAPER_DATE,
                                                    ISNULL(SHIP.DELIVER_DATE,SHIP.SHIP_DATE) ACTION_DATE,
                                                    INVOICE_ROW.AMOUNT AMOUNT,
                                                    INVOICE_ROW.SPECT_VAR_ID SPEC_ID,
                                                    STOCKS.STOCK_ID,
                                                    STOCKS.PRODUCT_ID,
                                                    INVOICE.PROCESS_CAT,
                                                    INVOICE.DEPARTMENT_ID ACTION_DEPARTMENT_ID,
                                                    INVOICE.DEPARTMENT_LOCATION ACTION_LOCATION_ID,
                                                    INVOICE_ROW.DUE_DATE,
                                                    INVOICE.INVOICE_DATE
                                                FROM
                                                    SHIP,
                                                    INVOICE,
                                                    INVOICE_ROW,
                                                    #attributes.dsn#_product.STOCKS STOCKS,
                                                    #attributes.dsn#_product.PRODUCT PRODUCT
                                                WHERE
                                                    INVOICE.INVOICE_ID =@paper_action_id AND
                                                    INVOICE.INVOICE_ID=INVOICE_ROW.INVOICE_ID AND
                                                    INVOICE_ROW.SHIP_ID=SHIP.SHIP_ID AND
                                                    STOCKS.STOCK_ID=INVOICE_ROW.STOCK_ID AND
                                                    STOCKS.PRODUCT_ID=PRODUCT.PRODUCT_ID AND
                                                    PRODUCT.IS_COST=1
                                                ORDER BY
                                                    ISNULL(SHIP.DELIVER_DATE,SHIP.SHIP_DATE),
                                                    STOCKS.PRODUCT_ID,
                                                    INVOICE_ROW.INVOICE_ROW_ID
                                        END
        
                                    ELSE
                                        BEGIN
                                            SELECT
                                                SHIP.SHIP_ID,
                                                INVOICE_ROW.INVOICE_ROW_ID ACTION_ROW_ID,
                                                INVOICE.RECORD_DATE INSERT_DATE,
                                                INVOICE.INVOICE_DATE PAPER_DATE,
                                                ISNULL(SHIP.DELIVER_DATE,SHIP.SHIP_DATE) ACTION_DATE,
                                                INVOICE_ROW.AMOUNT AMOUNT,
                                                INVOICE_ROW.SPECT_VAR_ID SPEC_ID,
                                                STOCKS.STOCK_ID,
                                                STOCKS.PRODUCT_ID,
                                                INVOICE.PROCESS_CAT,
                                                INVOICE.DEPARTMENT_ID ACTION_DEPARTMENT_ID,
                                                INVOICE.DEPARTMENT_LOCATION ACTION_LOCATION_ID,
                                                INVOICE_ROW.DUE_DATE,
                                                INVOICE.INVOICE_DATE
                                            FROM
                                                SHIP,
                                                INVOICE,
                                                INVOICE_ROW,
                                                INVOICE_SHIPS,
                                                #attributes.dsn#_product.STOCKS STOCKS,
                                                #attributes.dsn#_product.PRODUCT PRODUCT
                                            WHERE
                                                INVOICE.INVOICE_ID = @paper_action_id AND
                                                INVOICE.INVOICE_ID=INVOICE_ROW.INVOICE_ID AND
                                                INVOICE_SHIPS.SHIP_ID=SHIP.SHIP_ID AND
                                                INVOICE_SHIPS.INVOICE_ID=INVOICE.INVOICE_ID AND
                                                STOCKS.STOCK_ID=INVOICE_ROW.STOCK_ID AND
                                                STOCKS.PRODUCT_ID=PRODUCT.PRODUCT_ID AND
                                                PRODUCT.IS_COST=1 
                                            ORDER BY
                                                ISNULL(SHIP.DELIVER_DATE,SHIP.SHIP_DATE),
                                                STOCKS.PRODUCT_ID,
                                                INVOICE_ROW.INVOICE_ROW_ID
                                        END
                                END
                            ELSE
                                BEGIN
                                        SELECT DISTINCT
                                            1 INV_CONT_COMP,
                                            SHIP.SHIP_ID,
                                            INVOICE.INVOICE_ID,
                                            INVOICE_ROW.INVOICE_ROW_ID ACTION_ROW_ID,
                                            INVOICE.RECORD_DATE INSERT_DATE,
                                            INVOICE.INVOICE_DATE PAPER_DATE,
                                            ISNULL(SHIP.DELIVER_DATE,SHIP.SHIP_DATE) ACTION_DATE,
                                            INVOICE_ROW.AMOUNT AMOUNT,
                                            INVOICE_ROW.SPECT_VAR_ID SPEC_ID,
                                            STOCKS.STOCK_ID,
                                            STOCKS.PRODUCT_ID,
                                            INVOICE.PROCESS_CAT,
                                            INVOICE.DEPARTMENT_ID ACTION_DEPARTMENT_ID,
                                            INVOICE.DEPARTMENT_LOCATION ACTION_LOCATION_ID,
                                            INVOICE_ROW.DUE_DATE,
                                            INVOICE.INVOICE_DATE
                                        FROM
                                            SHIP,
                                            INVOICE,
                                            INVOICE_ROW,
                                            INVOICE_SHIPS,
                                            INVOICE_CONTRACT_COMPARISON,
                                            #attributes.dsn#_product.STOCKS STOCKS,
                                            #attributes.dsn#_product.PRODUCT PRODUCT
                                        WHERE
                                            INVOICE_CONTRACT_COMPARISON.DIFF_INVOICE_ID =@paper_action_id AND
                                            INVOICE.INVOICE_ID=INVOICE_CONTRACT_COMPARISON.MAIN_INVOICE_ID AND
                                            INVOICE.INVOICE_ID=INVOICE_ROW.INVOICE_ID AND
                                            INVOICE_SHIPS.SHIP_ID=SHIP.SHIP_ID AND
                                            INVOICE_SHIPS.INVOICE_ID=INVOICE.INVOICE_ID AND
                                            STOCKS.STOCK_ID=INVOICE_ROW.STOCK_ID AND
                                            STOCKS.PRODUCT_ID=PRODUCT.PRODUCT_ID AND
                                            PRODUCT.IS_COST=1
        
                                        ORDER BY
                                            ISNULL(SHIP.DELIVER_DATE,SHIP.SHIP_DATE),
                                            STOCKS.PRODUCT_ID,
                                            INVOICE_ROW.INVOICE_ROW_ID
                                END
                        END
                    ELSE
                        IF  @paper_action_type = 2
                            BEGIN
                                SELECT
                                    SHIP.SHIP_ID,
                                    SHIP_ROW.SHIP_ROW_ID ACTION_ROW_ID,
                                    SHIP.RECORD_DATE INSERT_DATE,
                                    SHIP.SHIP_DATE PAPER_DATE,
                                    SHIP.DELIVER_DATE ACTION_DATE,
                                    SHIP_ROW.AMOUNT AMOUNT,
                                    SHIP_ROW.SPECT_VAR_ID SPEC_ID,
                                    STOCKS.STOCK_ID,
                                    STOCKS.PRODUCT_ID,
                                    SHIP.PROCESS_CAT,
                                    ISNULL(SHIP.DEPARTMENT_IN,SHIP.DELIVER_STORE_ID) ACTION_DEPARTMENT_ID,
                                    ISNULL(SHIP.LOCATION_IN,SHIP.LOCATION) ACTION_LOCATION_ID
                                FROM 
                                    SHIP,
                                    SHIP_ROW,
                                    #attributes.dsn#_product.STOCKS STOCKS,
                                    #attributes.dsn#_product.PRODUCT PRODUCT
                                WHERE
                                    SHIP.SHIP_ID = @paper_action_id AND
                                    SHIP.SHIP_ID = SHIP_ROW.SHIP_ID AND
                                    STOCKS.STOCK_ID = SHIP_ROW.STOCK_ID AND
                                    STOCKS.PRODUCT_ID = PRODUCT.PRODUCT_ID AND
                                    PRODUCT.IS_COST = 1
                                ORDER BY
                                    STOCKS.PRODUCT_ID,
                                    SHIP_ROW.SHIP_ROW_ID
                            END
                        ELSE
                            IF @paper_action_type = 3
                                BEGIN
                                    SELECT
                                        STOCK_FIS_ROW.STOCK_FIS_ROW_ID ACTION_ROW_ID,
                                        STOCK_FIS.RECORD_DATE INSERT_DATE,
                                        STOCK_FIS.FIS_DATE PAPER_DATE,
                                        STOCK_FIS.FIS_DATE ACTION_DATE,
                                        STOCK_FIS_ROW.AMOUNT AMOUNT,
                                        STOCK_FIS_ROW.SPECT_VAR_ID SPEC_ID,
                                        STOCKS.STOCK_ID,
                                        STOCKS.PRODUCT_ID,
                                        STOCK_FIS.PROCESS_CAT,
                                        STOCK_FIS.DEPARTMENT_IN ACTION_DEPARTMENT_ID,
                                        STOCK_FIS.LOCATION_IN ACTION_LOCATION_ID,
                                        ISNULL(STOCK_FIS_ROW.DUE_DATE,0) DUE_DATE,
                                        STOCK_FIS_ROW.RESERVE_DATE
                                    FROM 
                                        STOCK_FIS,
                                        STOCK_FIS_ROW,
                                        #attributes.dsn#_product.STOCKS STOCKS,
                                        #attributes.dsn#_product.PRODUCT PRODUCT
                                    WHERE
                                        STOCK_FIS.FIS_ID = @paper_action_id AND
                                        STOCK_FIS.FIS_ID = STOCK_FIS_ROW.FIS_ID AND
                                        STOCKS.STOCK_ID = STOCK_FIS_ROW.STOCK_ID AND
                                        STOCKS.PRODUCT_ID = PRODUCT.PRODUCT_ID AND
                                        PRODUCT.IS_COST=1 
                                    ORDER BY
                                        STOCKS.PRODUCT_ID,STOCK_FIS_ROW.STOCK_FIS_ROW_ID	
                                END
                            ELSE
                                IF @paper_action_type = 4
                                    BEGIN
                                            SELECT
                                                PORR.PR_ORDER_ROW_ID ACTION_ROW_ID,
                                                ISNULL(POR.UPDATE_DATE,POR.RECORD_DATE) INSERT_DATE,
                                                POR.FINISH_DATE PAPER_DATE,
                                                POR.FINISH_DATE ACTION_DATE,
                                                PORR.AMOUNT,
                                                PORR.SPECT_ID SPEC_ID,
                                                PORR.SPEC_MAIN_ID EXCHANGE_SPECT_MAIN_ID,
                                                (PORR.PURCHASE_NET_SYSTEM++ISNULL(PORR.PURCHASE_EXTRA_COST_SYSTEM,0)) PURCHASE_NET_SYSTEM,
                                                PORR.PURCHASE_NET_SYSTEM_MONEY,
                                                (ISNULL(PORR.LABOR_COST_SYSTEM,0)+ISNULL(PORR.STATION_REFLECTION_COST_SYSTEM,0)) AS PURCHASE_EXTRA_COST_SYSTEM,
                                                STOCKS.STOCK_ID,
                                                STOCKS.PRODUCT_ID,
                                                POR.PROCESS_ID PROCESS_CAT,
                                                POR.PRODUCTION_DEP_ID ACTION_DEPARTMENT_ID,
                                                POR.PRODUCTION_LOC_ID ACTION_LOCATION_ID
                                            FROM 
                                                PRODUCTION_ORDERS PO,
                                                PRODUCTION_ORDER_RESULTS POR,
                                                PRODUCTION_ORDER_RESULTS_ROW PORR,
                                                #attributes.dsn#_product.STOCKS STOCKS,
                                                #attributes.dsn#_product.PRODUCT PRODUCT
                                            WHERE
                                                POR.PR_ORDER_ID = @paper_action_id AND
                                                PO.P_ORDER_ID = POR.P_ORDER_ID AND
                                                POR.PR_ORDER_ID = PORR.PR_ORDER_ID AND
                                                STOCKS.STOCK_ID = PORR.STOCK_ID AND
                                                STOCKS.PRODUCT_ID = PRODUCT.PRODUCT_ID AND
                                                PRODUCT.IS_COST = 1 AND
                                                PORR.TYPE = 1 AND
                                                ISNULL(PORR.IS_FREE_AMOUNT,0) <> 1 AND
                                                PO.IS_DEMONTAJ <> 1
                                            ORDER BY
                                                STOCKS.PRODUCT_ID,PORR.PR_ORDER_ROW_ID
                                    END
                                ELSE
                                    IF @paper_action_type = 5 OR @paper_action_type = 7
                                        BEGIN
                                            IF @paper_action_type <> 5 
                                                BEGIN
                                                    SELECT
                                                        STOCK_EXCHANGE.EXCHANGE_NUMBER ACTION_NUMBER,
                                                        STOCK_EXCHANGE.STOCK_EXCHANGE_ID ACTION_ROW_ID,
                                                        STOCK_EXCHANGE.PROCESS_DATE INSERT_DATE,
                                                        STOCK_EXCHANGE.PROCESS_DATE PAPER_DATE,
                                                        STOCK_EXCHANGE.PROCESS_DATE ACTION_DATE,
                                                        STOCK_EXCHANGE.AMOUNT,
                                                        STOCK_EXCHANGE.SPECT_ID SPEC_ID,
                                                        STOCK_EXCHANGE.SPECT_MAIN_ID EXCHANGE_SPECT_MAIN_ID,
                                                        STOCK_EXCHANGE.STOCK_ID,
                                                        STOCK_EXCHANGE.PRODUCT_ID,
                                                        PRODUCT.PRODUCT_ID,
                                                        STOCK_EXCHANGE.PROCESS_CAT PROCESS_CAT,
                                                        STOCK_EXCHANGE.DEPARTMENT_ID ACTION_DEPARTMENT_ID,
                                                        STOCK_EXCHANGE.LOCATION_ID ACTION_LOCATION_ID
                                                    FROM
                                                        STOCK_EXCHANGE,
                                                        #attributes.dsn#_product.PRODUCT PRODUCT
                                                    WHERE
                                                        PRODUCT.PRODUCT_ID=STOCK_EXCHANGE.PRODUCT_ID AND
                                                            STOCK_EXCHANGE.EXCHANGE_NUMBER = (SELECT EXCHANGE_NUMBER FROM STOCK_EXCHANGE WHERE STOCK_EXCHANGE_ID = @paper_action_id)
                                                    ORDER BY
                                                        PRODUCT.PRODUCT_ID,STOCK_EXCHANGE.STOCK_EXCHANGE_ID
                                                END
                                            ELSE
                                                BEGIN
                                                    SELECT
                                                        STOCK_EXCHANGE.EXCHANGE_NUMBER ACTION_NUMBER,
                                                        STOCK_EXCHANGE.STOCK_EXCHANGE_ID ACTION_ROW_ID,
                                                        STOCK_EXCHANGE.PROCESS_DATE INSERT_DATE,
                                                        STOCK_EXCHANGE.PROCESS_DATE PAPER_DATE,
                                                        STOCK_EXCHANGE.PROCESS_DATE ACTION_DATE,
                                                        STOCK_EXCHANGE.AMOUNT,
                                                        STOCK_EXCHANGE.SPECT_ID SPEC_ID,
                                                        STOCK_EXCHANGE.SPECT_MAIN_ID EXCHANGE_SPECT_MAIN_ID,
                                                        STOCK_EXCHANGE.STOCK_ID,
                                                        STOCK_EXCHANGE.PRODUCT_ID,
                                                        PRODUCT.PRODUCT_ID,
                                                        STOCK_EXCHANGE.PROCESS_CAT PROCESS_CAT,
                                                        STOCK_EXCHANGE.DEPARTMENT_ID ACTION_DEPARTMENT_ID,
                                                        STOCK_EXCHANGE.LOCATION_ID ACTION_LOCATION_ID
                                                    FROM
                                                        STOCK_EXCHANGE,
                                                        #attributes.dsn#_product.PRODUCT PRODUCT
                                                    WHERE
                                                        PRODUCT.PRODUCT_ID=STOCK_EXCHANGE.PRODUCT_ID AND
                                                            STOCK_EXCHANGE.STOCK_EXCHANGE_ID =@paper_action_id
                                                    ORDER BY
                                                        PRODUCT.PRODUCT_ID,STOCK_EXCHANGE.STOCK_EXCHANGE_ID
                                                END	
                                        END
        
                                    ELSE
                                        IF @paper_action_type = 6 
                                            BEGIN
                                                    SELECT
                                                        EXPENSE_ITEMS_ROWS.EXP_ITEM_ROWS_ID ACTION_ROW_ID,
                                                        EXPENSE_ITEM_PLANS.RECORD_DATE INSERT_DATE,
                                                        EXPENSE_ITEM_PLANS.EXPENSE_DATE PAPER_DATE,
                                                        EXPENSE_ITEM_PLANS.EXPENSE_DATE ACTION_DATE,
                                                        EXPENSE_ITEMS_ROWS.QUANTITY AMOUNT,
                                                        NULL SPEC_ID,
                                                        NULL EXCHANGE_SPECT_MAIN_ID,
                                                        EXPENSE_ITEMS_ROWS.STOCK_ID,
                                                        EXPENSE_ITEMS_ROWS.PRODUCT_ID,
                                                        EXPENSE_ITEM_PLANS.PROCESS_CAT PROCESS_CAT,
                                                        EXPENSE_ITEM_PLANS.DEPARTMENT_ID ACTION_DEPARTMENT_ID,
                                                        EXPENSE_ITEM_PLANS.LOCATION_ID ACTION_LOCATION_ID
                                                    FROM
                                                        EXPENSE_ITEM_PLANS,
                                                        EXPENSE_ITEMS_ROWS,
                                                        #attributes.dsn#_product.PRODUCT PRODUCT
                                                    WHERE
                                                        EXPENSE_ITEM_PLANS.EXPENSE_ID = @paper_action_id AND
                                                        EXPENSE_ITEM_PLANS.EXPENSE_ID = EXPENSE_ITEMS_ROWS.EXPENSE_ID AND
                                                        PRODUCT.PRODUCT_ID = EXPENSE_ITEMS_ROWS.PRODUCT_ID 
                                                    ORDER BY
                                                        PRODUCT.PRODUCT_ID,EXPENSE_ITEMS_ROWS.EXP_ITEM_ROWS_ID
                                            END
                                        ELSE
                                            IF @paper_action_type = 8
                                            BEGIN
                                                    SELECT		
                                                        PRODUCT_COST_INVOICE.PRODUCT_COST_INVOICE_ID ACTION_ROW_ID,
                                                        PRODUCT_COST_INVOICE.RECORD_DATE INSERT_DATE,
                                                        PRODUCT_COST_INVOICE.COST_DATE PAPER_DATE,
                                                        PRODUCT_COST_INVOICE.COST_DATE ACTION_DATE,
                                                        PRODUCT_COST_INVOICE.AMOUNT,
                                                        NULL SPEC_ID,
                                                        PRODUCT_COST_INVOICE.SPECT_MAIN_ID EXCHANGE_SPECT_MAIN_ID,
                                                        PRODUCT_COST_INVOICE.PRODUCT_ID,
                                                        PRODUCT_COST_INVOICE.STOCK_ID,
                                                        INVOICE.PROCESS_CAT,
                                                        INVOICE.DEPARTMENT_ID ACTION_DEPARTMENT_ID,
                                                        INVOICE.DEPARTMENT_LOCATION ACTION_LOCATION_ID,
                                                        INVOICE.INVOICE_ID,
                                                        PRODUCT.PRODUCT_ID,
                                                        PRODUCT_COST_INVOICE.COST_TYPE_ID,
                                                        PRODUCT_COST_INVOICE.PRICE_PROTECTION_TYPE,
                                                        PRODUCT_COST_INVOICE.PRICE_PROTECTION,
                                                        PRODUCT_COST_INVOICE.PRICE_PROTECTION_MONEY,		
                                                        PRODUCT_COST_INVOICE.TOTAL_PRICE_PROTECTION,
                                                        ISNULL((
                                                            SELECT TOP 1 MONEY FROM #attributes.dsn#_#get_period.our_company_id#.PRODUCT_COST 
                                                            WHERE
                                                                PRODUCT_ID = PRODUCT_COST_INVOICE.PRODUCT_ID AND
                                                                START_DATE <= PRODUCT_COST_INVOICE.COST_DATE
                                                                AND	ISNULL(SPECT_MAIN_ID,0) = ISNULL(PRODUCT_COST_INVOICE.SPECT_MAIN_ID,0)
                                                            ORDER BY
                                                                START_DATE DESC,
                                                                RECORD_DATE DESC,
                                                                PRODUCT_COST_ID DESC
                                                        ),@cost_money_system_2) MONEY
                                                    FROM
                                                        PRODUCT_COST_INVOICE,
                                                        INVOICE,
                                                        #attributes.dsn#_product.PRODUCT PRODUCT
                                                    WHERE
                                                        PRODUCT_COST_INVOICE.INVOICE_ID = @paper_action_id AND
                                                        PRODUCT_COST_INVOICE.INVOICE_ID = INVOICE.INVOICE_ID AND
                                                        PRODUCT.PRODUCT_ID = PRODUCT_COST_INVOICE.PRODUCT_ID
                                                    ORDER BY
                                                        PRODUCT_COST_INVOICE.COST_DATE,
                                                        PRODUCT.PRODUCT_ID,PRODUCT_COST_INVOICE.PRODUCT_COST_INVOICE_ID
                                            END
        END

</cfquery><cfquery name="CREATE_PERIOD_SP" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE PROCEDURE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_ACTION_PRODUCT] 
            @recordcount int ,
            @IS_WITH_SHIP BIT,
            @paper_product_id int, 
            @paper_action_id int,
            @paper_action_type int,
            @cost_money_system_2 NVARCHAR(50) 
            AS
            BEGIN
            
            SET NOCOUNT ON;
                        
                    IF @paper_action_type = 1
                        BEGIN 
                            IF (@recordcount = 1 )
                                BEGIN
                                    IF @IS_WITH_SHIP = 0
                                        BEGIN
                                                SELECT
                                                    SHIP.SHIP_ID,
                                                    INVOICE_ROW.INVOICE_ROW_ID ACTION_ROW_ID,
                                                    INVOICE.RECORD_DATE INSERT_DATE,
                                                    INVOICE.INVOICE_DATE PAPER_DATE,
                                                    ISNULL(SHIP.DELIVER_DATE,SHIP.SHIP_DATE) ACTION_DATE,
                                                    INVOICE_ROW.AMOUNT AMOUNT,
                                                    INVOICE_ROW.SPECT_VAR_ID SPEC_ID,
                                                    STOCKS.STOCK_ID,
                                                    STOCKS.PRODUCT_ID,
                                                    INVOICE.PROCESS_CAT,
                                                    INVOICE.DEPARTMENT_ID ACTION_DEPARTMENT_ID,
                                                    INVOICE.DEPARTMENT_LOCATION ACTION_LOCATION_ID,
                                                    INVOICE_ROW.DUE_DATE,
                                                    INVOICE.INVOICE_DATE
                                                FROM
                                                    SHIP,
                                                    INVOICE,
                                                    INVOICE_ROW,
                                                    #attributes.dsn#_product.STOCKS STOCKS,
                                                    #attributes.dsn#_product.PRODUCT PRODUCT
                                                WHERE
                                                    INVOICE.INVOICE_ID =@paper_action_id AND
                                                    INVOICE.INVOICE_ID=INVOICE_ROW.INVOICE_ID AND
                                                    INVOICE_ROW.SHIP_ID=SHIP.SHIP_ID AND
                                                    STOCKS.STOCK_ID=INVOICE_ROW.STOCK_ID AND
                                                    STOCKS.PRODUCT_ID=PRODUCT.PRODUCT_ID AND
                                                    PRODUCT.IS_COST=1
                                                    AND PRODUCT.PRODUCT_ID =@paper_product_id
                                                ORDER BY
                                                    ISNULL(SHIP.DELIVER_DATE,SHIP.SHIP_DATE),
                                                    STOCKS.PRODUCT_ID,
                                                    INVOICE_ROW.INVOICE_ROW_ID
                                        END
            
                                    ELSE
                                        BEGIN
                                            SELECT
                                                SHIP.SHIP_ID,
                                                INVOICE_ROW.INVOICE_ROW_ID ACTION_ROW_ID,
                                                INVOICE.RECORD_DATE INSERT_DATE,
                                                INVOICE.INVOICE_DATE PAPER_DATE,
                                                ISNULL(SHIP.DELIVER_DATE,SHIP.SHIP_DATE) ACTION_DATE,
                                                INVOICE_ROW.AMOUNT AMOUNT,
                                                INVOICE_ROW.SPECT_VAR_ID SPEC_ID,
                                                STOCKS.STOCK_ID,
                                                STOCKS.PRODUCT_ID,
                                                INVOICE.PROCESS_CAT,
                                                INVOICE.DEPARTMENT_ID ACTION_DEPARTMENT_ID,
                                                INVOICE.DEPARTMENT_LOCATION ACTION_LOCATION_ID,
                                                INVOICE_ROW.DUE_DATE,
                                                INVOICE.INVOICE_DATE
                                            FROM
                                                SHIP,
                                                INVOICE,
                                                INVOICE_ROW,
                                                INVOICE_SHIPS,
                                                #attributes.dsn#_product.STOCKS STOCKS,
                                                #attributes.dsn#_product.PRODUCT PRODUCT
                                            WHERE
                                                INVOICE.INVOICE_ID = @paper_action_id AND
                                                INVOICE.INVOICE_ID=INVOICE_ROW.INVOICE_ID AND
                                                INVOICE_SHIPS.SHIP_ID=SHIP.SHIP_ID AND
                                                INVOICE_SHIPS.INVOICE_ID=INVOICE.INVOICE_ID AND
                                                STOCKS.STOCK_ID=INVOICE_ROW.STOCK_ID AND
                                                STOCKS.PRODUCT_ID=PRODUCT.PRODUCT_ID AND
                                                PRODUCT.IS_COST=1 AND 
                                                PRODUCT.PRODUCT_ID = @paper_product_id
                                            ORDER BY
                                                ISNULL(SHIP.DELIVER_DATE,SHIP.SHIP_DATE),
                                                STOCKS.PRODUCT_ID,
                                                INVOICE_ROW.INVOICE_ROW_ID
                                        END
                                END
                            ELSE
                                BEGIN
                                        SELECT DISTINCT
                                            1 INV_CONT_COMP,
                                            SHIP.SHIP_ID,
                                            INVOICE.INVOICE_ID,
                                            INVOICE_ROW.INVOICE_ROW_ID ACTION_ROW_ID,
                                            INVOICE.RECORD_DATE INSERT_DATE,
                                            INVOICE.INVOICE_DATE PAPER_DATE,
                                            ISNULL(SHIP.DELIVER_DATE,SHIP.SHIP_DATE) ACTION_DATE,
                                            INVOICE_ROW.AMOUNT AMOUNT,
                                            INVOICE_ROW.SPECT_VAR_ID SPEC_ID,
                                            STOCKS.STOCK_ID,
                                            STOCKS.PRODUCT_ID,
                                            INVOICE.PROCESS_CAT,
                                            INVOICE.DEPARTMENT_ID ACTION_DEPARTMENT_ID,
                                            INVOICE.DEPARTMENT_LOCATION ACTION_LOCATION_ID,
                                            INVOICE_ROW.DUE_DATE,
                                            INVOICE.INVOICE_DATE
                                        FROM
                                            SHIP,
                                            INVOICE,
                                            INVOICE_ROW,
                                            INVOICE_SHIPS,
                                            INVOICE_CONTRACT_COMPARISON,
                                            #attributes.dsn#_product.STOCKS STOCKS,
                                            #attributes.dsn#_product.PRODUCT PRODUCT
                                        WHERE
                                            INVOICE_CONTRACT_COMPARISON.DIFF_INVOICE_ID =@paper_action_id AND
                                            INVOICE.INVOICE_ID=INVOICE_CONTRACT_COMPARISON.MAIN_INVOICE_ID AND
                                            INVOICE.INVOICE_ID=INVOICE_ROW.INVOICE_ID AND
                                            INVOICE_SHIPS.SHIP_ID=SHIP.SHIP_ID AND
                                            INVOICE_SHIPS.INVOICE_ID=INVOICE.INVOICE_ID AND
                                            STOCKS.STOCK_ID=INVOICE_ROW.STOCK_ID AND
                                            STOCKS.PRODUCT_ID=PRODUCT.PRODUCT_ID AND
                                            PRODUCT.IS_COST=1 AND 
                                            PRODUCT.PRODUCT_ID =@paper_product_id
            
                                        ORDER BY
                                            ISNULL(SHIP.DELIVER_DATE,SHIP.SHIP_DATE),
                                            STOCKS.PRODUCT_ID,
                                            INVOICE_ROW.INVOICE_ROW_ID
                                END
                        END
                    ELSE
                        IF  @paper_action_type = 2
                            BEGIN
                                SELECT
                                    SHIP.SHIP_ID,
                                    SHIP_ROW.SHIP_ROW_ID ACTION_ROW_ID,
                                    SHIP.RECORD_DATE INSERT_DATE,
                                    SHIP.SHIP_DATE PAPER_DATE,
                                    SHIP.DELIVER_DATE ACTION_DATE,
                                    SHIP_ROW.AMOUNT AMOUNT,
                                    SHIP_ROW.SPECT_VAR_ID SPEC_ID,
                                    STOCKS.STOCK_ID,
                                    STOCKS.PRODUCT_ID,
                                    SHIP.PROCESS_CAT,
                                    ISNULL(SHIP.DEPARTMENT_IN,SHIP.DELIVER_STORE_ID) ACTION_DEPARTMENT_ID,
                                    ISNULL(SHIP.LOCATION_IN,SHIP.LOCATION) ACTION_LOCATION_ID
                                FROM 
                                    SHIP,
                                    SHIP_ROW,
                                    #attributes.dsn#_product.STOCKS STOCKS,
                                    #attributes.dsn#_product.PRODUCT PRODUCT
                                WHERE
                                    SHIP.SHIP_ID = @paper_action_id AND
                                    SHIP.SHIP_ID = SHIP_ROW.SHIP_ID AND
                                    STOCKS.STOCK_ID = SHIP_ROW.STOCK_ID AND
                                    STOCKS.PRODUCT_ID = PRODUCT.PRODUCT_ID AND
                                    PRODUCT.IS_COST = 1 AND 
                                    PRODUCT.PRODUCT_ID = @paper_product_id
                                ORDER BY
                                    STOCKS.PRODUCT_ID,
                                    SHIP_ROW.SHIP_ROW_ID
                            END
                        ELSE
                            IF @paper_action_type = 3
                                BEGIN
                                    SELECT
                                        STOCK_FIS_ROW.STOCK_FIS_ROW_ID ACTION_ROW_ID,
                                        STOCK_FIS.RECORD_DATE INSERT_DATE,
                                        STOCK_FIS.FIS_DATE PAPER_DATE,
                                        STOCK_FIS.FIS_DATE ACTION_DATE,
                                        STOCK_FIS_ROW.AMOUNT AMOUNT,
                                        STOCK_FIS_ROW.SPECT_VAR_ID SPEC_ID,
                                        STOCKS.STOCK_ID,
                                        STOCKS.PRODUCT_ID,
                                        STOCK_FIS.PROCESS_CAT,
                                        STOCK_FIS.DEPARTMENT_IN ACTION_DEPARTMENT_ID,
                                        STOCK_FIS.LOCATION_IN ACTION_LOCATION_ID,
                                        ISNULL(STOCK_FIS_ROW.DUE_DATE,0) DUE_DATE,
                                        STOCK_FIS_ROW.RESERVE_DATE
                                    FROM 
                                        STOCK_FIS,
                                        STOCK_FIS_ROW,
                                        #attributes.dsn#_product.STOCKS STOCKS,
                                        #attributes.dsn#_product.PRODUCT PRODUCT
                                    WHERE
                                        STOCK_FIS.FIS_ID = @paper_action_id AND
                                        STOCK_FIS.FIS_ID = STOCK_FIS_ROW.FIS_ID AND
                                        STOCKS.STOCK_ID = STOCK_FIS_ROW.STOCK_ID AND
                                        STOCKS.PRODUCT_ID = PRODUCT.PRODUCT_ID AND
                                        PRODUCT.IS_COST=1 
                                        AND PRODUCT.PRODUCT_ID = @paper_product_id
                                    ORDER BY
                                        STOCKS.PRODUCT_ID,STOCK_FIS_ROW.STOCK_FIS_ROW_ID	
                                END
                            ELSE
                                IF @paper_action_type = 4
                                    BEGIN
                                            SELECT
                                                PORR.PR_ORDER_ROW_ID ACTION_ROW_ID,
                                                ISNULL(POR.UPDATE_DATE,POR.RECORD_DATE) INSERT_DATE,
                                                POR.FINISH_DATE PAPER_DATE,
                                                POR.FINISH_DATE ACTION_DATE,
                                                PORR.AMOUNT,
                                                PORR.SPECT_ID SPEC_ID,
                                                PORR.SPEC_MAIN_ID EXCHANGE_SPECT_MAIN_ID,
                                                (PORR.PURCHASE_NET_SYSTEM++ISNULL(PORR.PURCHASE_EXTRA_COST_SYSTEM,0)) PURCHASE_NET_SYSTEM,
                                                PORR.PURCHASE_NET_SYSTEM_MONEY,
                                                (ISNULL(PORR.LABOR_COST_SYSTEM,0)+ISNULL(PORR.STATION_REFLECTION_COST_SYSTEM,0)) AS PURCHASE_EXTRA_COST_SYSTEM,
                                                STOCKS.STOCK_ID,
                                                STOCKS.PRODUCT_ID,
                                                POR.PROCESS_ID PROCESS_CAT,
                                                POR.PRODUCTION_DEP_ID ACTION_DEPARTMENT_ID,
                                                POR.PRODUCTION_LOC_ID ACTION_LOCATION_ID
                                            FROM 
                                                PRODUCTION_ORDERS PO,
                                                PRODUCTION_ORDER_RESULTS POR,
                                                PRODUCTION_ORDER_RESULTS_ROW PORR,
                                                #attributes.dsn#_product.STOCKS STOCKS,
                                                #attributes.dsn#_product.PRODUCT PRODUCT
                                            WHERE
                                                POR.PR_ORDER_ID = @paper_action_id AND
                                                PO.P_ORDER_ID = POR.P_ORDER_ID AND
                                                POR.PR_ORDER_ID = PORR.PR_ORDER_ID AND
                                                STOCKS.STOCK_ID = PORR.STOCK_ID AND
                                                STOCKS.PRODUCT_ID = PRODUCT.PRODUCT_ID AND
                                                PRODUCT.IS_COST = 1 AND
                                                PORR.TYPE = 1 AND
                                                ISNULL(PORR.IS_FREE_AMOUNT,0) <> 1 AND
                                                PO.IS_DEMONTAJ <> 1
                                                AND PRODUCT.PRODUCT_ID = @paper_product_id
                                            ORDER BY
                                                STOCKS.PRODUCT_ID,PORR.PR_ORDER_ROW_ID
                                    END
                                ELSE
                                    IF @paper_action_type = 5 OR @paper_action_type = 7
                                        BEGIN
                                            IF @paper_action_type <> 5 
                                                BEGIN
                                                    SELECT
                                                        STOCK_EXCHANGE.EXCHANGE_NUMBER ACTION_NUMBER,
                                                        STOCK_EXCHANGE.STOCK_EXCHANGE_ID ACTION_ROW_ID,
                                                        STOCK_EXCHANGE.PROCESS_DATE INSERT_DATE,
                                                        STOCK_EXCHANGE.PROCESS_DATE PAPER_DATE,
                                                        STOCK_EXCHANGE.PROCESS_DATE ACTION_DATE,
                                                        STOCK_EXCHANGE.AMOUNT,
                                                        STOCK_EXCHANGE.SPECT_ID SPEC_ID,
                                                        STOCK_EXCHANGE.SPECT_MAIN_ID EXCHANGE_SPECT_MAIN_ID,
                                                        STOCK_EXCHANGE.STOCK_ID,
                                                        STOCK_EXCHANGE.PRODUCT_ID,
                                                        PRODUCT.PRODUCT_ID,
                                                        STOCK_EXCHANGE.PROCESS_CAT PROCESS_CAT,
                                                        STOCK_EXCHANGE.DEPARTMENT_ID ACTION_DEPARTMENT_ID,
                                                        STOCK_EXCHANGE.LOCATION_ID ACTION_LOCATION_ID
                                                    FROM
                                                        STOCK_EXCHANGE,
                                                        #attributes.dsn#_product.PRODUCT PRODUCT
                                                    WHERE
                                                        PRODUCT.PRODUCT_ID=STOCK_EXCHANGE.PRODUCT_ID AND
                                                            STOCK_EXCHANGE.EXCHANGE_NUMBER = (SELECT EXCHANGE_NUMBER FROM STOCK_EXCHANGE WHERE STOCK_EXCHANGE_ID = @paper_action_id)
                                                            AND PRODUCT.PRODUCT_ID = @paper_product_id
                                                    ORDER BY
                                                        PRODUCT.PRODUCT_ID,STOCK_EXCHANGE.STOCK_EXCHANGE_ID
                                                END
                                            ELSE
                                                BEGIN
                                                    SELECT
                                                        STOCK_EXCHANGE.EXCHANGE_NUMBER ACTION_NUMBER,
                                                        STOCK_EXCHANGE.STOCK_EXCHANGE_ID ACTION_ROW_ID,
                                                        STOCK_EXCHANGE.PROCESS_DATE INSERT_DATE,
                                                        STOCK_EXCHANGE.PROCESS_DATE PAPER_DATE,
                                                        STOCK_EXCHANGE.PROCESS_DATE ACTION_DATE,
                                                        STOCK_EXCHANGE.AMOUNT,
                                                        STOCK_EXCHANGE.SPECT_ID SPEC_ID,
                                                        STOCK_EXCHANGE.SPECT_MAIN_ID EXCHANGE_SPECT_MAIN_ID,
                                                        STOCK_EXCHANGE.STOCK_ID,
                                                        STOCK_EXCHANGE.PRODUCT_ID,
                                                        PRODUCT.PRODUCT_ID,
                                                        STOCK_EXCHANGE.PROCESS_CAT PROCESS_CAT,
                                                        STOCK_EXCHANGE.DEPARTMENT_ID ACTION_DEPARTMENT_ID,
                                                        STOCK_EXCHANGE.LOCATION_ID ACTION_LOCATION_ID
                                                    FROM
                                                        STOCK_EXCHANGE,
                                                        #attributes.dsn#_product.PRODUCT PRODUCT
                                                    WHERE
                                                        PRODUCT.PRODUCT_ID=STOCK_EXCHANGE.PRODUCT_ID AND
                                                            STOCK_EXCHANGE.STOCK_EXCHANGE_ID =@paper_action_id
                                                        
                                                            AND PRODUCT.PRODUCT_ID = @paper_product_id
                                                    ORDER BY
                                                        PRODUCT.PRODUCT_ID,STOCK_EXCHANGE.STOCK_EXCHANGE_ID
                                                END	
                                        END
            
                                    ELSE
                                        IF @paper_action_type = 6 
                                            BEGIN
                                                    SELECT
                                                        EXPENSE_ITEMS_ROWS.EXP_ITEM_ROWS_ID ACTION_ROW_ID,
                                                        EXPENSE_ITEM_PLANS.RECORD_DATE INSERT_DATE,
                                                        EXPENSE_ITEM_PLANS.EXPENSE_DATE PAPER_DATE,
                                                        EXPENSE_ITEM_PLANS.EXPENSE_DATE ACTION_DATE,
                                                        EXPENSE_ITEMS_ROWS.QUANTITY AMOUNT,
                                                        NULL SPEC_ID,
                                                        NULL EXCHANGE_SPECT_MAIN_ID,
                                                        EXPENSE_ITEMS_ROWS.STOCK_ID,
                                                        EXPENSE_ITEMS_ROWS.PRODUCT_ID,
                                                        EXPENSE_ITEM_PLANS.PROCESS_CAT PROCESS_CAT,
                                                        EXPENSE_ITEM_PLANS.DEPARTMENT_ID ACTION_DEPARTMENT_ID,
                                                        EXPENSE_ITEM_PLANS.LOCATION_ID ACTION_LOCATION_ID
                                                    FROM
                                                        EXPENSE_ITEM_PLANS,
                                                        EXPENSE_ITEMS_ROWS,
                                                        #attributes.dsn#_product.PRODUCT PRODUCT
                                                    WHERE
                                                        EXPENSE_ITEM_PLANS.EXPENSE_ID = @paper_action_id AND
                                                        EXPENSE_ITEM_PLANS.EXPENSE_ID = EXPENSE_ITEMS_ROWS.EXPENSE_ID AND
                                                        PRODUCT.PRODUCT_ID = EXPENSE_ITEMS_ROWS.PRODUCT_ID 
                                                        AND PRODUCT.PRODUCT_ID = @paper_product_id
                                                    ORDER BY
                                                        PRODUCT.PRODUCT_ID,EXPENSE_ITEMS_ROWS.EXP_ITEM_ROWS_ID
                                            END
                                        ELSE
                                            IF @paper_action_type = 8
                                            BEGIN
                                                    SELECT		
                                                        PRODUCT_COST_INVOICE.PRODUCT_COST_INVOICE_ID ACTION_ROW_ID,
                                                        PRODUCT_COST_INVOICE.RECORD_DATE INSERT_DATE,
                                                        PRODUCT_COST_INVOICE.COST_DATE PAPER_DATE,
                                                        PRODUCT_COST_INVOICE.COST_DATE ACTION_DATE,
                                                        PRODUCT_COST_INVOICE.AMOUNT,
                                                        NULL SPEC_ID,
                                                        PRODUCT_COST_INVOICE.SPECT_MAIN_ID EXCHANGE_SPECT_MAIN_ID,
                                                        PRODUCT_COST_INVOICE.PRODUCT_ID,
                                                        PRODUCT_COST_INVOICE.STOCK_ID,
                                                        INVOICE.PROCESS_CAT,
                                                        INVOICE.DEPARTMENT_ID ACTION_DEPARTMENT_ID,
                                                        INVOICE.DEPARTMENT_LOCATION ACTION_LOCATION_ID,
                                                        INVOICE.INVOICE_ID,
                                                        PRODUCT.PRODUCT_ID,
                                                        PRODUCT_COST_INVOICE.COST_TYPE_ID,
                                                        PRODUCT_COST_INVOICE.PRICE_PROTECTION_TYPE,
                                                        PRODUCT_COST_INVOICE.PRICE_PROTECTION,
                                                        PRODUCT_COST_INVOICE.PRICE_PROTECTION_MONEY,		
                                                        PRODUCT_COST_INVOICE.TOTAL_PRICE_PROTECTION,
                                                        ISNULL((
                                                            SELECT TOP 1 MONEY FROM #attributes.dsn#_#get_period.our_company_id#.PRODUCT_COST 
                                                            WHERE
                                                                PRODUCT_ID = PRODUCT_COST_INVOICE.PRODUCT_ID AND
                                                                START_DATE <= PRODUCT_COST_INVOICE.COST_DATE
                                                                AND	ISNULL(SPECT_MAIN_ID,0) = ISNULL(PRODUCT_COST_INVOICE.SPECT_MAIN_ID,0)
                                                            ORDER BY
                                                                START_DATE DESC,
                                                                RECORD_DATE DESC,
                                                                PRODUCT_COST_ID DESC
                                                        ),@cost_money_system_2) MONEY
                                                    FROM
                                                        PRODUCT_COST_INVOICE,
                                                        INVOICE,
                                                        #attributes.dsn#_product.PRODUCT PRODUCT
                                                    WHERE
                                                        PRODUCT_COST_INVOICE.INVOICE_ID = @paper_action_id AND
                                                        PRODUCT_COST_INVOICE.INVOICE_ID = INVOICE.INVOICE_ID AND
                                                        PRODUCT.PRODUCT_ID = PRODUCT_COST_INVOICE.PRODUCT_ID
                                                        AND PRODUCT.PRODUCT_ID = @paper_product_id
                                                    ORDER BY
                                                        PRODUCT_COST_INVOICE.COST_DATE,
                                                        PRODUCT.PRODUCT_ID,PRODUCT_COST_INVOICE.PRODUCT_COST_INVOICE_ID
                                            END
            END

</cfquery><cfquery name="CREATE_PERIOD_SP" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE PROCEDURE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[get_mizan]
AS BEGIN
   	
   SELECT AC.CARD_TYPE_NO
      ,AC.BILL_NO
      ,'Yevmiye No:' + cast (BILL_NO AS NVARCHAR(50)) +'_____'+ cast(AC.ACTION_DATE  AS NVARCHAR(50)) AS Yevmiye
      ,AP.ACCOUNT_NAME
      ,'Mahsup Fiş No:'+ CAST (AC.CARD_TYPE_NO AS NVARCHAR(50)) AS Mahsup
      ,AC.ACTION_DATE
      ,ACR.ACCOUNT_ID
      ,B.BRANCH_NAME
      ,D.DEPARTMENT_HEAD
      ,PP.PROJECT_HEAD
      ,ACR.DETAIL
      ,CASE WHEN ACR.BA = 0 THEN AMOUNT END AS BORC
      ,CASE WHEN ACR.BA = 1 THEN AMOUNT END AS ALACAK
FROM   ACCOUNT_CARD AC
       JOIN ACCOUNT_CARD_ROWS ACR
            ON  ACR.CARD_ID = AC.CARD_ID
        LEFT JOIN #attributes.dsn#.BRANCH AS b
			ON	B.BRANCH_ID = ACR.ACC_BRANCH_ID
		LEFT JOIN #attributes.dsn#.DEPARTMENT AS d
			ON d.DEPARTMENT_ID = acr.ACC_DEPARTMENT_ID
		LEFT JOIN #attributes.dsn#.PRO_PROJECTS AS pp
			ON PP.PROJECT_ID = ACR.ACC_PROJECT_ID
		LEFT JOIN ACCOUNT_PLAN AS ap ON AP.ACCOUNT_CODE = ACR.ACCOUNT_ID

	END

</cfquery><cfquery name="CREATE_PERIOD_SP" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE PROCEDURE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_NETBOOK]
                @action_date datetime,			
                @process_date datetime,			
                @db_alias nvarchar(50)
            AS
            BEGIN
                            
                SET NOCOUNT ON;
                DECLARE @SQL_TEXT NVARCHAR(500);
                            
                IF LEN(@db_alias) > 0
                    BEGIN
                        IF @action_date IS NOT NULL
                            BEGIN
                                SET @SQL_TEXT = 'SELECT TOP 1 NETBOOK_ID FROM '+ @db_alias +'NETBOOKS WHERE STATUS = 1 AND (' + ''''+CONVERT(nvarchar(50),@action_date)+'''' + ' BETWEEN START_DATE AND FINISH_DATE OR ' + ''''+CONVERT(nvarchar(50),@process_date)+'''' + ' BETWEEN START_DATE AND FINISH_DATE)';
                            END
                        ELSE
                            BEGIN
                                SET @SQL_TEXT = 'SELECT TOP 1 NETBOOK_ID FROM '+ @db_alias +'NETBOOKS WHERE STATUS = 1 AND ' + ''''+CONVERT(nvarchar(50),@process_date)+'''' + ' BETWEEN START_DATE AND FINISH_DATE';
                            END
                    END
                            
                ELSE
                    BEGIN
                        IF @action_date IS NOT NULL
                            BEGIN
                                SET @SQL_TEXT = 'SELECT TOP 1 NETBOOK_ID FROM NETBOOKS WHERE STATUS = 1 AND (' + ''''+CONVERT(nvarchar(50),@action_date)+'''' + ' BETWEEN START_DATE AND FINISH_DATE OR ' + ''''+CONVERT(nvarchar(50),@process_date)+'''' + ' BETWEEN START_DATE AND FINISH_DATE)';
                            END
                        ELSE
                            BEGIN
                                SET @SQL_TEXT = 'SELECT TOP 1 NETBOOK_ID FROM NETBOOKS WHERE STATUS = 1 AND ' + ''''+CONVERT(nvarchar(50),@process_date)+'''' + ' BETWEEN START_DATE AND FINISH_DATE';
                            END
                    END
                            
                exec (@SQL_TEXT); 
            END

</cfquery><cfquery name="CREATE_PERIOD_SP" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE PROCEDURE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[GET_SHIP_TYPE]
            @action_id int
        AS
        BEGIN
        SET NOCOUNT ON;
                SELECT SHIP_TYPE FROM SHIP WHERE SHIP_ID = @action_id
        END

</cfquery><cfquery name="CREATE_PERIOD_SP" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE PROCEDURE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[get_stock_last_function]
                (
                    @stock_id_list nvarchar (max)
                )
            AS
            BEGIN 
        
                SELECT 
                    ROUND(SUM(REAL_STOCK),4) REAL_STOCK,
                    ROUND(SUM(PRODUCT_STOCK),4) PRODUCT_STOCK,
                    ROUND(SUM(PRODUCT_STOCK+RESERVED_STOCK),4) SALEABLE_STOCK,
                    ROUND(SUM(PURCHASE_ORDER_STOCK),4) PURCHASE_ORDER_STOCK,
                    PRODUCT_ID, 
                    STOCK_ID
                FROM
                (
                    SELECT
                        (SR.STOCK_IN - SR.STOCK_OUT) AS REAL_STOCK,
                        0 AS PRODUCT_STOCK,
                        0 AS RESERVED_STOCK,
                        0 AS PURCHASE_ORDER_STOCK,
                        SR.STOCK_ID,
                        SR.PRODUCT_ID
                    FROM
                        STOCKS_ROW SR
                    JOIN
                        fnSplit(@stock_id_list,',') AS TB1
                    ON 
                        TB1.item = SR.STOCK_ID
                UNION ALL
                    SELECT
                        0 AS REAL_STOCK,
                        (SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK,
                        0 AS RESERVED_STOCK,
                        0 AS PURCHASE_ORDER_STOCK,
                        SR.STOCK_ID,
                        SR.PRODUCT_ID
                    FROM
                        #attributes.dsn#.STOCKS_LOCATION SL,
                        STOCKS_ROW SR
                    JOIN
                        fnSplit(@stock_id_list,',') AS TB1
                    ON 
                        TB1.item = SR.STOCK_ID
                    WHERE
                        SR.STORE =SL.DEPARTMENT_ID
                        AND SR.STORE_LOCATION=SL.LOCATION_ID
                        AND SL.NO_SALE = 0
                UNION ALL
                    SELECT
                        0 AS REAL_STOCK,
                        0 AS PRODUCT_STOCK,
                        ((RESERVE_STOCK_OUT-STOCK_OUT)*-1) AS RESERVED_STOCK,
                        RESERVE_STOCK_IN AS PURCHASE_ORDER_STOCK,
                        ORR.STOCK_ID,
                        ORR.PRODUCT_ID
                    FROM
                        #attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR
                    JOIN
                        fnSplit(@stock_id_list,',') AS TB1
                    ON 
                        TB1.item = ORR.STOCK_ID
                        , 
                        #attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS
                    WHERE
                        ORDS.RESERVED = 1 AND 
                        ORDS.ORDER_STATUS = 1 AND	
                        ORR.ORDER_ID=ORDS.ORDER_ID AND 
                        ((RESERVE_STOCK_IN-STOCK_IN)>0 OR (RESERVE_STOCK_OUT-STOCK_OUT)>0)
                UNION ALL
                    SELECT
                        0 AS REAL_STOCK,
                        0 AS PRODUCT_STOCK,
                        (RESERVE_STOCK_IN-STOCK_IN) AS RESERVED_STOCK,
                        0 AS PURCHASE_ORDER_STOCK,
                        ORR.STOCK_ID,
                        ORR.PRODUCT_ID
                    FROM
                        #attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR
                    JOIN
                        fnSplit(@stock_id_list,',') AS TB1
                    ON 
                        TB1.item = ORR.STOCK_ID
                        , 
                        #attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS,
                        #attributes.dsn#.STOCKS_LOCATION SL
                    WHERE
                        ORDS.RESERVED = 1 AND 
                        ORDS.ORDER_STATUS = 1 AND	
                        ORDS.DELIVER_DEPT_ID =SL.DEPARTMENT_ID AND 
                        ORDS.LOCATION_ID=SL.LOCATION_ID AND 
                        SL.NO_SALE = 0	 AND 
                        ORR.ORDER_ID=ORDS.ORDER_ID AND 
                        (RESERVE_STOCK_IN-STOCK_IN)>0
                UNION ALL
                    SELECT
                        0 AS REAL_STOCK,
                        0 AS PRODUCT_STOCK,
                        ((RESERVE_STOCK_IN-STOCK_IN) + ((RESERVE_STOCK_OUT-STOCK_OUT)*-1)) AS RESERVED_STOCK,
                        0 AS PURCHASE_ORDER_STOCK,
                        ORR.STOCK_ID,
                        ORR.PRODUCT_ID
                    FROM
                        #attributes.dsn#_#get_period.our_company_id#.ORDER_ROW_RESERVED  ORR
                    JOIN
                        fnSplit(@stock_id_list,',') AS TB1
                    ON 
                        TB1.item = ORR.STOCK_ID
                    WHERE
                        ORDER_ID IS NULL
                        AND SHIP_ID IS NULL
                        AND INVOICE_ID IS NULL
                UNION ALL
                    SELECT
                        0 AS REAL_STOCK,
                        0 AS PRODUCT_STOCK,
                        (STOCK_ARTIR-STOCK_AZALT) AS RESERVED_STOCK,
                        0  AS PURCHASE_ORDER_STOCK,
                        STOCK_ID,
                        PRODUCT_ID
                    FROM
                        #attributes.dsn#_#get_period.our_company_id#.GET_PRODUCTION_RESERVED
                    JOIN
                        fnSplit(@stock_id_list,',') AS TB1
                    ON 
                        TB1.item = GET_PRODUCTION_RESERVED.STOCK_ID
                ) T1
                GROUP BY
                    PRODUCT_ID, 
                    STOCK_ID
            END;

</cfquery><cfquery name="CREATE_PERIOD_SP" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE PROCEDURE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[get_stock_last_function_with_product]
                (
                    @product_id_list nvarchar (max)
                )
            AS
            BEGIN 
                SELECT 
                    ROUND(SUM(REAL_STOCK),4) REAL_STOCK,
                    ROUND(SUM(PRODUCT_STOCK),4) PRODUCT_STOCK,
                    ROUND(SUM(PRODUCT_STOCK+RESERVED_STOCK),4) SALEABLE_STOCK,
                    ROUND(SUM(PURCHASE_ORDER_STOCK),4) PURCHASE_ORDER_STOCK,
                    PRODUCT_ID, 
                    STOCK_ID
                FROM
                (
                    SELECT
                        (STOCK_IN - STOCK_OUT) AS REAL_STOCK,
                        0 AS PRODUCT_STOCK,
                        0 AS RESERVED_STOCK,
                        0 AS PURCHASE_ORDER_STOCK,
                        STOCK_ID,
                        PRODUCT_ID
                    FROM
                        STOCKS_ROW
                    JOIN
                        fnSplit(@product_id_list,',') AS TB1
                    ON 
                        STOCKS_ROW.PRODUCT_ID =TB1.item
                UNION ALL
                    SELECT
                        0 AS REAL_STOCK,
                        (SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK,
                        0 AS RESERVED_STOCK,
                        0 AS PURCHASE_ORDER_STOCK,
                        SR.STOCK_ID,
                        SR.PRODUCT_ID
                    FROM
                        #attributes.dsn#.STOCKS_LOCATION SL,
                        STOCKS_ROW SR
                    JOIN
                        fnSplit(@product_id_list,',') AS TB1
                    ON 
                        SR.PRODUCT_ID =TB1.item
                    WHERE
                        SR.STORE =SL.DEPARTMENT_ID AND 
                        SR.STORE_LOCATION=SL.LOCATION_ID AND 
                        SL.NO_SALE = 0 
                        
                    UNION ALL
                    SELECT
                        0 AS REAL_STOCK,
                        0 AS PRODUCT_STOCK,

                        ((ORR.RESERVE_STOCK_OUT - ORR.STOCK_OUT)*-1) AS RESERVED_STOCK,
                        ORR.RESERVE_STOCK_IN AS PURCHASE_ORDER_STOCK,
                        ORR.STOCK_ID,
                        ORR.PRODUCT_ID

                    FROM
                        #attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR
                    JOIN
                        fnSplit(@product_id_list,',') AS TB1
                    ON 
                        ORR.PRODUCT_ID =TB1.item
                        , 
                        #attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS
                    WHERE
                        ORDS.RESERVED = 1 AND 
                        ORDS.ORDER_STATUS = 1 AND	
                        ORR.ORDER_ID = ORDS.ORDER_ID AND 
                        ((ORR.RESERVE_STOCK_IN - ORR.STOCK_IN)>0 OR (ORR.RESERVE_STOCK_OUT - ORR.STOCK_OUT)>0) 
                    UNION ALL
                    SELECT
                        0 AS REAL_STOCK,
                        0 AS PRODUCT_STOCK,
                        (ORR.RESERVE_STOCK_IN - ORR.STOCK_IN) AS RESERVED_STOCK,
                        0 AS PURCHASE_ORDER_STOCK,
                        ORR.STOCK_ID,
                        ORR.PRODUCT_ID
                    FROM
                        #attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR
                    JOIN
                        fnSplit(@product_id_list,',') AS TB1
                    ON 
                        ORR.PRODUCT_ID =TB1.item
                        , 
                        #attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS,
                        #attributes.dsn#.STOCKS_LOCATION SL
                    WHERE
                        ORDS.RESERVED = 1 AND 
                        ORDS.ORDER_STATUS = 1 AND	
                        ORDS.DELIVER_DEPT_ID =SL.DEPARTMENT_ID AND 
                        ORDS.LOCATION_ID = SL.LOCATION_ID AND 
                        SL.NO_SALE = 0	 AND 
                        ORR.ORDER_ID = ORDS.ORDER_ID AND 
                        (RESERVE_STOCK_IN-STOCK_IN)>0 
                    UNION ALL
                    SELECT
                        0 AS REAL_STOCK,
                        0 AS PRODUCT_STOCK,
                        ((RESERVE_STOCK_IN-STOCK_IN) + ((RESERVE_STOCK_OUT-STOCK_OUT)*-1)) AS RESERVED_STOCK,
                        0 AS PURCHASE_ORDER_STOCK,
                        STOCK_ID,
                        PRODUCT_ID
                    FROM
                        #attributes.dsn#_#get_period.our_company_id#.ORDER_ROW_RESERVED
                    JOIN
                        fnSplit(@product_id_list,',') AS TB1
                    ON 
                        ORDER_ROW_RESERVED.PRODUCT_ID =TB1.item
                    WHERE
                        ORDER_ID IS NULL AND 
                        SHIP_ID IS NULL AND 
                        INVOICE_ID IS NULL
                    UNION ALL
                    SELECT
                        0 AS REAL_STOCK,
                        0 AS PRODUCT_STOCK,
                        (STOCK_ARTIR-STOCK_AZALT) AS RESERVED_STOCK,
                        0 AS PURCHASE_ORDER_STOCK,
                        STOCK_ID,
                        PRODUCT_ID
                    FROM
                        #attributes.dsn#_#get_period.our_company_id#.GET_PRODUCTION_RESERVED
                    JOIN
                        fnSplit(@product_id_list,',') AS TB1
                    ON 
                        GET_PRODUCTION_RESERVED.PRODUCT_ID =TB1.item 
                    UNION ALL
                    SELECT
                        0 AS REAL_STOCK,
                        0 AS PRODUCT_STOCK,
                        -1*(STOCK_IN - SR.STOCK_OUT) AS RESERVED_STOCK,
                        0  AS PURCHASE_ORDER_STOCK,
                        SR.STOCK_ID,
                        SR.PRODUCT_ID
                    FROM
                        STOCKS_ROW SR
                    JOIN
                        fnSplit(@product_id_list,',') AS TB1
                    ON 
                        SR.PRODUCT_ID =TB1.item 
                        ,
                        #attributes.dsn#.STOCKS_LOCATION SL 
                    WHERE	
                        SR.STORE = SL.DEPARTMENT_ID AND
                        SR.STORE_LOCATION = SL.LOCATION_ID AND
                        ISNULL(SL.IS_SCRAP,0)=1
                ) T1
                GROUP BY
                    PRODUCT_ID, 
                    STOCK_ID
            END;

</cfquery><cfquery name="CREATE_PERIOD_SP" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE PROCEDURE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[get_stock_last_location_function]
                (
                    @stock_id_list nvarchar (max)
                )
            AS
            BEGIN 
            SELECT 
                SUM(REAL_STOCK) REAL_STOCK,
                SUM(PRODUCT_STOCK) PRODUCT_STOCK,
                SUM(RESERVED_STOCK) RESERVED_STOCK,
                SUM(PURCHASE_PROD_STOCK) PURCHASE_PROD_STOCK,
                SUM(RESERVED_PROD_STOCK) RESERVED_PROD_STOCK,
                SUM(PRODUCT_STOCK+RESERVED_STOCK) SALEABLE_STOCK,
                SUM(RESERVE_SALE_ORDER_STOCK) RESERVE_SALE_ORDER_STOCK,
                SUM(NOSALE_STOCK) NOSALE_STOCK,
                SUM(BELONGTO_INSTITUTION_STOCK) BELONGTO_INSTITUTION_STOCK,
                SUM(RESERVE_PURCHASE_ORDER_STOCK) PURCHASE_ORDER_STOCK,
                SUM(PRODUCTION_ORDER_STOCK) PRODUCTION_ORDER_STOCK,
                SUM(NOSALE_RESERVED_STOCK) AS NOSALE_RESERVED_STOCK,
                PRODUCT_ID, 
                STOCK_ID,
                DEPARTMENT_ID,
                LOCATION_ID
            FROM
            (
                SELECT
                    (SR.STOCK_IN - SR.STOCK_OUT) AS REAL_STOCK,
                    0 AS PRODUCT_STOCK,
                    0 AS RESERVED_STOCK,
                    0 AS PURCHASE_PROD_STOCK,
                    0 AS RESERVED_PROD_STOCK,
                    0 AS RESERVE_SALE_ORDER_STOCK,
                    0 AS NOSALE_STOCK, 
                    0 AS BELONGTO_INSTITUTION_STOCK,
                    0 AS RESERVE_PURCHASE_ORDER_STOCK,
                    0 AS PRODUCTION_ORDER_STOCK,
                    0 AS NOSALE_RESERVED_STOCK,
                    SR.STOCK_ID,
                    SR.PRODUCT_ID,
                    SR.STORE AS DEPARTMENT_ID,
                    SR.STORE_LOCATION AS LOCATION_ID
                FROM
                    STOCKS_ROW SR WITH (NOLOCK)
                JOIN
                    fnSplit(@stock_id_list,',') AS TB1
                ON 
                    TB1.item = SR.STOCK_ID
                UNION ALL
                SELECT
                    (SR.STOCK_IN - SR.STOCK_OUT) AS REAL_STOCK,
                    0 AS PRODUCT_STOCK,
                    0 AS RESERVED_STOCK,
                    0 AS PURCHASE_PROD_STOCK,
                    0 AS RESERVED_PROD_STOCK,
                    0 AS RESERVE_SALE_ORDER_STOCK,
                    0 AS NOSALE_STOCK, 
                    0 AS BELONGTO_INSTITUTION_STOCK,
                    0 AS RESERVE_PURCHASE_ORDER_STOCK,
                    0 AS PRODUCTION_ORDER_STOCK,
                    0 AS NOSALE_RESERVED_STOCK,
                    SR.STOCK_ID,
                    SR.PRODUCT_ID,
                    -1 AS DEPARTMENT_ID,
                    -1 AS LOCATION_ID
                FROM
                    STOCKS_ROW SR WITH (NOLOCK)
                JOIN
                    fnSplit(@stock_id_list,',') AS TB1
                ON 
                    TB1.item = SR.STOCK_ID
                WHERE
                    UPD_ID IS NULL 
                UNION ALL
                SELECT
                    0 AS REAL_STOCK,
                    (SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK,
                    0 AS RESERVED_STOCK,
                    0 AS PURCHASE_PROD_STOCK,
                    0 AS RESERVED_PROD_STOCK,
                    0 AS RESERVE_SALE_ORDER_STOCK,
                    0 AS NOSALE_STOCK, 
                    0 AS BELONGTO_INSTITUTION_STOCK,
                    0 AS RESERVE_PURCHASE_ORDER_STOCK,
                    0 AS PRODUCTION_ORDER_STOCK,
                    0 AS NOSALE_RESERVED_STOCK,
                    SR.STOCK_ID,
                    SR.PRODUCT_ID,
                    SR.STORE AS DEPARTMENT_ID,
                    SR.STORE_LOCATION AS LOCATION_ID
                FROM
                    #attributes.dsn#.STOCKS_LOCATION SL WITH (NOLOCK),
                    STOCKS_ROW SR WITH (NOLOCK)
                JOIN
                    fnSplit(@stock_id_list,',') AS TB1
                ON 
                    TB1.item = SR.STOCK_ID
                WHERE
                    SR.STORE =SL.DEPARTMENT_ID AND 
                    SR.STORE_LOCATION=SL.LOCATION_ID AND 
                    SL.NO_SALE = 0 
                UNION ALL
                SELECT
                    0 AS REAL_STOCK,
                    -1*(SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK,
                    0 AS RESERVED_STOCK,
                    0 AS PURCHASE_PROD_STOCK,
                    0 AS RESERVED_PROD_STOCK,
                    0 AS RESERVE_SALE_ORDER_STOCK,
                    0 AS NOSALE_STOCK, 
                    0 AS BELONGTO_INSTITUTION_STOCK,
                    0 AS RESERVE_PURCHASE_ORDER_STOCK,
                    0 AS PRODUCTION_ORDER_STOCK,
                    0 AS NOSALE_RESERVED_STOCK,
                    SR.STOCK_ID,
                    SR.PRODUCT_ID,
                    SR.STORE AS DEPARTMENT_ID,
                    SR.STORE_LOCATION AS LOCATION_ID
                FROM
                    STOCKS_ROW SR WITH (NOLOCK)
                JOIN
                    fnSplit(@stock_id_list,',') AS TB1
                ON 
                    TB1.item = SR.STOCK_ID	
                    ,
                    #attributes.dsn#.STOCKS_LOCATION SL WITH (NOLOCK) 
                WHERE	
                    SR.STORE = SL.DEPARTMENT_ID AND
                    SR.STORE_LOCATION = SL.LOCATION_ID AND
                    ISNULL(SL.IS_SCRAP,0)=1 
                UNION ALL
                SELECT
                    0 AS REAL_STOCK,
                    0 AS PRODUCT_STOCK,
                    0 AS RESERVED_STOCK,
                    0 AS PURCHASE_PROD_STOCK,
                    0 AS RESERVED_PROD_STOCK,
                    0 AS RESERVE_SALE_ORDER_STOCK,
                    (SR.STOCK_IN - SR.STOCK_OUT) AS NOSALE_STOCK,
                    0 AS BELONGTO_INSTITUTION_STOCK,
                    0 AS RESERVE_PURCHASE_ORDER_STOCK,
                    0 AS PRODUCTION_ORDER_STOCK,
                    0 AS NOSALE_RESERVED_STOCK,
                    SR.STOCK_ID,
                    SR.PRODUCT_ID,
                    SR.STORE AS DEPARTMENT_ID,
                    SR.STORE_LOCATION AS LOCATION_ID
                FROM
                    #attributes.dsn#.STOCKS_LOCATION SL WITH (NOLOCK),
                    STOCKS_ROW SR WITH (NOLOCK)
                JOIN
                    fnSplit(@stock_id_list,',') AS TB1
                ON 
                    TB1.item = SR.STOCK_ID	
                WHERE
                    SR.STORE =SL.DEPARTMENT_ID AND 
                    SR.STORE_LOCATION=SL.LOCATION_ID AND 
                    SL.NO_SALE =1
                UNION ALL
                SELECT
                    0 AS REAL_STOCK,
                    0 AS PRODUCT_STOCK,
                    0 AS RESERVED_STOCK,
                    0 AS PURCHASE_PROD_STOCK,
                    0 AS RESERVED_PROD_STOCK,
                    0 AS RESERVE_SALE_ORDER_STOCK,
                    0 AS NOSALE_STOCK, 
                    (SR.STOCK_IN - SR.STOCK_OUT) AS BELONGTO_INSTITUTION_STOCK,
                    0 AS RESERVE_PURCHASE_ORDER_STOCK,
                    0 AS PRODUCTION_ORDER_STOCK,
                    0 AS NOSALE_RESERVED_STOCK,
                    SR.STOCK_ID,
                    SR.PRODUCT_ID,
                    SR.STORE AS DEPARTMENT_ID,
                    SR.STORE_LOCATION AS LOCATION_ID
                FROM
                    #attributes.dsn#.STOCKS_LOCATION SL WITH (NOLOCK),
                    STOCKS_ROW SR WITH (NOLOCK)
                JOIN
                    fnSplit(@stock_id_list,',') AS TB1
                ON 
                    TB1.item = SR.STOCK_ID
                WHERE
                    SR.STORE =SL.DEPARTMENT_ID AND 
                    SR.STORE_LOCATION=SL.LOCATION_ID AND 
                    SL.BELONGTO_INSTITUTION =1
                UNION ALL
                SELECT
                    0 AS REAL_STOCK,
                    0 AS PRODUCT_STOCK,
                    ((RESERVE_STOCK_OUT-STOCK_OUT)*-1) AS RESERVED_STOCK,
                    0 AS PURCHASE_PROD_STOCK,
                    0 AS RESERVED_PROD_STOCK,
                    (RESERVE_STOCK_OUT-STOCK_OUT) AS RESERVE_SALE_ORDER_STOCK,
                    0 AS NOSALE_STOCK,
                    0 AS BELONGTO_INSTITUTION_STOCK,
                    (RESERVE_STOCK_IN-STOCK_IN) AS RESERVE_PURCHASE_ORDER_STOCK,
                    0 AS PRODUCTION_ORDER_STOCK,
                    0 AS NOSALE_RESERVED_STOCK,
                    ORR.STOCK_ID,
                    ORR.PRODUCT_ID,
                    ORDS.DELIVER_DEPT_ID AS DEPARTMENT_ID,
                    ORDS.LOCATION_ID AS LOCATION_ID
                FROM
                    #attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR WITH (NOLOCK)
                JOIN
                    fnSplit(@stock_id_list,',') AS TB1
                ON 
                    TB1.item = ORR.STOCK_ID
                    , 
                    #attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS WITH (NOLOCK)
                WHERE
                    ORDS.RESERVED = 1 AND 
                    ORDS.ORDER_STATUS = 1 AND	
                    ORDS.DELIVER_DEPT_ID IS NOT NULL AND
                    ORDS.LOCATION_ID IS NOT NULL AND
                    ORR.ORDER_ID = ORDS.ORDER_ID AND 
                    ((RESERVE_STOCK_IN-STOCK_IN)>0 OR (RESERVE_STOCK_OUT-STOCK_OUT)>0) 
                UNION ALL
                SELECT
                    0 AS REAL_STOCK,
                    0 AS PRODUCT_STOCK,
                    (RESERVE_STOCK_IN-STOCK_IN) AS RESERVED_STOCK,
                    0 AS PURCHASE_PROD_STOCK,
                    0 AS RESERVED_PROD_STOCK,
                    0 AS RESERVE_SALE_ORDER_STOCK,
                    0 AS NOSALE_STOCK,
                    0 AS BELONGTO_INSTITUTION_STOCK,
                    0 AS RESERVE_PURCHASE_ORDER_STOCK,
                    0 AS PRODUCTION_ORDER_STOCK,
                    0 AS NOSALE_RESERVED_STOCK,
                    ORR.STOCK_ID,
                    ORR.PRODUCT_ID,
                    ORDS.DELIVER_DEPT_ID AS DEPARTMENT_ID,
                    ORDS.LOCATION_ID AS LOCATION_ID
                FROM
                    #attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR WITH (NOLOCK)
                JOIN
                    fnSplit(@stock_id_list,',') AS TB1
                ON 
                    TB1.item = ORR.STOCK_ID	
                    , 
                    #attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS WITH (NOLOCK),
                    #attributes.dsn#.STOCKS_LOCATION SL WITH (NOLOCK)
                WHERE
                    ORDS.RESERVED = 1 AND 
                    ORDS.ORDER_STATUS = 1 AND
                    ORDS.DELIVER_DEPT_ID = SL.DEPARTMENT_ID AND
                    ORDS.LOCATION_ID = SL.LOCATION_ID AND
                    SL.NO_SALE=0 AND
                    ORDS.PURCHASE_SALES=0 AND
                    ORDS.ORDER_ZONE=0 AND
                    ORR.ORDER_ID = ORDS.ORDER_ID AND 
                    (RESERVE_STOCK_IN-STOCK_IN)>0 
                UNION ALL
                SELECT
                    0 AS REAL_STOCK,
                    0 AS PRODUCT_STOCK,
                    0 AS RESERVED_STOCK,
                    0 AS PURCHASE_PROD_STOCK,
                    0 AS RESERVED_PROD_STOCK,
                    0 AS RESERVE_SALE_ORDER_STOCK,
                    0 AS NOSALE_STOCK,
                    0 AS BELONGTO_INSTITUTION_STOCK,
                    0 AS RESERVE_PURCHASE_ORDER_STOCK,
                    0 AS PRODUCTION_ORDER_STOCK,
                    (RESERVE_STOCK_IN-STOCK_IN) AS NOSALE_RESERVED_STOCK,
                    ORR.STOCK_ID,
                    ORR.PRODUCT_ID,
                    ORDS.DELIVER_DEPT_ID AS DEPARTMENT_ID,
                    ORDS.LOCATION_ID AS LOCATION_ID
                FROM
                    #attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR WITH (NOLOCK)
                JOIN
                    fnSplit(@stock_id_list,',') AS TB1
                ON 
                    TB1.item = ORR.STOCK_ID
                    , 
                    #attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS WITH (NOLOCK),
                    #attributes.dsn#.STOCKS_LOCATION SL WITH (NOLOCK)
                WHERE
                    ORDS.RESERVED = 1 AND 
                    ORDS.ORDER_STATUS = 1 AND	
                    ORDS.DELIVER_DEPT_ID IS NOT NULL AND
                    ORDS.LOCATION_ID IS NOT NULL AND
                    ORDS.DELIVER_DEPT_ID = SL.DEPARTMENT_ID AND
                    ORDS.LOCATION_ID = SL.LOCATION_ID AND
                    SL.NO_SALE = 1 AND
                    ORDS.PURCHASE_SALES = 0 AND
                    ORDS.ORDER_ZONE = 0 AND
                    ORR.ORDER_ID = ORDS.ORDER_ID AND 
                    (RESERVE_STOCK_IN-STOCK_IN)>0 
                UNION ALL
                SELECT
                        0 AS REAL_STOCK,
                        0 AS PRODUCT_STOCK,
                        (STOCK_ARTIR-STOCK_AZALT) AS RESERVED_STOCK,
                        STOCK_ARTIR AS PURCHASE_PROD_STOCK,
                        STOCK_AZALT AS RESERVED_PROD_STOCK,
                        0 AS RESERVE_SALE_ORDER_STOCK,
                        0 AS NOSALE_STOCK,
                        0 AS BELONGTO_INSTITUTION_STOCK,
                        0 AS RESERVE_PURCHASE_ORDER_STOCK,
                        (STOCK_ARTIR-STOCK_AZALT) AS PRODUCTION_ORDER_STOCK,
                        0 AS NOSALE_RESERVED_STOCK,
                        STOCK_ID,
                        PRODUCT_ID,
                        DEPARTMENT_ID,
                        LOCATION_ID
                    FROM
                        #attributes.dsn#_#get_period.our_company_id#.GET_PRODUCTION_RESERVED_LOCATION WITH (NOLOCK)
                    JOIN
                        fnSplit(@stock_id_list,',') AS TB1
                    ON 
                        TB1.item = GET_PRODUCTION_RESERVED_LOCATION.STOCK_ID
            ) T1
            GROUP BY
                PRODUCT_ID, 
                STOCK_ID,
                DEPARTMENT_ID,
                LOCATION_ID
            
            END;

</cfquery><cfquery name="CREATE_PERIOD_SP" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE PROCEDURE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[get_stock_last_spect_location_function]
                (
                    @stock_id_list nvarchar (max)
                )
            AS
            BEGIN 
        
                SELECT
                    SUM(REAL_STOCK) REAL_STOCK,
                    SUM(PRODUCT_STOCK) PRODUCT_STOCK,
                    SUM(PRODUCT_STOCK+RESERVED_STOCK) SALEABLE_STOCK,
                    SUM(PURCHASE_ORDER_STOCK) PURCHASE_ORDER_STOCK,
                    PRODUCT_ID,
                    STOCK_ID,
                    SPECT_MAIN_ID,
                    (SELECT SM.SPECT_MAIN_NAME FROM #attributes.dsn#_#get_period.our_company_id#.SPECT_MAIN SM WITH (NOLOCK) WHERE SM.SPECT_MAIN_ID = T1.SPECT_MAIN_ID) SPECT_MAIN_NAME,
                    DEPARTMENT_ID,
                    LOCATION_ID
                FROM
                (
                    SELECT
                        (STOCK_IN - STOCK_OUT) AS REAL_STOCK,
                        0 AS PRODUCT_STOCK,
                        0 AS RESERVED_STOCK,
                        0 AS SALE_ORDER_STOCK,
                        0 AS PURCHASE_ORDER_STOCK,
                        SR.PRODUCT_ID, 
                        SR.STOCK_ID,
                        SR.SPECT_VAR_ID SPECT_MAIN_ID,
                        SR.STORE AS DEPARTMENT_ID,
                        SR.STORE_LOCATION AS LOCATION_ID
                    FROM			
                        STOCKS_ROW SR WITH (NOLOCK)
                    JOIN
                        fnSplit(@stock_id_list,',') AS TB1
                    ON 
                        TB1.item = SR.STOCK_ID
                    UNION ALL
                    SELECT
                        0 AS REAL_STOCK,
                        (STOCK_IN - STOCK_OUT) AS PRODUCT_STOCK,
                        0 AS RESERVED_STOCK,
                        0 AS SALE_ORDER_STOCK,
                        0 AS PURCHASE_ORDER_STOCK,
                        SR.PRODUCT_ID, 
                        SR.STOCK_ID,
                        SR.SPECT_VAR_ID SPECT_MAIN_ID,
                        SR.STORE AS DEPARTMENT_ID,
                        SR.STORE_LOCATION AS LOCATION_ID
                    FROM			
                        #attributes.dsn#.STOCKS_LOCATION SL WITH (NOLOCK),
                        STOCKS_ROW SR WITH (NOLOCK)
                    JOIN
                        fnSplit(@stock_id_list,',') AS TB1
                    ON 
                        TB1.item = SR.STOCK_ID
                    WHERE			
                        SR.STORE =SL.DEPARTMENT_ID AND 
                        SR.STORE_LOCATION=SL.LOCATION_ID AND 
                        SL.NO_SALE = 0 
                    UNION ALL
                    SELECT
                        0 AS REAL_STOCK,
                        -1*(STOCK_IN - STOCK_OUT) AS PRODUCT_STOCK,
                        0 AS RESERVED_STOCK,
                        0 AS SALE_ORDER_STOCK,
                        0 AS PURCHASE_ORDER_STOCK,
                        SR.PRODUCT_ID, 
                        SR.STOCK_ID,
                        SR.SPECT_VAR_ID SPECT_MAIN_ID,
                        SR.STORE AS DEPARTMENT_ID,
                        SR.STORE_LOCATION AS LOCATION_ID
                    FROM
                        STOCKS_ROW SR WITH (NOLOCK)
                    JOIN
                        fnSplit(@stock_id_list,',') AS TB1
                    ON 
                        TB1.item = SR.STOCK_ID	
                        ,
                        #attributes.dsn#.STOCKS_LOCATION SL WITH (NOLOCK)
                    WHERE	
                        SR.STORE = SL.DEPARTMENT_ID AND
                        SR.STORE_LOCATION = SL.LOCATION_ID AND
                        ISNULL(SL.IS_SCRAP,0)=1	
                    UNION ALL
                    SELECT
                        0 AS REAL_STOCK,
                        0 AS PRODUCT_STOCK,
                        ((ORR.RESERVE_STOCK_OUT-ORR.STOCK_OUT)*-1) AS RESERVED_STOCK,
                        0 AS SALE_ORDER_STOCK,
                        ORR.RESERVE_STOCK_IN AS PURCHASE_ORDER_STOCK,
                        ORR.PRODUCT_ID, 
                        ORR.STOCK_ID,
                        (SELECT SPECT_MAIN_ID FROM #attributes.dsn#_#get_period.our_company_id#.SPECTS WITH (NOLOCK) WHERE SPECT_VAR_ID = ORR.SPECT_VAR_ID) SPECT_MAIN_ID,
                        ORDS.DELIVER_DEPT_ID AS DEPARTMENT_ID,
                        ORDS.LOCATION_ID AS LOCATION_ID
                    FROM
                        #attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED  ORR WITH (NOLOCK)
                    JOIN
                        fnSplit(@stock_id_list,',') AS TB1
                    ON 
                        TB1.item = ORR.STOCK_ID	
                        , 
                        #attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS WITH (NOLOCK)
                    WHERE
                        ORDS.RESERVED = 1 AND 
                        ORDS.ORDER_STATUS = 1 AND	
                        ORR.ORDER_ID = ORDS.ORDER_ID AND
                        ((ORR.RESERVE_STOCK_IN-ORR.STOCK_IN)>0 OR (ORR.RESERVE_STOCK_OUT-ORR.STOCK_OUT)>0)
                    UNION ALL
                    SELECT
                        0 AS REAL_STOCK,
                        0 AS PRODUCT_STOCK,
                        (ORR.RESERVE_STOCK_IN-ORR.STOCK_IN) AS RESERVED_STOCK,
                        0 AS SALE_ORDER_STOCK,
                        0 AS PURCHASE_ORDER_STOCK,
                        ORR.PRODUCT_ID, 
                        ORR.STOCK_ID,
                        (SELECT SPECT_MAIN_ID FROM #attributes.dsn#_#get_period.our_company_id#.SPECTS WITH (NOLOCK) WHERE SPECT_VAR_ID = ORR.SPECT_VAR_ID) SPECT_MAIN_ID,
                        ORDS.DELIVER_DEPT_ID AS DEPARTMENT_ID,
                        ORDS.LOCATION_ID AS LOCATION_ID
                    FROM
                        #attributes.dsn#.STOCKS_LOCATION SL WITH (NOLOCK),
                        #attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR WITH (NOLOCK)
                    JOIN
                        fnSplit(@stock_id_list,',') AS TB1
                    ON 
                        TB1.item = ORR.STOCK_ID		
                        , 
                        #attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS WITH (NOLOCK)
                    WHERE
                        ORDS.DELIVER_DEPT_ID = SL.DEPARTMENT_ID AND
                        ORDS.LOCATION_ID = SL.LOCATION_ID AND
                        SL.NO_SALE = 0 AND
                        ORDS.PURCHASE_SALES = 0 AND
                        ORDS.ORDER_ZONE = 0 AND	
                        ORDS.RESERVED = 1 AND 
                        ORDS.ORDER_STATUS = 1 AND	
                        ORR.ORDER_ID = ORDS.ORDER_ID AND
                        (ORR.RESERVE_STOCK_IN-ORR.STOCK_IN)>0 
                    UNION ALL
                    SELECT
                        0 AS REAL_STOCK,
                        0 AS PRODUCT_STOCK,
                        (STOCK_ARTIR-STOCK_AZALT) AS RESERVED_STOCK,
                        0 AS SALE_ORDER_STOCK,
                        0 AS PURCHASE_ORDER_STOCK,
                        GRS.PRODUCT_ID, 
                        GRS.STOCK_ID,
                        GRS.SPECT_MAIN_ID SPECT_MAIN_ID,
                        DEPARTMENT_ID,
                        LOCATION_ID
                    FROM
                        #attributes.dsn#_#get_period.our_company_id#.GET_PRODUCTION_RESERVED_SPECT_LOCATION GRS WITH (NOLOCK)
                    JOIN
                        fnSplit(@stock_id_list,',') AS TB1
                    ON 
                        TB1.item = GRS.STOCK_ID	
                ) T1
                GROUP BY
                    PRODUCT_ID, 
                    STOCK_ID,
                    SPECT_MAIN_ID,
                    DEPARTMENT_ID,
                    LOCATION_ID
            END;

</cfquery><cfquery name="CREATE_PERIOD_SP" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE PROCEDURE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[get_stock_last_spect_location_function_with_spect_main_id]
                (
                    @spect_main_id_list nvarchar (max)
                )
            AS
            BEGIN 
        
                SELECT
                    SUM(REAL_STOCK) REAL_STOCK,
                    SUM(PRODUCT_STOCK) PRODUCT_STOCK,
                    SUM(PRODUCT_STOCK+RESERVED_STOCK) SALEABLE_STOCK,
                    SUM(PURCHASE_ORDER_STOCK) PURCHASE_ORDER_STOCK,
                    PRODUCT_ID,
                    STOCK_ID,
                    SPECT_MAIN_ID,
                    (SELECT SM.SPECT_MAIN_NAME FROM #attributes.dsn#_#get_period.our_company_id#.SPECT_MAIN SM WITH (NOLOCK) WHERE SM.SPECT_MAIN_ID = T1.SPECT_MAIN_ID) SPECT_MAIN_NAME,
                    DEPARTMENT_ID,
                    LOCATION_ID
                FROM
                (
                    SELECT
                        (STOCK_IN - STOCK_OUT) AS REAL_STOCK,
                        0 AS PRODUCT_STOCK,
                        0 AS RESERVED_STOCK,
                        0 AS SALE_ORDER_STOCK,
                        0 AS PURCHASE_ORDER_STOCK,
                        SR.PRODUCT_ID, 
                        SR.STOCK_ID,
                        SR.SPECT_VAR_ID SPECT_MAIN_ID,
                        SR.STORE AS DEPARTMENT_ID,
                        SR.STORE_LOCATION AS LOCATION_ID
                    FROM			
                        STOCKS_ROW SR WITH (NOLOCK)
                    JOIN
                    	fnSplit(@spect_main_id_list,',') AS TB1
                	ON 
                    	TB1.item = SR.SPECT_VAR_ID
                    UNION ALL
                    SELECT
                        0 AS REAL_STOCK,
                        (STOCK_IN - STOCK_OUT) AS PRODUCT_STOCK,
                        0 AS RESERVED_STOCK,

                        0 AS SALE_ORDER_STOCK,
                        0 AS PURCHASE_ORDER_STOCK,
                        SR.PRODUCT_ID, 
                        SR.STOCK_ID,
                        SR.SPECT_VAR_ID SPECT_MAIN_ID,
                        SR.STORE AS DEPARTMENT_ID,
                        SR.STORE_LOCATION AS LOCATION_ID
                    FROM			
                        #attributes.dsn#.STOCKS_LOCATION SL WITH (NOLOCK),
                        STOCKS_ROW SR WITH (NOLOCK)
                    JOIN
                    	fnSplit(@spect_main_id_list,',') AS TB1
                	ON 
                    	TB1.item = SR.SPECT_VAR_ID
                    WHERE			
                        SR.STORE =SL.DEPARTMENT_ID AND 
                        SR.STORE_LOCATION=SL.LOCATION_ID AND 
                        SL.NO_SALE = 0 
                    UNION ALL
                    SELECT
                        0 AS REAL_STOCK,
                        -1*(STOCK_IN - STOCK_OUT) AS PRODUCT_STOCK,
                        0 AS RESERVED_STOCK,
                        0 AS SALE_ORDER_STOCK,
                        0 AS PURCHASE_ORDER_STOCK,
                        SR.PRODUCT_ID, 
                        SR.STOCK_ID,
                        SR.SPECT_VAR_ID SPECT_MAIN_ID,
                        SR.STORE AS DEPARTMENT_ID,
                        SR.STORE_LOCATION AS LOCATION_ID
                    FROM
                        STOCKS_ROW SR WITH (NOLOCK)
                    JOIN
                    	fnSplit(@spect_main_id_list,',') AS TB1
                    ON 
                    	TB1.item = SR.SPECT_VAR_ID	
                    	,#attributes.dsn#.STOCKS_LOCATION SL WITH (NOLOCK)
                    WHERE	
                        SR.STORE = SL.DEPARTMENT_ID AND
                        SR.STORE_LOCATION = SL.LOCATION_ID AND
                        ISNULL(SL.IS_SCRAP,0)=1	
                    UNION ALL
                    SELECT
                        0 AS REAL_STOCK,
                        0 AS PRODUCT_STOCK,
                        ((ORR.RESERVE_STOCK_OUT-ORR.STOCK_OUT)*-1) AS RESERVED_STOCK,
                        0 AS SALE_ORDER_STOCK,
                        ORR.RESERVE_STOCK_IN AS PURCHASE_ORDER_STOCK,
                        ORR.PRODUCT_ID, 
                        ORR.STOCK_ID,
                        S.SPECT_MAIN_ID,
                        ORDS.DELIVER_DEPT_ID AS DEPARTMENT_ID,
                        ORDS.LOCATION_ID AS LOCATION_ID
                    FROM
                        #attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED  ORR WITH (NOLOCK)
                    LEFT JOIN
						 #attributes.dsn#_#get_period.our_company_id#.SPECTS S
					ON	
						S.SPECT_VAR_ID = ORR.SPECT_VAR_ID
					JOIN
                     	fnSplit(@spect_main_id_list,',') AS TB1
                	ON 
                     	TB1.item = S.SPECT_MAIN_ID	
                        ,#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS WITH (NOLOCK)
                    WHERE
                        ORDS.RESERVED = 1 AND 
                        ORDS.ORDER_STATUS = 1 AND	
                        ORR.ORDER_ID = ORDS.ORDER_ID AND
                        ((ORR.RESERVE_STOCK_IN-ORR.STOCK_IN)>0 OR (ORR.RESERVE_STOCK_OUT-ORR.STOCK_OUT)>0)
                    UNION ALL
                    SELECT
                        0 AS REAL_STOCK,
                        0 AS PRODUCT_STOCK,
                        (ORR.RESERVE_STOCK_IN-ORR.STOCK_IN) AS RESERVED_STOCK,
                        0 AS SALE_ORDER_STOCK,
                        0 AS PURCHASE_ORDER_STOCK,
                        ORR.PRODUCT_ID, 
                        ORR.STOCK_ID,
                        S.SPECT_MAIN_ID,
                        ORDS.DELIVER_DEPT_ID AS DEPARTMENT_ID,
                        ORDS.LOCATION_ID AS LOCATION_ID
                    FROM
                        #attributes.dsn#.STOCKS_LOCATION SL WITH (NOLOCK),
                        #attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR WITH (NOLOCK)
                    
                    LEFT JOIN
						 #attributes.dsn#_#get_period.our_company_id#.SPECTS S
					ON	
						S.SPECT_VAR_ID = ORR.SPECT_VAR_ID
					JOIN
                     	fnSplit(@spect_main_id_list,',') AS TB1
                	ON 
                     	TB1.item = S.SPECT_MAIN_ID	
                    ,#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS WITH (NOLOCK)
                    WHERE
                        ORDS.DELIVER_DEPT_ID = SL.DEPARTMENT_ID AND
                        ORDS.LOCATION_ID = SL.LOCATION_ID AND
                        SL.NO_SALE = 0 AND
                        ORDS.PURCHASE_SALES = 0 AND
                        ORDS.ORDER_ZONE = 0 AND	
                        ORDS.RESERVED = 1 AND 
                        ORDS.ORDER_STATUS = 1 AND	
                        ORR.ORDER_ID = ORDS.ORDER_ID AND
                        (ORR.RESERVE_STOCK_IN-ORR.STOCK_IN)>0 
                    UNION ALL
                    SELECT
                        0 AS REAL_STOCK,
                        0 AS PRODUCT_STOCK,
                        (STOCK_ARTIR-STOCK_AZALT) AS RESERVED_STOCK,
                        0 AS SALE_ORDER_STOCK,
                        0 AS PURCHASE_ORDER_STOCK,
                        GRS.PRODUCT_ID, 
                        GRS.STOCK_ID,
                        GRS.SPECT_MAIN_ID SPECT_MAIN_ID,
                        DEPARTMENT_ID,
                        LOCATION_ID
                    FROM
                        #attributes.dsn#_#get_period.our_company_id#.GET_PRODUCTION_RESERVED_SPECT_LOCATION GRS WITH (NOLOCK)
                   JOIN
                     	fnSplit(@spect_main_id_list,',') AS TB1
                	ON 
                     	TB1.item = GRS.SPECT_MAIN_ID	
                ) T1
                GROUP BY
                    PRODUCT_ID, 
                    STOCK_ID,
                    SPECT_MAIN_ID,
                    DEPARTMENT_ID,
                    LOCATION_ID
            END;


</cfquery><cfquery name="CREATE_PERIOD_SP" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE  procedure [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[get_stock_last_spect_with_spect_id] 
	@spect_id_list nvarchar(max)
AS
		SELECT
			SUM(REAL_STOCK) REAL_STOCK,
			SUM(PRODUCT_STOCK) PRODUCT_STOCK,
			SUM(PRODUCT_STOCK+RESERVED_STOCK) SALEABLE_STOCK,
			SUM(PURCHASE_ORDER_STOCK) PURCHASE_ORDER_STOCK,
			PRODUCT_ID,
			STOCK_ID,
			SPECT_MAIN_ID
		FROM
		(
			SELECT
				(STOCK_IN - STOCK_OUT) AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS SALE_ORDER_STOCK,
				0 AS PURCHASE_ORDER_STOCK,
				SR.PRODUCT_ID, 
				SR.STOCK_ID,
				SR.SPECT_VAR_ID SPECT_MAIN_ID
			FROM			
				STOCKS_ROW SR WITH (NOLOCK)
			JOIN
                    #attributes.dsn#.fnSplit(@spect_id_list,',') AS TB1
                ON 
                    TB1.item = SR.SPECT_VAR_ID
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				(STOCK_IN - STOCK_OUT) AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS SALE_ORDER_STOCK,
				0 AS PURCHASE_ORDER_STOCK,
				SR.PRODUCT_ID, 
				SR.STOCK_ID,
				SR.SPECT_VAR_ID SPECT_MAIN_ID
			FROM			
				#attributes.dsn#.STOCKS_LOCATION SL,
				STOCKS_ROW SR WITH (NOLOCK)
				JOIN
                    #attributes.dsn#.fnSplit(@spect_id_list,',') AS TB1
                ON 
                    TB1.item = SR.SPECT_VAR_ID
			WHERE			
				SR.STORE =SL.DEPARTMENT_ID
				AND SR.STORE_LOCATION=SL.LOCATION_ID
				AND SL.NO_SALE = 0
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				-1*(STOCK_IN - STOCK_OUT) AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS SALE_ORDER_STOCK,
				0 AS PURCHASE_ORDER_STOCK,
				SR.PRODUCT_ID, 
				SR.STOCK_ID,
				SR.SPECT_VAR_ID SPECT_MAIN_ID
			FROM
				STOCKS_ROW SR WITH (NOLOCK)
				JOIN
                    #attributes.dsn#.fnSplit(@spect_id_list,',') AS TB1
                ON 
                    TB1.item = SR.SPECT_VAR_ID
				,
				#attributes.dsn#.STOCKS_LOCATION SL  
			WHERE	
				SR.STORE = SL.DEPARTMENT_ID AND
				SR.STORE_LOCATION = SL.LOCATION_ID AND
				ISNULL(SL.IS_SCRAP,0)=1	
	UNION ALL
			SELECT
				0 AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				((ORR.RESERVE_STOCK_OUT-ORR.STOCK_OUT)*-1)  AS RESERVED_STOCK,
				0 AS SALE_ORDER_STOCK,
				ORR.RESERVE_STOCK_IN  AS PURCHASE_ORDER_STOCK,
				ORR.PRODUCT_ID, 
				ORR.STOCK_ID,
				(SELECT SPECT_MAIN_ID FROM #attributes.dsn#_#get_period.our_company_id#.SPECTS WHERE SPECT_VAR_ID=ORR.SPECT_VAR_ID) SPECT_MAIN_ID
			FROM
				#attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR WITH (NOLOCK)
				JOIN
                    #attributes.dsn#.fnSplit(@spect_id_list,',') AS TB1
                ON 
                    TB1.item = ORR.SPECT_VAR_ID
				, 
				#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS WITH (NOLOCK)
			WHERE
				ORDS.RESERVED = 1 AND 
				ORDS.ORDER_STATUS = 1 AND	
				ORR.ORDER_ID = ORDS.ORDER_ID AND
				((ORR.RESERVE_STOCK_IN-ORR.STOCK_IN)>0 OR (ORR.RESERVE_STOCK_OUT-ORR.STOCK_OUT)>0)	
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				(ORR.RESERVE_STOCK_IN-ORR.STOCK_IN) AS RESERVED_STOCK,
				0 AS SALE_ORDER_STOCK,
				0 AS PURCHASE_ORDER_STOCK,
				ORR.PRODUCT_ID, 
				ORR.STOCK_ID,
				(SELECT SPECT_MAIN_ID FROM #attributes.dsn#_#get_period.our_company_id#.SPECTS WHERE SPECT_VAR_ID=ORR.SPECT_VAR_ID) SPECT_MAIN_ID
			FROM
				#attributes.dsn#.STOCKS_LOCATION SL,
				#attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR WITH (NOLOCK)
				JOIN
                    #attributes.dsn#.fnSplit(@spect_id_list,',') AS TB1
                ON 
                    TB1.item = ORR.SPECT_VAR_ID
				, 
				#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS WITH (NOLOCK)
			WHERE
				ORDS.DELIVER_DEPT_ID=SL.DEPARTMENT_ID AND
				ORDS.LOCATION_ID=SL.LOCATION_ID AND
				SL.NO_SALE = 0 AND
				ORDS.PURCHASE_SALES=0 AND
				ORDS.ORDER_ZONE=0 AND	
				ORDS.RESERVED = 1 AND 
				ORDS.ORDER_STATUS = 1 AND	
				ORR.ORDER_ID = ORDS.ORDER_ID AND
				(ORR.RESERVE_STOCK_IN-ORR.STOCK_IN)>0
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				(STOCK_ARTIR-STOCK_AZALT) AS RESERVED_STOCK,
				0 AS SALE_ORDER_STOCK,
				0 AS PURCHASE_ORDER_STOCK,
				GRS.PRODUCT_ID, 
				GRS.STOCK_ID,
				GRS.SPECT_MAIN_ID SPECT_MAIN_ID
			FROM
				#attributes.dsn#_#get_period.our_company_id#.GET_PRODUCTION_RESERVED_SPECT GRS WITH (NOLOCK)
				JOIN
                    #attributes.dsn#.fnSplit(@spect_id_list,',') AS TB1
                ON 
                    TB1.item = GRS.SPECT_MAIN_ID
			
		) T1
		GROUP BY
			PRODUCT_ID, 
			STOCK_ID,
			SPECT_MAIN_ID


</cfquery><cfquery name="CREATE_PERIOD_SP" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE PROCEDURE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SP_GET_STOCK_ALL]
            @stock_id_list NVARCHAR(850),
            @type int,
            @p_order_id int 
        AS
        BEGIN
            SET NOCOUNT ON;
            IF @p_order_id <> -1
            BEGIN
                IF @type =1
                BEGIN
                
                    SELECT																																																																																																																																																																																																																																	 
                        ISNULL(PRODUCT_STOCK,0) AS PRODUCT_STOCK,
                        ISNULL(SALEABLE_STOCK,0) AS SALEABLE_STOCK,
                        STOCK_ID,
                        SPEC_MAIN_ID
                    FROM 
                        (
                        SELECT 
                            ROUND(SUM(REAL_STOCK),4) REAL_STOCK,
                            ROUND(SUM(PRODUCT_STOCK),4) PRODUCT_STOCK,
                            ROUND(SUM(PRODUCT_STOCK+RESERVED_STOCK),4) SALEABLE_STOCK,
                            ROUND(SUM(PURCHASE_ORDER_STOCK),4) PURCHASE_ORDER_STOCK,
                            STOCK_ID,
                            T1.SPEC_MAIN_ID
                        FROM
                        (
                            SELECT
                                (SR.STOCK_IN - SR.STOCK_OUT) AS REAL_STOCK,
                                0 AS PRODUCT_STOCK,
                                0 AS RESERVED_STOCK,
                                0 AS PURCHASE_ORDER_STOCK,
                                SR.STOCK_ID,
                                ISNULL(SR.SPECT_VAR_ID,0) SPEC_MAIN_ID
                            FROM
                                STOCKS_ROW SR
                            JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = SR.STOCK_ID
                            WHERE
                                1=1
                        UNION ALL			
                            SELECT
                                0 AS REAL_STOCK,
                                (SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK,
                                0 AS RESERVED_STOCK,
                                0 AS PURCHASE_ORDER_STOCK,
                                SR.STOCK_ID,
                                ISNULL(SR.SPECT_VAR_ID,0) SPEC_MAIN_ID
                            FROM
                                #attributes.dsn#.STOCKS_LOCATION SL,
                                STOCKS_ROW SR
                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = SR.STOCK_ID
                            WHERE
                                SR.STORE =SL.DEPARTMENT_ID
                                AND SR.STORE_LOCATION=SL.LOCATION_ID
                                AND SL.NO_SALE = 0
                        UNION ALL
                            SELECT
                                0 AS REAL_STOCK,
                                0 AS PRODUCT_STOCK,
                                ((RESERVE_STOCK_OUT-STOCK_OUT)*-1) AS RESERVED_STOCK,
                                RESERVE_STOCK_IN AS PURCHASE_ORDER_STOCK,
                                ORR.STOCK_ID,
                                ISNULL(ORR.SPECT_VAR_ID,0) SPEC_MAIN_ID
                            FROM
                                #attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR
                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = ORR.STOCK_ID, 
                                #attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS
                            WHERE
                                ORDS.RESERVED = 1 AND 
                                ORDS.ORDER_STATUS = 1 AND	
                                ORR.ORDER_ID=ORDS.ORDER_ID AND 
                                ((RESERVE_STOCK_IN-STOCK_IN)>0 OR (RESERVE_STOCK_OUT-STOCK_OUT)>0)
                        UNION ALL
                            SELECT
                                0 AS REAL_STOCK,
                                0 AS PRODUCT_STOCK,
                                (RESERVE_STOCK_IN-STOCK_IN) AS RESERVED_STOCK,
                                0 AS PURCHASE_ORDER_STOCK,
                                ORR.STOCK_ID,
                                ISNULL(ORR.SPECT_VAR_ID,0) SPEC_MAIN_ID
                            FROM
                                #attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR
                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = ORR.STOCK_ID, 
                                #attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS,
                                #attributes.dsn#.STOCKS_LOCATION SL
                            WHERE
                                ORDS.RESERVED = 1 AND 
                                ORDS.ORDER_STATUS = 1 AND	
                                ORDS.DELIVER_DEPT_ID =SL.DEPARTMENT_ID AND 
                                ORDS.LOCATION_ID=SL.LOCATION_ID AND 
                                SL.NO_SALE = 0	 AND 
                                ORR.ORDER_ID=ORDS.ORDER_ID AND 
                                (RESERVE_STOCK_IN-STOCK_IN)>0
                        UNION ALL			
                            SELECT
                                0 AS REAL_STOCK,
                                0 AS PRODUCT_STOCK,
                                ((RESERVE_STOCK_IN-STOCK_IN) + ((RESERVE_STOCK_OUT-STOCK_OUT)*-1)) AS RESERVED_STOCK,
                                0 AS PURCHASE_ORDER_STOCK,
                                ORR.STOCK_ID,
                                ISNULL(ORR.SPECT_VAR_ID,0) SPEC_MAIN_ID
                            FROM
                                #attributes.dsn#_#get_period.our_company_id#.ORDER_ROW_RESERVED  ORR
                            	JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = ORR.STOCK_ID
                            WHERE
                                ORDER_ID IS NULL
                                AND SHIP_ID IS NULL
                                AND INVOICE_ID IS NULL
                        UNION ALL
                            SELECT
                                0 AS REAL_STOCK,
                                0 AS PRODUCT_STOCK,

                                (STOCK_ARTIR-STOCK_AZALT) AS RESERVED_STOCK,
                                0  AS PURCHASE_ORDER_STOCK,
                                STOCK_ID,
                                SPEC_MAIN_ID
                            FROM
                                (
                                    SELECT
                                        SUM(STOCK_ARTIR) STOCK_ARTIR,
                                        SUM(STOCK_AZALT) STOCK_AZALT,
                                        STOCK_ID,
                                        SPEC_MAIN_ID
                                    FROM
                                        (
                                            SELECT
                                                (QUANTITY) AS STOCK_ARTIR,
                                                0 AS STOCK_AZALT,
                                                STOCK_ID,
                                                ISNULL(SPEC_MAIN_ID,0) SPEC_MAIN_ID
                                            FROM
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS
                                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = PRODUCTION_ORDERS.STOCK_ID
                                            WHERE
                                                IS_STOCK_RESERVED = 1 AND
                                                IS_DEMONTAJ=0 AND
                                                SPEC_MAIN_ID IS NOT NULL
                                        UNION ALL
                                            SELECT
                                                0 AS STOCK_ARTIR,
                                                (QUANTITY) AS STOCK_AZALT,
                                                STOCK_ID,
                                                ISNULL(SPEC_MAIN_ID,0) SPEC_MAIN_ID
                                            FROM
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS
                                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = PRODUCTION_ORDERS.STOCK_ID
                                            WHERE
                                                IS_STOCK_RESERVED = 1 AND
                                                IS_DEMONTAJ=1 AND
                                                SPEC_MAIN_ID IS NOT NULL
                                        UNION ALL
                                            SELECT
                                                0 AS STOCK_ARTIR,
                                                POS.AMOUNT AS STOCK_AZALT,
                                                POS.STOCK_ID,
                                                ISNULL(POS.SPECT_MAIN_ID,0) SPEC_MAIN_ID
                                            FROM
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS PO,
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS_STOCKS POS
                                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = POS.STOCK_ID
                                            WHERE
                                                PO.IS_STOCK_RESERVED = 1 AND
                                                PO.P_ORDER_ID = POS.P_ORDER_ID AND
                                                PO.IS_DEMONTAJ=0 AND
                                                ISNULL(POS.STOCK_ID,0)>0 AND
                                                POS.IS_SEVK <> 1 AND
                                                ISNULL(IS_FREE_AMOUNT,0) = 0
                                                AND PO.P_ORDER_ID <> @p_order_id
                                        UNION ALL
                                            SELECT
                                                POS.AMOUNT AS STOCK_ARTIR,
                                                0 AS STOCK_AZALT,
                                                POS.STOCK_ID,
                                                ISNULL(POS.SPECT_MAIN_ID,0) SPEC_MAIN_ID
                                            FROM
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS PO,
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS_STOCKS POS
                                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = POS.STOCK_ID
                                            WHERE
                                                PO.IS_STOCK_RESERVED = 1 AND
                                                PO.P_ORDER_ID = POS.P_ORDER_ID AND
                                                PO.IS_DEMONTAJ=1 AND
                                                ISNULL(POS.STOCK_ID,0)>0 AND
                                                POS.IS_SEVK <> 1 AND
                                                ISNULL(IS_FREE_AMOUNT,0) = 0
                                                AND PO.P_ORDER_ID <> @p_order_id
                                        UNION ALL
                                            SELECT 
                                                (P_ORD_R_R.AMOUNT)*-1 AS  STOCK_ARTIR,
                                                0 AS STOCK_AZALT,
                                                P_ORD_R_R.STOCK_ID,
                                                ISNULL(P_ORD.SPEC_MAIN_ID,0) SPEC_MAIN_ID
                                            FROM
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS P_ORD_R,
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS_ROW P_ORD_R_R
                                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = P_ORD_R_R.STOCK_ID,
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS P_ORD
                                            WHERE
                                                P_ORD.IS_STOCK_RESERVED=1 AND
                                                P_ORD.SPEC_MAIN_ID IS NOT NULL AND
                                                P_ORD.P_ORDER_ID = P_ORD_R.P_ORDER_ID AND
                                                P_ORD_R_R.PR_ORDER_ID=P_ORD_R.PR_ORDER_ID AND
                                                P_ORD_R_R.TYPE=1 AND
                                                P_ORD_R.IS_STOCK_FIS=1 AND
                                                P_ORD_R_R.IS_SEVKIYAT IS NULL
                                        UNION ALL
                                            SELECT 
                                                0 AS STOCK_ARTIR,
                                                (P_ORD_R_R.AMOUNT)*-1 AS STOCK_AZALT,
                                                P_ORD_R_R.STOCK_ID,
                                                ISNULL(P_ORD.SPEC_MAIN_ID,0) SPEC_MAIN_ID
                                            FROM 
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS P_ORD_R,
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS_ROW P_ORD_R_R
                                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = P_ORD_R_R.STOCK_ID,
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS P_ORD
                                            WHERE
                                                P_ORD.IS_STOCK_RESERVED=1 AND
                                                P_ORD.SPEC_MAIN_ID IS NOT NULL AND
                                                P_ORD.P_ORDER_ID = P_ORD_R.P_ORDER_ID AND
                                                P_ORD_R_R.PR_ORDER_ID=P_ORD_R.PR_ORDER_ID AND
                                                P_ORD_R_R.TYPE=2 AND
                                                P_ORD_R.IS_STOCK_FIS=1 AND
                                                P_ORD_R_R.IS_SEVKIYAT <> 1
                                ) T1
                            GROUP BY 
                                STOCK_ID,
                                T1.SPEC_MAIN_ID
                            )A1
                        ) T1
                    GROUP BY
                            STOCK_ID,
                            SPEC_MAIN_ID
                        ) AS GET_STOCK_LAST
                END
                ELSE
                BEGIN
                    SELECT 
                        ISNULL(PRODUCT_STOCK,0) AS PRODUCT_STOCK,
                        ISNULL(SALEABLE_STOCK,0) AS SALEABLE_STOCK,
                        STOCK_ID,
                        SPEC_MAIN_ID
                    FROM 
                        (
                        SELECT 
                            ROUND(SUM(REAL_STOCK),4) REAL_STOCK,
                            ROUND(SUM(PRODUCT_STOCK),4) PRODUCT_STOCK,
                            ROUND(SUM(PRODUCT_STOCK+RESERVED_STOCK),4) SALEABLE_STOCK,
                            ROUND(SUM(PURCHASE_ORDER_STOCK),4) PURCHASE_ORDER_STOCK,
                            STOCK_ID,
                            T1.SPEC_MAIN_ID
                        FROM
                        (
                            SELECT
                                (SR.STOCK_IN - SR.STOCK_OUT) AS REAL_STOCK,
                                0 AS PRODUCT_STOCK,
                                0 AS RESERVED_STOCK,
                                0 AS PURCHASE_ORDER_STOCK,
                                SR.STOCK_ID,
                                ISNULL(SR.SPECT_VAR_ID,0) SPEC_MAIN_ID
                            FROM
                                STOCKS_ROW SR
                            JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = SR.STOCK_ID
                             JOIN
                            (
                                    SELECT
                                        CONVERT(NVARCHAR(10),SL.LOCATION_ID)+'_'+CONVERT(NVARCHAR(10),SL.DEPARTMENT_ID) AS ID 
                                    FROM 
                                        #attributes.dsn#.STOCKS_LOCATION SL,
                                        #attributes.dsn#.DEPARTMENT D
                                    WHERE
                                        SL.DEPARTMENT_ID = D.DEPARTMENT_ID AND SL.IS_SCRAP = 1
                            ) as SCARP ON  SCARP.ID <> CONVERT(NVARCHAR(10),SR.STORE_LOCATION)+'_'+CONVERT(NVARCHAR(10),SR.STORE)
        
                                
                
                
                        UNION ALL			
                            SELECT
                                0 AS REAL_STOCK,
                                (SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK,
                                0 AS RESERVED_STOCK,
                                0 AS PURCHASE_ORDER_STOCK,
                                SR.STOCK_ID,
                                ISNULL(SR.SPECT_VAR_ID,0) SPEC_MAIN_ID
                            FROM
                                #attributes.dsn#.STOCKS_LOCATION SL,
                                STOCKS_ROW SR
                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = SR.STOCK_ID
                             JOIN
                            (
                                    SELECT
                                        CONVERT(NVARCHAR(10),SL.LOCATION_ID)+'_'+CONVERT(NVARCHAR(10),SL.DEPARTMENT_ID) AS ID 
                                    FROM 
                                        #attributes.dsn#.STOCKS_LOCATION SL,
                                        #attributes.dsn#.DEPARTMENT D
                                    WHERE
                                        SL.DEPARTMENT_ID = D.DEPARTMENT_ID AND SL.IS_SCRAP = 1
                            ) as SCARP ON  SCARP.ID <> CONVERT(NVARCHAR(10),SR.STORE_LOCATION)+'_'+CONVERT(NVARCHAR(10),SR.STORE)
                            
                                
                            WHERE
                                
                                SR.STORE =SL.DEPARTMENT_ID
                                AND SR.STORE_LOCATION=SL.LOCATION_ID
                                AND SL.NO_SALE = 0
                        UNION ALL
                            SELECT
                                0 AS REAL_STOCK,
                                0 AS PRODUCT_STOCK,
                                ((RESERVE_STOCK_OUT-STOCK_OUT)*-1) AS RESERVED_STOCK,
                                RESERVE_STOCK_IN AS PURCHASE_ORDER_STOCK,
                                ORR.STOCK_ID,
                                ISNULL(ORR.SPECT_VAR_ID,0) SPEC_MAIN_ID
                            FROM
                                #attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR
                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = ORR.STOCK_ID, 
                                #attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS
                            WHERE
                                ORDS.RESERVED = 1 AND 
                                ORDS.ORDER_STATUS = 1 AND	
                                ORR.ORDER_ID=ORDS.ORDER_ID AND 
                                ((RESERVE_STOCK_IN-STOCK_IN)>0 OR (RESERVE_STOCK_OUT-STOCK_OUT)>0)
                        UNION ALL
                            SELECT
                                0 AS REAL_STOCK,
                                0 AS PRODUCT_STOCK,
                                (RESERVE_STOCK_IN-STOCK_IN) AS RESERVED_STOCK,
                                0 AS PURCHASE_ORDER_STOCK,
                                ORR.STOCK_ID,
                                ISNULL(ORR.SPECT_VAR_ID,0) SPEC_MAIN_ID
                            FROM
                                #attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR
                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = ORR.STOCK_ID, 
                                #attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS,
                                #attributes.dsn#.STOCKS_LOCATION SL
                            WHERE
                                ORDS.RESERVED = 1 AND 
                                ORDS.ORDER_STATUS = 1 AND	
                                ORDS.DELIVER_DEPT_ID =SL.DEPARTMENT_ID AND 
                                ORDS.LOCATION_ID=SL.LOCATION_ID AND 
                                SL.NO_SALE = 0	 AND 
                                ORR.ORDER_ID=ORDS.ORDER_ID AND 
                                (RESERVE_STOCK_IN-STOCK_IN)>0
                        UNION ALL			
                            SELECT
                                0 AS REAL_STOCK,
                                0 AS PRODUCT_STOCK,
                                ((RESERVE_STOCK_IN-STOCK_IN) + ((RESERVE_STOCK_OUT-STOCK_OUT)*-1)) AS RESERVED_STOCK,
                                0 AS PURCHASE_ORDER_STOCK,
                                ORR.STOCK_ID,
                                ISNULL(ORR.SPECT_VAR_ID,0) SPEC_MAIN_ID
                            FROM
                                #attributes.dsn#_#get_period.our_company_id#.ORDER_ROW_RESERVED  ORR
                            	JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = ORR.STOCK_ID
                            WHERE
                                ORDER_ID IS NULL
                                AND SHIP_ID IS NULL
                                AND INVOICE_ID IS NULL
                        UNION ALL
                            SELECT
                                0 AS REAL_STOCK,
                                0 AS PRODUCT_STOCK,
                                (STOCK_ARTIR-STOCK_AZALT) AS RESERVED_STOCK,
                                0  AS PURCHASE_ORDER_STOCK,
                                STOCK_ID,
                                SPEC_MAIN_ID
                            FROM
                                (
                                    SELECT
                                        SUM(STOCK_ARTIR) STOCK_ARTIR,
                                        SUM(STOCK_AZALT) STOCK_AZALT,
                                        STOCK_ID,
                                        SPEC_MAIN_ID
                                    FROM
                                        (
                                            SELECT
                                                (QUANTITY) AS STOCK_ARTIR,
                                                0 AS STOCK_AZALT,
                                                STOCK_ID,
                                                ISNULL(SPEC_MAIN_ID,0) SPEC_MAIN_ID
                                            FROM
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS
                                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = PRODUCTION_ORDERS.STOCK_ID
                                            WHERE
                                                IS_STOCK_RESERVED = 1 AND
                                                IS_DEMONTAJ=0 AND
                                                SPEC_MAIN_ID IS NOT NULL
                                        UNION ALL
                                            SELECT
                                                0 AS STOCK_ARTIR,
                                                (QUANTITY) AS STOCK_AZALT,
                                                STOCK_ID,
                                                ISNULL(SPEC_MAIN_ID,0) SPEC_MAIN_ID
                                            FROM
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS
                                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = PRODUCTION_ORDERS.STOCK_ID
                                            WHERE
                                                IS_STOCK_RESERVED = 1 AND
                                                IS_DEMONTAJ=1 AND
                                                SPEC_MAIN_ID IS NOT NULL
                                        UNION ALL
                                            SELECT
                                                0 AS STOCK_ARTIR,
                                                POS.AMOUNT AS STOCK_AZALT,
                                                POS.STOCK_ID,
                                                ISNULL(POS.SPECT_MAIN_ID,0) SPEC_MAIN_ID
                                            FROM
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS PO,
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS_STOCKS POS
                                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = POS.STOCK_ID
                                            WHERE
                                                PO.IS_STOCK_RESERVED = 1 AND
                                                PO.P_ORDER_ID = POS.P_ORDER_ID AND
                                                PO.IS_DEMONTAJ=0 AND
                                                ISNULL(POS.STOCK_ID,0)>0 AND
                                                POS.IS_SEVK <> 1 AND
                                                ISNULL(IS_FREE_AMOUNT,0) = 0
                                                AND PO.P_ORDER_ID <> @p_order_id
                                        UNION ALL
                                            SELECT
                                                POS.AMOUNT AS STOCK_ARTIR,
                                                0 AS STOCK_AZALT,
                                                POS.STOCK_ID,
                                                ISNULL(POS.SPECT_MAIN_ID,0) SPEC_MAIN_ID
                                            FROM
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS PO,
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS_STOCKS POS
                                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = POS.STOCK_ID
                                            WHERE
                                                PO.IS_STOCK_RESERVED = 1 AND
                                                PO.P_ORDER_ID = POS.P_ORDER_ID AND
                                                PO.IS_DEMONTAJ=1 AND
                                                ISNULL(POS.STOCK_ID,0)>0 AND
                                                POS.IS_SEVK <> 1 AND
                                                ISNULL(IS_FREE_AMOUNT,0) = 0
                                                AND PO.P_ORDER_ID <> @p_order_id
                                        UNION ALL
                                            SELECT 
                                                (P_ORD_R_R.AMOUNT)*-1 AS  STOCK_ARTIR,
                                                0 AS STOCK_AZALT,
                                                P_ORD_R_R.STOCK_ID,
                                                ISNULL(P_ORD.SPEC_MAIN_ID,0) SPEC_MAIN_ID
                                            FROM
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS P_ORD_R,
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS_ROW P_ORD_R_R
                                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = P_ORD_R_R.STOCK_ID,
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS P_ORD
                                            WHERE
                                                P_ORD.IS_STOCK_RESERVED=1 AND
                                                P_ORD.SPEC_MAIN_ID IS NOT NULL AND
                                                P_ORD.P_ORDER_ID = P_ORD_R.P_ORDER_ID AND
                                                P_ORD_R_R.PR_ORDER_ID=P_ORD_R.PR_ORDER_ID AND
                                                P_ORD_R_R.TYPE=1 AND
                                                P_ORD_R.IS_STOCK_FIS=1 AND
                                                P_ORD_R_R.IS_SEVKIYAT IS NULL
                                        UNION ALL
                                            SELECT 
                                                0 AS STOCK_ARTIR,
                                                (P_ORD_R_R.AMOUNT)*-1 AS STOCK_AZALT,
                                                P_ORD_R_R.STOCK_ID,
                                                ISNULL(P_ORD.SPEC_MAIN_ID,0) SPEC_MAIN_ID
                                            FROM 
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS P_ORD_R,
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS_ROW P_ORD_R_R
                                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = P_ORD_R_R.STOCK_ID,
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS P_ORD
                                            WHERE
                                                P_ORD.IS_STOCK_RESERVED=1 AND
                                                P_ORD.SPEC_MAIN_ID IS NOT NULL AND
                                                P_ORD.P_ORDER_ID = P_ORD_R.P_ORDER_ID AND
                                                P_ORD_R_R.PR_ORDER_ID=P_ORD_R.PR_ORDER_ID AND
                                                P_ORD_R_R.TYPE=2 AND
                                                P_ORD_R.IS_STOCK_FIS=1 AND
                                                P_ORD_R_R.IS_SEVKIYAT <> 1
                                ) T1
                            GROUP BY 
                                STOCK_ID,
                                T1.SPEC_MAIN_ID
                            )A1
                        ) T1
                    GROUP BY
                            STOCK_ID,
                            SPEC_MAIN_ID
                        ) AS GET_STOCK_LAST
                END
            END
        
            else
                BEGIN
        
                    IF @type =1
                BEGIN
                
                    SELECT																																																																																																																																																																																																																																	 
                        ISNULL(PRODUCT_STOCK,0) AS PRODUCT_STOCK,
                        ISNULL(SALEABLE_STOCK,0) AS SALEABLE_STOCK,
                        STOCK_ID,
                        SPEC_MAIN_ID
                    FROM 
                        (
                        SELECT 
                            ROUND(SUM(REAL_STOCK),4) REAL_STOCK,
                            ROUND(SUM(PRODUCT_STOCK),4) PRODUCT_STOCK,
                            ROUND(SUM(PRODUCT_STOCK+RESERVED_STOCK),4) SALEABLE_STOCK,
                            ROUND(SUM(PURCHASE_ORDER_STOCK),4) PURCHASE_ORDER_STOCK,
                            STOCK_ID,
                            T1.SPEC_MAIN_ID
                        FROM
                        (
                            SELECT
                                (SR.STOCK_IN - SR.STOCK_OUT) AS REAL_STOCK,
                                0 AS PRODUCT_STOCK,
                                0 AS RESERVED_STOCK,
                                0 AS PURCHASE_ORDER_STOCK,
                                SR.STOCK_ID,
                                ISNULL(SR.SPECT_VAR_ID,0) SPEC_MAIN_ID
                            FROM
                                STOCKS_ROW SR
                            JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = SR.STOCK_ID
                            WHERE
                                1=1
                        UNION ALL			
                            SELECT
                                0 AS REAL_STOCK,
                                (SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK,
                                0 AS RESERVED_STOCK,
                                0 AS PURCHASE_ORDER_STOCK,
                                SR.STOCK_ID,
                                ISNULL(SR.SPECT_VAR_ID,0) SPEC_MAIN_ID
                            FROM
                                #attributes.dsn#.STOCKS_LOCATION SL,
                                STOCKS_ROW SR
                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = SR.STOCK_ID
                            WHERE
                                SR.STORE =SL.DEPARTMENT_ID
                                AND SR.STORE_LOCATION=SL.LOCATION_ID
                                AND SL.NO_SALE = 0
                        UNION ALL
                            SELECT
                                0 AS REAL_STOCK,
                                0 AS PRODUCT_STOCK,
                                ((RESERVE_STOCK_OUT-STOCK_OUT)*-1) AS RESERVED_STOCK,
                                RESERVE_STOCK_IN AS PURCHASE_ORDER_STOCK,
                                ORR.STOCK_ID,
                                ISNULL(ORR.SPECT_VAR_ID,0) SPEC_MAIN_ID
                            FROM
                                #attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR
                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = ORR.STOCK_ID, 
                                #attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS
                            WHERE
                                ORDS.RESERVED = 1 AND 
                                ORDS.ORDER_STATUS = 1 AND	
                                ORR.ORDER_ID=ORDS.ORDER_ID AND 
                                ((RESERVE_STOCK_IN-STOCK_IN)>0 OR (RESERVE_STOCK_OUT-STOCK_OUT)>0)
                        UNION ALL
                            SELECT
                                0 AS REAL_STOCK,
                                0 AS PRODUCT_STOCK,
                                (RESERVE_STOCK_IN-STOCK_IN) AS RESERVED_STOCK,
                                0 AS PURCHASE_ORDER_STOCK,
                                ORR.STOCK_ID,
                                ISNULL(ORR.SPECT_VAR_ID,0) SPEC_MAIN_ID
                            FROM
                                #attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR
                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = ORR.STOCK_ID, 
                                #attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS,
                                #attributes.dsn#.STOCKS_LOCATION SL
                            WHERE
                                ORDS.RESERVED = 1 AND 
                                ORDS.ORDER_STATUS = 1 AND	
                                ORDS.DELIVER_DEPT_ID =SL.DEPARTMENT_ID AND 
                                ORDS.LOCATION_ID=SL.LOCATION_ID AND 
                                SL.NO_SALE = 0	 AND 
                                ORR.ORDER_ID=ORDS.ORDER_ID AND 
                                (RESERVE_STOCK_IN-STOCK_IN)>0
                        UNION ALL			
                            SELECT
                                0 AS REAL_STOCK,
                                0 AS PRODUCT_STOCK,
                                ((RESERVE_STOCK_IN-STOCK_IN) + ((RESERVE_STOCK_OUT-STOCK_OUT)*-1)) AS RESERVED_STOCK,
                                0 AS PURCHASE_ORDER_STOCK,
                                ORR.STOCK_ID,
                                ISNULL(ORR.SPECT_VAR_ID,0) SPEC_MAIN_ID
                            FROM
                                #attributes.dsn#_#get_period.our_company_id#.ORDER_ROW_RESERVED  ORR
                            	JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = ORR.STOCK_ID
                            WHERE
                                ORDER_ID IS NULL
                                AND SHIP_ID IS NULL
                                AND INVOICE_ID IS NULL
                        UNION ALL
                            SELECT
                                0 AS REAL_STOCK,
                                0 AS PRODUCT_STOCK,
                                (STOCK_ARTIR-STOCK_AZALT) AS RESERVED_STOCK,
                                0  AS PURCHASE_ORDER_STOCK,
                                STOCK_ID,
                                SPEC_MAIN_ID
                            FROM
                                (
                                    SELECT
                                        SUM(STOCK_ARTIR) STOCK_ARTIR,
                                        SUM(STOCK_AZALT) STOCK_AZALT,
                                        STOCK_ID,
                                        SPEC_MAIN_ID
                                    FROM
                                        (
                                            SELECT
                                                (QUANTITY) AS STOCK_ARTIR,
                                                0 AS STOCK_AZALT,
                                                STOCK_ID,
                                                ISNULL(SPEC_MAIN_ID,0) SPEC_MAIN_ID
                                            FROM
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS
                                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = PRODUCTION_ORDERS.STOCK_ID
                                            WHERE
                                                IS_STOCK_RESERVED = 1 AND
                                                IS_DEMONTAJ=0 AND
                                                SPEC_MAIN_ID IS NOT NULL
                                        UNION ALL
                                            SELECT
                                                0 AS STOCK_ARTIR,
                                                (QUANTITY) AS STOCK_AZALT,
                                                STOCK_ID,
                                                ISNULL(SPEC_MAIN_ID,0) SPEC_MAIN_ID
                                            FROM
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS
                                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = PRODUCTION_ORDERS.STOCK_ID
                                            WHERE
                                                IS_STOCK_RESERVED = 1 AND
                                                IS_DEMONTAJ=1 AND
                                                SPEC_MAIN_ID IS NOT NULL
                                        UNION ALL
                                            SELECT
                                                0 AS STOCK_ARTIR,
                                                POS.AMOUNT AS STOCK_AZALT,
                                                POS.STOCK_ID,
                                                ISNULL(POS.SPECT_MAIN_ID,0) SPEC_MAIN_ID
                                            FROM
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS PO,
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS_STOCKS POS
                                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = POS.STOCK_ID
                                            WHERE
                                                PO.IS_STOCK_RESERVED = 1 AND
                                                PO.P_ORDER_ID = POS.P_ORDER_ID AND
                                                PO.IS_DEMONTAJ=0 AND
                                                ISNULL(POS.STOCK_ID,0)>0 AND
                                                POS.IS_SEVK <> 1 AND
                                                ISNULL(IS_FREE_AMOUNT,0) = 0
                                        UNION ALL
                                            SELECT
                                                POS.AMOUNT AS STOCK_ARTIR,
                                                0 AS STOCK_AZALT,
                                                POS.STOCK_ID,
                                                ISNULL(POS.SPECT_MAIN_ID,0) SPEC_MAIN_ID
                                            FROM
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS PO,
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS_STOCKS POS
                                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = POS.STOCK_ID
                                            WHERE
                                                PO.IS_STOCK_RESERVED = 1 AND
                                                PO.P_ORDER_ID = POS.P_ORDER_ID AND
                                                PO.IS_DEMONTAJ=1 AND
                                                ISNULL(POS.STOCK_ID,0)>0 AND
                                                POS.IS_SEVK <> 1 AND
                                                ISNULL(IS_FREE_AMOUNT,0) = 0
                                        UNION ALL
                                            SELECT 
                                                (P_ORD_R_R.AMOUNT)*-1 AS  STOCK_ARTIR,
                                                0 AS STOCK_AZALT,
                                                P_ORD_R_R.STOCK_ID,
                                                ISNULL(P_ORD.SPEC_MAIN_ID,0) SPEC_MAIN_ID
                                            FROM
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS P_ORD_R,
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS_ROW P_ORD_R_R
                                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = P_ORD_R_R.STOCK_ID,
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS P_ORD
                                            WHERE
                                                P_ORD.IS_STOCK_RESERVED=1 AND
                                                P_ORD.SPEC_MAIN_ID IS NOT NULL AND
                                                P_ORD.P_ORDER_ID = P_ORD_R.P_ORDER_ID AND
                                                P_ORD_R_R.PR_ORDER_ID=P_ORD_R.PR_ORDER_ID AND
                                                P_ORD_R_R.TYPE=1 AND
                                                P_ORD_R.IS_STOCK_FIS=1 AND
                                                P_ORD_R_R.IS_SEVKIYAT IS NULL
                                        UNION ALL
                                            SELECT 
                                                0 AS STOCK_ARTIR,
                                                (P_ORD_R_R.AMOUNT)*-1 AS STOCK_AZALT,
                                                P_ORD_R_R.STOCK_ID,
                                                ISNULL(P_ORD.SPEC_MAIN_ID,0) SPEC_MAIN_ID
                                            FROM 
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS P_ORD_R,
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS_ROW P_ORD_R_R
                                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = P_ORD_R_R.STOCK_ID,
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS P_ORD
                                            WHERE
                                                P_ORD.IS_STOCK_RESERVED=1 AND
                                                P_ORD.SPEC_MAIN_ID IS NOT NULL AND
                                                P_ORD.P_ORDER_ID = P_ORD_R.P_ORDER_ID AND
                                                P_ORD_R_R.PR_ORDER_ID=P_ORD_R.PR_ORDER_ID AND
                                                P_ORD_R_R.TYPE=2 AND
                                                P_ORD_R.IS_STOCK_FIS=1 AND
                                                P_ORD_R_R.IS_SEVKIYAT <> 1
                                ) T1
                            GROUP BY 
                                STOCK_ID,
                                T1.SPEC_MAIN_ID
                            )A1
                        ) T1
                    GROUP BY
                            STOCK_ID,
                            SPEC_MAIN_ID
                        ) AS GET_STOCK_LAST
                END
                ELSE
                BEGIN
                    SELECT 
                        ISNULL(PRODUCT_STOCK,0) AS PRODUCT_STOCK,
                        ISNULL(SALEABLE_STOCK,0) AS SALEABLE_STOCK,
                        STOCK_ID,
                        SPEC_MAIN_ID
                    FROM 
                        (
                        SELECT 
                            ROUND(SUM(REAL_STOCK),4) REAL_STOCK,
                            ROUND(SUM(PRODUCT_STOCK),4) PRODUCT_STOCK,
                            ROUND(SUM(PRODUCT_STOCK+RESERVED_STOCK),4) SALEABLE_STOCK,
                            ROUND(SUM(PURCHASE_ORDER_STOCK),4) PURCHASE_ORDER_STOCK,
                            STOCK_ID,
                            T1.SPEC_MAIN_ID
                        FROM
                        (
                            SELECT
                                (SR.STOCK_IN - SR.STOCK_OUT) AS REAL_STOCK,
                                0 AS PRODUCT_STOCK,
                                0 AS RESERVED_STOCK,
                                0 AS PURCHASE_ORDER_STOCK,
                                SR.STOCK_ID,
                                ISNULL(SR.SPECT_VAR_ID,0) SPEC_MAIN_ID
                            FROM
                                STOCKS_ROW SR
                            JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = SR.STOCK_ID
                             JOIN
                            (
                                    SELECT
                                        CONVERT(NVARCHAR(10),SL.LOCATION_ID)+'_'+CONVERT(NVARCHAR(10),SL.DEPARTMENT_ID) AS ID 
                                    FROM 
                                        #attributes.dsn#.STOCKS_LOCATION SL,
                                        #attributes.dsn#.DEPARTMENT D
                                    WHERE
                                        SL.DEPARTMENT_ID = D.DEPARTMENT_ID AND SL.IS_SCRAP = 1
                            ) as SCARP ON  SCARP.ID <> CONVERT(NVARCHAR(10),SR.STORE_LOCATION)+'_'+CONVERT(NVARCHAR(10),SR.STORE)
                        UNION ALL			
                            SELECT
                                0 AS REAL_STOCK,
                                (SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK,
                                0 AS RESERVED_STOCK,
                                0 AS PURCHASE_ORDER_STOCK,
                                SR.STOCK_ID,
                                ISNULL(SR.SPECT_VAR_ID,0) SPEC_MAIN_ID
                            FROM
                                #attributes.dsn#.STOCKS_LOCATION SL,
                                STOCKS_ROW SR
                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = SR.STOCK_ID
                             JOIN
                            (
                                    SELECT
                                        CONVERT(NVARCHAR(10),SL.LOCATION_ID)+'_'+CONVERT(NVARCHAR(10),SL.DEPARTMENT_ID) AS ID 
                                    FROM 
                                        #attributes.dsn#.STOCKS_LOCATION SL,
                                        #attributes.dsn#.DEPARTMENT D
                                    WHERE
                                        SL.DEPARTMENT_ID = D.DEPARTMENT_ID AND SL.IS_SCRAP = 1
                            ) as SCARP ON  SCARP.ID <> CONVERT(NVARCHAR(10),SR.STORE_LOCATION)+'_'+CONVERT(NVARCHAR(10),SR.STORE)
                            
                                
                            WHERE
                                
                                SR.STORE =SL.DEPARTMENT_ID
                                AND SR.STORE_LOCATION=SL.LOCATION_ID
                                AND SL.NO_SALE = 0
                        UNION ALL
                            SELECT
                                0 AS REAL_STOCK,
                                0 AS PRODUCT_STOCK,
                                ((RESERVE_STOCK_OUT-STOCK_OUT)*-1) AS RESERVED_STOCK,
                                RESERVE_STOCK_IN AS PURCHASE_ORDER_STOCK,
                                ORR.STOCK_ID,
                                ISNULL(ORR.SPECT_VAR_ID,0) SPEC_MAIN_ID
                            FROM
                                #attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR
                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = ORR.STOCK_ID, 
                                #attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS
                            WHERE
                                ORDS.RESERVED = 1 AND 
                                ORDS.ORDER_STATUS = 1 AND	
                                ORR.ORDER_ID=ORDS.ORDER_ID AND 
                                ((RESERVE_STOCK_IN-STOCK_IN)>0 OR (RESERVE_STOCK_OUT-STOCK_OUT)>0)
                        UNION ALL
                            SELECT
                                0 AS REAL_STOCK,
                                0 AS PRODUCT_STOCK,
                                (RESERVE_STOCK_IN-STOCK_IN) AS RESERVED_STOCK,
                                0 AS PURCHASE_ORDER_STOCK,
                                ORR.STOCK_ID,
                                ISNULL(ORR.SPECT_VAR_ID,0) SPEC_MAIN_ID
                            FROM
                                #attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR
                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = ORR.STOCK_ID, 
                                #attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS,
                                #attributes.dsn#.STOCKS_LOCATION SL
                            WHERE
                                ORDS.RESERVED = 1 AND 
                                ORDS.ORDER_STATUS = 1 AND	
                                ORDS.DELIVER_DEPT_ID =SL.DEPARTMENT_ID AND 
                                ORDS.LOCATION_ID=SL.LOCATION_ID AND 
                                SL.NO_SALE = 0	 AND 
                                ORR.ORDER_ID=ORDS.ORDER_ID AND 
                                (RESERVE_STOCK_IN-STOCK_IN)>0
                        UNION ALL			
                            SELECT
                                0 AS REAL_STOCK,
                                0 AS PRODUCT_STOCK,
                                ((RESERVE_STOCK_IN-STOCK_IN) + ((RESERVE_STOCK_OUT-STOCK_OUT)*-1)) AS RESERVED_STOCK,

                                0 AS PURCHASE_ORDER_STOCK,
                                ORR.STOCK_ID,
                                ISNULL(ORR.SPECT_VAR_ID,0) SPEC_MAIN_ID
                            FROM
                                #attributes.dsn#_#get_period.our_company_id#.ORDER_ROW_RESERVED  ORR
                            	JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = ORR.STOCK_ID
                            WHERE
                                ORDER_ID IS NULL
                                AND SHIP_ID IS NULL
                                AND INVOICE_ID IS NULL
                        UNION ALL
                            SELECT
                                0 AS REAL_STOCK,
                                0 AS PRODUCT_STOCK,
                                (STOCK_ARTIR-STOCK_AZALT) AS RESERVED_STOCK,
                                0  AS PURCHASE_ORDER_STOCK,
                                STOCK_ID,
                                SPEC_MAIN_ID
                            FROM
                                (
                                    SELECT
                                        SUM(STOCK_ARTIR) STOCK_ARTIR,
                                        SUM(STOCK_AZALT) STOCK_AZALT,
                                        STOCK_ID,
                                        SPEC_MAIN_ID
                                    FROM
                                        (
                                            SELECT
                                                (QUANTITY) AS STOCK_ARTIR,
                                                0 AS STOCK_AZALT,
                                                STOCK_ID,
                                                ISNULL(SPEC_MAIN_ID,0) SPEC_MAIN_ID
                                            FROM
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS
                                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = PRODUCTION_ORDERS.STOCK_ID
                                            WHERE
                                                IS_STOCK_RESERVED = 1 AND
                                                IS_DEMONTAJ=0 AND
                                                SPEC_MAIN_ID IS NOT NULL
                                        UNION ALL
                                            SELECT
                                                0 AS STOCK_ARTIR,
                                                (QUANTITY) AS STOCK_AZALT,
                                                STOCK_ID,
                                                ISNULL(SPEC_MAIN_ID,0) SPEC_MAIN_ID
                                            FROM
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS
                                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = PRODUCTION_ORDERS.STOCK_ID
                                            WHERE
                                                IS_STOCK_RESERVED = 1 AND
                                                IS_DEMONTAJ=1 AND
                                                SPEC_MAIN_ID IS NOT NULL
                                        UNION ALL
                                            SELECT
                                                0 AS STOCK_ARTIR,
                                                POS.AMOUNT AS STOCK_AZALT,
                                                POS.STOCK_ID,
                                                ISNULL(POS.SPECT_MAIN_ID,0) SPEC_MAIN_ID
                                            FROM
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS PO,
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS_STOCKS POS
                                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = POS.STOCK_ID
                                            WHERE
                                                PO.IS_STOCK_RESERVED = 1 AND
                                                PO.P_ORDER_ID = POS.P_ORDER_ID AND
                                                PO.IS_DEMONTAJ=0 AND
                                                ISNULL(POS.STOCK_ID,0)>0 AND
                                                POS.IS_SEVK <> 1 AND
                                                ISNULL(IS_FREE_AMOUNT,0) = 0
                                        UNION ALL
                                            SELECT
                                                POS.AMOUNT AS STOCK_ARTIR,
                                                0 AS STOCK_AZALT,
                                                POS.STOCK_ID,
                                                ISNULL(POS.SPECT_MAIN_ID,0) SPEC_MAIN_ID
                                            FROM
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS PO,
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS_STOCKS POS
                                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = POS.STOCK_ID
                                            WHERE
                                                PO.IS_STOCK_RESERVED = 1 AND
                                                PO.P_ORDER_ID = POS.P_ORDER_ID AND
                                                PO.IS_DEMONTAJ=1 AND
                                                ISNULL(POS.STOCK_ID,0)>0 AND
                                                POS.IS_SEVK <> 1 AND
                                                ISNULL(IS_FREE_AMOUNT,0) = 0
                                        UNION ALL
                                            SELECT 
                                                (P_ORD_R_R.AMOUNT)*-1 AS  STOCK_ARTIR,
                                                0 AS STOCK_AZALT,
                                                P_ORD_R_R.STOCK_ID,
                                                ISNULL(P_ORD.SPEC_MAIN_ID,0) SPEC_MAIN_ID
                                            FROM
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS P_ORD_R,
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS_ROW P_ORD_R_R
                                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = P_ORD_R_R.STOCK_ID,
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS P_ORD
                                            WHERE
                                                P_ORD.IS_STOCK_RESERVED=1 AND
                                                P_ORD.SPEC_MAIN_ID IS NOT NULL AND
                                                P_ORD.P_ORDER_ID = P_ORD_R.P_ORDER_ID AND
                                                P_ORD_R_R.PR_ORDER_ID=P_ORD_R.PR_ORDER_ID AND
                                                P_ORD_R_R.TYPE=1 AND
                                                P_ORD_R.IS_STOCK_FIS=1 AND
                                                P_ORD_R_R.IS_SEVKIYAT IS NULL
                                        UNION ALL
                                            SELECT 
                                                0 AS STOCK_ARTIR,
                                                (P_ORD_R_R.AMOUNT)*-1 AS STOCK_AZALT,
                                                P_ORD_R_R.STOCK_ID,
                                                ISNULL(P_ORD.SPEC_MAIN_ID,0) SPEC_MAIN_ID
                                            FROM 
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS P_ORD_R,
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDER_RESULTS_ROW P_ORD_R_R
                                                JOIN #attributes.dsn#.fnsplit(@stock_id_list,',') AS XXX on XXX.item = P_ORD_R_R.STOCK_ID,
                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCTION_ORDERS P_ORD
                                            WHERE
                                                P_ORD.IS_STOCK_RESERVED=1 AND
                                                P_ORD.SPEC_MAIN_ID IS NOT NULL AND
                                                P_ORD.P_ORDER_ID = P_ORD_R.P_ORDER_ID AND
                                                P_ORD_R_R.PR_ORDER_ID=P_ORD_R.PR_ORDER_ID AND
                                                P_ORD_R_R.TYPE=2 AND
                                                P_ORD_R.IS_STOCK_FIS=1 AND
                                                P_ORD_R_R.IS_SEVKIYAT <> 1
                                ) T1
                            GROUP BY 
                                STOCK_ID,
                                T1.SPEC_MAIN_ID
                            )A1
                        ) T1
                    GROUP BY
                            STOCK_ID,
                            SPEC_MAIN_ID
                        ) AS GET_STOCK_LAST
                END
        
                END           
        END

</cfquery><cfquery name="CREATE_PERIOD_SP" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE  PROCEDURE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SpGetStockLastStrategy] AS
	BEGIN
		SELECT 
			SUM(REAL_STOCK) REAL_STOCK,
			SUM(PRODUCT_STOCK) PRODUCT_STOCK,
			SUM(RESERVED_STOCK) RESERVED_STOCK,
			SUM(PURCHASE_PROD_STOCK) PURCHASE_PROD_STOCK,
			SUM(RESERVED_PROD_STOCK) RESERVED_PROD_STOCK,
			SUM(PRODUCT_STOCK+RESERVED_STOCK) SALEABLE_STOCK,
			SUM(RESERVE_SALE_ORDER_STOCK) RESERVE_SALE_ORDER_STOCK,
			SUM(NOSALE_STOCK) NOSALE_STOCK,
			SUM(BELONGTO_INSTITUTION_STOCK) BELONGTO_INSTITUTION_STOCK,
			SUM(RESERVE_PURCHASE_ORDER_STOCK) RESERVE_PURCHASE_ORDER_STOCK,
			SUM(PRODUCTION_ORDER_STOCK) PRODUCTION_ORDER_STOCK,
			SUM(NOSALE_RESERVED_STOCK) AS NOSALE_RESERVED_STOCK,
			PRODUCT_ID, 
			STOCK_ID,
			DEPARTMENT_ID,
			LOCATION_ID
	INTO  ####TStockLastProfile	
	FROM
		(
			SELECT
				(SR.STOCK_IN - SR.STOCK_OUT) AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS PURCHASE_PROD_STOCK,
				0 AS RESERVED_PROD_STOCK,
				0 AS RESERVE_SALE_ORDER_STOCK,
				0 AS NOSALE_STOCK, 
				0 AS BELONGTO_INSTITUTION_STOCK,
				0 AS RESERVE_PURCHASE_ORDER_STOCK,
				0 AS PRODUCTION_ORDER_STOCK,
				0 AS NOSALE_RESERVED_STOCK,
				SR.STOCK_ID,
				SR.PRODUCT_ID,
				SR.STORE AS DEPARTMENT_ID,
				SR.STORE_LOCATION AS LOCATION_ID
			FROM
				STOCKS_ROW SR 
			WHERE
				SR.STORE IS NOT NULL AND
				SR.STORE_LOCATION IS NOT NULL 
		UNION ALL
			SELECT
				(SR.STOCK_IN - SR.STOCK_OUT) AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS PURCHASE_PROD_STOCK,
				0 AS RESERVED_PROD_STOCK,
				0 AS RESERVE_SALE_ORDER_STOCK,
				0 AS NOSALE_STOCK, 
				0 AS BELONGTO_INSTITUTION_STOCK,
				0 AS RESERVE_PURCHASE_ORDER_STOCK,
				0 AS PRODUCTION_ORDER_STOCK,
				0 AS NOSALE_RESERVED_STOCK,
				SR.STOCK_ID,
				SR.PRODUCT_ID,
				'-1'  AS DEPARTMENT_ID,
				'-1'  AS LOCATION_ID
			FROM
				STOCKS_ROW SR 
			WHERE
				UPD_ID IS NULL
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				(SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS PURCHASE_PROD_STOCK,
				0 AS RESERVED_PROD_STOCK,
				0 AS RESERVE_SALE_ORDER_STOCK,
				0 AS NOSALE_STOCK, 
				0 AS BELONGTO_INSTITUTION_STOCK,
				0 AS RESERVE_PURCHASE_ORDER_STOCK,
				0 AS PRODUCTION_ORDER_STOCK,
				0 AS NOSALE_RESERVED_STOCK,
				SR.STOCK_ID,
				SR.PRODUCT_ID,
				SR.STORE AS DEPARTMENT_ID,
				SR.STORE_LOCATION AS LOCATION_ID
			FROM
				#attributes.dsn#.STOCKS_LOCATION SL,
				STOCKS_ROW SR  
			WHERE
				SR.STORE =SL.DEPARTMENT_ID
				AND SR.STORE_LOCATION=SL.LOCATION_ID
				AND SL.NO_SALE = 0
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				-1*(SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS PURCHASE_PROD_STOCK,
				0 AS RESERVED_PROD_STOCK,
				0 AS RESERVE_SALE_ORDER_STOCK,
				0 AS NOSALE_STOCK, 
				0 AS BELONGTO_INSTITUTION_STOCK,
				0 AS RESERVE_PURCHASE_ORDER_STOCK,
				0 AS PRODUCTION_ORDER_STOCK,
				0 AS NOSALE_RESERVED_STOCK,
				SR.STOCK_ID,
				SR.PRODUCT_ID,
				SR.STORE AS DEPARTMENT_ID,
				SR.STORE_LOCATION AS LOCATION_ID
			FROM
				STOCKS_ROW SR  ,
				#attributes.dsn#.STOCKS_LOCATION SL 
			WHERE	
				SR.STORE = SL.DEPARTMENT_ID AND
				SR.STORE_LOCATION = SL.LOCATION_ID AND
				ISNULL(SL.IS_SCRAP,0)=1
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS PURCHASE_PROD_STOCK,
				0 AS RESERVED_PROD_STOCK,
				0 AS RESERVE_SALE_ORDER_STOCK,
				(SR.STOCK_IN - SR.STOCK_OUT) AS NOSALE_STOCK,
				0 AS BELONGTO_INSTITUTION_STOCK,
				0 AS RESERVE_PURCHASE_ORDER_STOCK,
				0 AS PRODUCTION_ORDER_STOCK,
				0 AS NOSALE_RESERVED_STOCK,
				SR.STOCK_ID,
				SR.PRODUCT_ID,
				SR.STORE AS DEPARTMENT_ID,
				SR.STORE_LOCATION AS LOCATION_ID
			FROM
				#attributes.dsn#.STOCKS_LOCATION SL,
				STOCKS_ROW SR  
			WHERE
				SR.STORE =SL.DEPARTMENT_ID
				AND SR.STORE_LOCATION=SL.LOCATION_ID
				AND SL.NO_SALE =1
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS PURCHASE_PROD_STOCK,
				0 AS RESERVED_PROD_STOCK,
				0 AS RESERVE_SALE_ORDER_STOCK,
				0 AS NOSALE_STOCK, 
				(SR.STOCK_IN - SR.STOCK_OUT) AS BELONGTO_INSTITUTION_STOCK,
				0 AS RESERVE_PURCHASE_ORDER_STOCK,
				0 AS PRODUCTION_ORDER_STOCK,
				0 AS NOSALE_RESERVED_STOCK,
				SR.STOCK_ID,
				SR.PRODUCT_ID,
				SR.STORE AS DEPARTMENT_ID,
				SR.STORE_LOCATION AS LOCATION_ID
			FROM
				#attributes.dsn#.STOCKS_LOCATION SL,
				STOCKS_ROW SR  
			WHERE
				SR.STORE =SL.DEPARTMENT_ID
				AND SR.STORE_LOCATION=SL.LOCATION_ID
				AND SL.BELONGTO_INSTITUTION =1
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				((RESERVE_STOCK_OUT-STOCK_OUT)*-1) AS RESERVED_STOCK,
				0 AS PURCHASE_PROD_STOCK,
				0 AS RESERVED_PROD_STOCK,
				(RESERVE_STOCK_OUT-STOCK_OUT) AS RESERVE_SALE_ORDER_STOCK,
				0 AS NOSALE_STOCK,
				0 AS BELONGTO_INSTITUTION_STOCK,
				(RESERVE_STOCK_IN-STOCK_IN) AS RESERVE_PURCHASE_ORDER_STOCK,
				0 AS PRODUCTION_ORDER_STOCK,
				0 AS NOSALE_RESERVED_STOCK,
				ORR.STOCK_ID,
				ORR.PRODUCT_ID,
				ORDS.DELIVER_DEPT_ID AS DEPARTMENT_ID,
				ORDS.LOCATION_ID AS LOCATION_ID
			FROM
				#attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR  , 
				#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS
			WHERE
				ORDS.RESERVED = 1 AND 
				ORDS.ORDER_STATUS = 1 AND	
				ORDS.DELIVER_DEPT_ID IS NOT NULL AND
				ORDS.LOCATION_ID IS NOT NULL AND
				ORR.ORDER_ID = ORDS.ORDER_ID AND 
				((RESERVE_STOCK_IN-STOCK_IN)>0 OR (RESERVE_STOCK_OUT-STOCK_OUT)>0)
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				(RESERVE_STOCK_IN-STOCK_IN) AS RESERVED_STOCK,
				0 AS PURCHASE_PROD_STOCK,
				0 AS RESERVED_PROD_STOCK,
				0 AS RESERVE_SALE_ORDER_STOCK,
				0 AS NOSALE_STOCK,
				0 AS BELONGTO_INSTITUTION_STOCK,
				0 AS RESERVE_PURCHASE_ORDER_STOCK,
				0 AS PRODUCTION_ORDER_STOCK,
				0 AS NOSALE_RESERVED_STOCK,
				ORR.STOCK_ID,
				ORR.PRODUCT_ID,
				ORDS.DELIVER_DEPT_ID AS DEPARTMENT_ID,
				ORDS.LOCATION_ID AS LOCATION_ID
			FROM
				#attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR , 
				#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS,
				#attributes.dsn#.STOCKS_LOCATION SL
			WHERE
				ORDS.RESERVED = 1 AND 
				ORDS.ORDER_STATUS = 1 AND
				ORDS.DELIVER_DEPT_ID=SL.DEPARTMENT_ID AND
				ORDS.LOCATION_ID=SL.LOCATION_ID AND
				SL.NO_SALE=0 AND
				ORDS.PURCHASE_SALES=0 AND
				ORDS.ORDER_ZONE=0 AND
				ORR.ORDER_ID = ORDS.ORDER_ID AND 
				(RESERVE_STOCK_IN-STOCK_IN)>0	
		UNION ALL
			SELECT
				0 AS REAL_STOCK,
				0 AS PRODUCT_STOCK,
				0 AS RESERVED_STOCK,
				0 AS PURCHASE_PROD_STOCK,
				0 AS RESERVED_PROD_STOCK,
				0 AS RESERVE_SALE_ORDER_STOCK,
				0 AS NOSALE_STOCK,
				0 AS BELONGTO_INSTITUTION_STOCK,
				0 AS RESERVE_PURCHASE_ORDER_STOCK,
				0 AS PRODUCTION_ORDER_STOCK,
				(RESERVE_STOCK_IN-STOCK_IN) AS NOSALE_RESERVED_STOCK,
				ORR.STOCK_ID,
				ORR.PRODUCT_ID,
				ORDS.DELIVER_DEPT_ID AS DEPARTMENT_ID,
				ORDS.LOCATION_ID AS LOCATION_ID
			FROM
				#attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR , 
				#attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS,
				#attributes.dsn#.STOCKS_LOCATION SL
			WHERE
				ORDS.RESERVED = 1 AND 
				ORDS.ORDER_STATUS = 1 AND	
				ORDS.DELIVER_DEPT_ID IS NOT NULL AND
				ORDS.LOCATION_ID IS NOT NULL AND
				ORDS.DELIVER_DEPT_ID=SL.DEPARTMENT_ID AND
				ORDS.LOCATION_ID=SL.LOCATION_ID AND
				SL.NO_SALE=1 AND
				ORDS.PURCHASE_SALES=0 AND
				ORDS.ORDER_ZONE=0 AND
				ORR.ORDER_ID = ORDS.ORDER_ID AND 
				(RESERVE_STOCK_IN-STOCK_IN)>0
			UNION ALL
			SELECT
					0 AS REAL_STOCK,
					0 AS PRODUCT_STOCK,
					(STOCK_ARTIR-STOCK_AZALT) AS RESERVED_STOCK,
					STOCK_ARTIR AS PURCHASE_PROD_STOCK,
					STOCK_AZALT AS RESERVED_PROD_STOCK,
					0  AS RESERVE_SALE_ORDER_STOCK,
					0 AS NOSALE_STOCK,
					0 AS BELONGTO_INSTITUTION_STOCK,
					0  AS RESERVE_PURCHASE_ORDER_STOCK,
					(STOCK_ARTIR-STOCK_AZALT)  AS PRODUCTION_ORDER_STOCK,
					0 AS NOSALE_RESERVED_STOCK,
					GET_PRODUCTION_RESERVED_LOCATION.STOCK_ID,
					GET_PRODUCTION_RESERVED_LOCATION.PRODUCT_ID,
					GET_PRODUCTION_RESERVED_LOCATION.DEPARTMENT_ID,
					GET_PRODUCTION_RESERVED_LOCATION.LOCATION_ID
				FROM
					#attributes.dsn#_#get_period.our_company_id#.GET_PRODUCTION_RESERVED_LOCATION 
		) T1
		GROUP BY
			PRODUCT_ID, 
			STOCK_ID,
			DEPARTMENT_ID,
			LOCATION_ID
	END

</cfquery><cfquery name="CREATE_PERIOD_SP" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE PROCEDURE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SpGetStockStrategy]
        AS 
        SELECT XXX.* 
                INTO  ####TStocStrategy
                FROM 
                ####GetStockProfile gsp
                JOIN
                (
            
                    SELECT
                        PRODUCT_ID,
                        STOCK_ID,
                        SUM(MINIMUM_STOCK) AS MINIMUM_STOCK,
                        SUM(MAXIMUM_STOCK) AS MAXIMUM_STOCK,
                        SUM(REPEAT_STOCK_VALUE) AS REPEAT_STOCK_VALUE,
                        SUM(BLOCK_STOCK_VALUE) AS BLOCK_STOCK_VALUE,
                        1 AS STRATEGY_TYPE,
                        DEPARTMENT_ID,
                        PROVISION_TIME,
                        IS_LIVE_ORDER,
                        MINIMUM_ORDER_STOCK_VALUE,
                        MAXIMUM_ORDER_STOCK_VALUE,
                        STOCK_ACTION_ID
                    FROM
                    (
                        SELECT
                            TOTAL_AMOUNT AS MINIMUM_STOCK,
                            0 AS MAXIMUM_STOCK,
                            0 AS REPEAT_STOCK_VALUE,
                            0 AS BLOCK_STOCK_VALUE,
                            SS.PRODUCT_ID,
                            SS.STOCK_ID,
                            SS.DEPARTMENT_ID,
                            SS.PROVISION_TIME,
                            SS.IS_LIVE_ORDER,
                            SS.MINIMUM_ORDER_STOCK_VALUE,
                            SS.MAXIMUM_ORDER_STOCK_VALUE,
                            SS.STOCK_ACTION_ID
                        FROM
                            INVOICE_DAILY_SALES IDS,
                            #attributes.dsn#_#get_period.our_company_id#.STOCK_STRATEGY SS 
                        WHERE
                            IDS.STOCK_ID=SS.STOCK_ID				
                            AND DATEDIFF(day,IDS.INVOICE_DATE, getdate()) <= MINIMUM_STOCK
                            AND SS.STRATEGY_TYPE=1
                    UNION ALL
                        SELECT
                            0 AS MINIMUM_STOCK,
                            TOTAL_AMOUNT AS MAXIMUM_STOCK,
                            0 AS REPEAT_STOCK_VALUE,
                            0 AS BLOCK_STOCK_VALUE,
                            SS.PRODUCT_ID,
                            SS.STOCK_ID,
                            SS.DEPARTMENT_ID,
                            SS.PROVISION_TIME,
                            SS.IS_LIVE_ORDER,
                            SS.MINIMUM_ORDER_STOCK_VALUE,
                            SS.MAXIMUM_ORDER_STOCK_VALUE,
                            SS.STOCK_ACTION_ID
                        FROM
                            INVOICE_DAILY_SALES IDS,
                            #attributes.dsn#_#get_period.our_company_id#.STOCK_STRATEGY SS
                        WHERE
                            IDS.STOCK_ID=SS.STOCK_ID				
                            AND DATEDIFF(day,IDS.INVOICE_DATE, getdate()) <= MAXIMUM_STOCK
                            AND SS.STRATEGY_TYPE=1
                    UNION ALL
                        SELECT
                            0 AS MINIMUM_STOCK,
                            0 AS MAXIMUM_STOCK,
                            TOTAL_AMOUNT AS REPEAT_STOCK_VALUE,
                            0 AS BLOCK_STOCK_VALUE,
                            SS.PRODUCT_ID,
                            SS.STOCK_ID,
                            SS.DEPARTMENT_ID,
                            SS.PROVISION_TIME,
                            SS.IS_LIVE_ORDER,
                            SS.MINIMUM_ORDER_STOCK_VALUE,
                            SS.MAXIMUM_ORDER_STOCK_VALUE,
                            SS.STOCK_ACTION_ID
                        FROM
                            INVOICE_DAILY_SALES IDS,
                            #attributes.dsn#_#get_period.our_company_id#.STOCK_STRATEGY SS
                        WHERE
                            IDS.STOCK_ID=SS.STOCK_ID				
                            AND DATEDIFF(day,IDS.INVOICE_DATE, getdate()) <= REPEAT_STOCK_VALUE
                            AND SS.STRATEGY_TYPE=1 
                    ) AS ALL_TABLE
                    GROUP BY 
                        PRODUCT_ID,
                        STOCK_ID,
                        DEPARTMENT_ID,
                        PROVISION_TIME,
                        IS_LIVE_ORDER,
                        MINIMUM_ORDER_STOCK_VALUE,
                        MAXIMUM_ORDER_STOCK_VALUE,
                        STOCK_ACTION_ID
                UNION ALL
    
                    SELECT
                        PRODUCT_ID,
                        STOCK_ID,
                        MINIMUM_STOCK,
                        MAXIMUM_STOCK,
                        REPEAT_STOCK_VALUE,
                        BLOCK_STOCK_VALUE,
                        STRATEGY_TYPE,
                        DEPARTMENT_ID,
                        PROVISION_TIME,
                        IS_LIVE_ORDER,
                        MINIMUM_ORDER_STOCK_VALUE,
                        MAXIMUM_ORDER_STOCK_VALUE,
                        STOCK_ACTION_ID
                    FROM
                        #attributes.dsn#_#get_period.our_company_id#.STOCK_STRATEGY SS
                    WHERE
                        STRATEGY_TYPE=0	
                ) AS xxx ON gsp.STOCK_ID = XXX.STOCK_ID

</cfquery><cfquery name="CREATE_PERIOD_SP" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#"> 

CREATE PROCEDURE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[SpGetStoctProfile]
                AS 
                    BEGIN
                        
                        SELECT 
                            SUM(REAL_STOCK) REAL_STOCK,
                            SUM(PRODUCT_STOCK) PRODUCT_STOCK,
                            SUM(RESERVED_STOCK) RESERVED_STOCK,
                            SUM(PURCHASE_PROD_STOCK) PURCHASE_PROD_STOCK,
                            SUM(RESERVED_PROD_STOCK) RESERVED_PROD_STOCK,
                            SUM(PRODUCT_STOCK+RESERVED_STOCK) SALEABLE_STOCK,
                            SUM(RESERVE_SALE_ORDER_STOCK) RESERVE_SALE_ORDER_STOCK,
                            SUM(NOSALE_STOCK) NOSALE_STOCK,
                            SUM(BELONGTO_INSTITUTION_STOCK) BELONGTO_INSTITUTION_STOCK,
                            SUM(RESERVE_PURCHASE_ORDER_STOCK) RESERVE_PURCHASE_ORDER_STOCK,
                            SUM(PRODUCTION_ORDER_STOCK) PRODUCTION_ORDER_STOCK,
                            SUM(NOSALE_RESERVED_STOCK) AS NOSALE_RESERVED_STOCK,
                            T1.PRODUCT_ID, 
                            T1.STOCK_ID
                        INTO ####TStockProfile
                        FROM
                        (
                            SELECT
                                (SR.STOCK_IN - SR.STOCK_OUT) AS REAL_STOCK,
                                0 AS PRODUCT_STOCK,
                                0 AS RESERVED_STOCK,
                                0 AS PURCHASE_PROD_STOCK,
                                0 AS RESERVED_PROD_STOCK,
                                0 AS RESERVE_SALE_ORDER_STOCK,
                                0 AS NOSALE_STOCK, 
                                0 AS BELONGTO_INSTITUTION_STOCK,
                                0 AS RESERVE_PURCHASE_ORDER_STOCK,
                                0 AS PRODUCTION_ORDER_STOCK,
                                0 AS NOSALE_RESERVED_STOCK,
                                SR.STOCK_ID,
                                SR.PRODUCT_ID
                            FROM
                                STOCKS_ROW SR
                                JOIN ####GetStockProfile GSP ON SR.STOCK_ID = GSP.STOCK_ID 
                            UNION ALL			
                                SELECT
                                    0 AS REAL_STOCK,
                                    (SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK,
                                    0 AS RESERVED_STOCK,
                                    0 AS PURCHASE_PROD_STOCK,
                                    0 AS RESERVED_PROD_STOCK,
                                    0 AS RESERVE_SALE_ORDER_STOCK,
                                    0 AS NOSALE_STOCK, 
                                    0 AS BELONGTO_INSTITUTION_STOCK,
                                    0 AS RESERVE_PURCHASE_ORDER_STOCK,
                                    0 AS PRODUCTION_ORDER_STOCK,
                                    0 AS NOSALE_RESERVED_STOCK,
                                    SR.STOCK_ID,
                                    SR.PRODUCT_ID
                                FROM
                                    #attributes.dsn#.STOCKS_LOCATION SL,
                                    STOCKS_ROW SR
                                    JOIN ####GetStockProfile GSP ON SR.STOCK_ID = GSP.STOCK_ID 
                                WHERE
                                    SR.STORE =SL.DEPARTMENT_ID
                                    AND SR.STORE_LOCATION=SL.LOCATION_ID
                                    AND SL.NO_SALE = 0
                            UNION ALL
                                SELECT
                                    0 AS REAL_STOCK,
                                    -1*(SR.STOCK_IN - SR.STOCK_OUT) AS PRODUCT_STOCK,
                                    0 AS RESERVED_STOCK,
                                    0 AS PURCHASE_PROD_STOCK,
                                    0 AS RESERVED_PROD_STOCK,
                                    0 AS RESERVE_SALE_ORDER_STOCK,
                                    0 AS NOSALE_STOCK, 
                                    0 AS BELONGTO_INSTITUTION_STOCK,
                                    0 AS RESERVE_PURCHASE_ORDER_STOCK,

                                    0 AS PRODUCTION_ORDER_STOCK,
                                    0 AS NOSALE_RESERVED_STOCK,
                                    SR.STOCK_ID,
                                    SR.PRODUCT_ID
                                FROM
                                    STOCKS_ROW SR JOIN ####GetStockProfile GSP ON SR.STOCK_ID = GSP.STOCK_ID  ,
                                    #attributes.dsn#.STOCKS_LOCATION SL 
                                WHERE	
                                    SR.STORE = SL.DEPARTMENT_ID AND
                                    SR.STORE_LOCATION = SL.LOCATION_ID AND
                                    ISNULL(SL.IS_SCRAP,0)=1
                            UNION ALL			
                                SELECT
                                    0 AS REAL_STOCK,
                                    0 AS PRODUCT_STOCK,
                                    0 AS RESERVED_STOCK,
                                    0 AS PURCHASE_PROD_STOCK,
                                    0 AS RESERVED_PROD_STOCK,
                                    0 AS RESERVE_SALE_ORDER_STOCK,
                                    (SR.STOCK_IN - SR.STOCK_OUT) AS NOSALE_STOCK,
                                    0 AS BELONGTO_INSTITUTION_STOCK,
                                    0 AS RESERVE_PURCHASE_ORDER_STOCK,
                                    0 AS PRODUCTION_ORDER_STOCK,
                                    0 AS NOSALE_RESERVED_STOCK,
                                    SR.STOCK_ID,
                                    SR.PRODUCT_ID
                                FROM
                                    #attributes.dsn#.STOCKS_LOCATION SL,
                                    STOCKS_ROW SR JOIN ####GetStockProfile GSP ON SR.STOCK_ID = GSP.STOCK_ID 
                                WHERE
                                    SR.STORE =SL.DEPARTMENT_ID
                                    AND SR.STORE_LOCATION=SL.LOCATION_ID
                                    AND SL.NO_SALE =1
                            UNION ALL
                                SELECT
                                    0 AS REAL_STOCK,
                                    0 AS PRODUCT_STOCK,
                                    0 AS RESERVED_STOCK,
                                    0 AS PURCHASE_PROD_STOCK,
                                    0 AS RESERVED_PROD_STOCK,
                                    0 AS RESERVE_SALE_ORDER_STOCK,
                                    0 AS NOSALE_STOCK, 
                                    (SR.STOCK_IN - SR.STOCK_OUT) AS BELONGTO_INSTITUTION_STOCK,
                                    0 AS RESERVE_PURCHASE_ORDER_STOCK,
                                    0 AS PRODUCTION_ORDER_STOCK,
                                    0 AS NOSALE_RESERVED_STOCK,
                                    SR.STOCK_ID,
                                    SR.PRODUCT_ID
                                FROM
                                    #attributes.dsn#.STOCKS_LOCATION SL,
                                    STOCKS_ROW SR JOIN ####GetStockProfile GSP ON SR.STOCK_ID = GSP.STOCK_ID 
                                WHERE
                                    SR.STORE =SL.DEPARTMENT_ID
                                    AND SR.STORE_LOCATION=SL.LOCATION_ID
                                    AND SL.BELONGTO_INSTITUTION =1
                            UNION ALL			
                                SELECT
                                    0 AS REAL_STOCK,
                                    0 AS PRODUCT_STOCK,
                                    ((RESERVE_STOCK_OUT-STOCK_OUT)*-1) AS RESERVED_STOCK,
                                    0 AS PURCHASE_PROD_STOCK,
                                    0 AS RESERVED_PROD_STOCK,
                                    (RESERVE_STOCK_OUT-STOCK_OUT) AS RESERVE_SALE_ORDER_STOCK,
                                    0 AS NOSALE_STOCK,
                                    0 AS BELONGTO_INSTITUTION_STOCK,
                                    (RESERVE_STOCK_IN-STOCK_IN) AS RESERVE_PURCHASE_ORDER_STOCK,
                                    0 AS PRODUCTION_ORDER_STOCK,
                                    0 AS NOSALE_RESERVED_STOCK,
                                    ORR.STOCK_ID,
                                    ORR.PRODUCT_ID
                                FROM
                                    #attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR JOIN ####GetStockProfile GSP ON ORR.STOCK_ID = GSP.STOCK_ID , 
                                    #attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS
                                WHERE
                                    ORDS.RESERVED = 1 AND 
                                    ORDS.ORDER_STATUS = 1 AND	
                                    ORR.ORDER_ID = ORDS.ORDER_ID AND
                                    ((RESERVE_STOCK_IN-STOCK_IN)>0 OR (RESERVE_STOCK_OUT-STOCK_OUT)>0)	
                            UNION ALL			
                                SELECT
                                    0 AS REAL_STOCK,
                                    0 AS PRODUCT_STOCK,
                                    (RESERVE_STOCK_IN-STOCK_IN) AS RESERVED_STOCK,
                                    0 AS PURCHASE_PROD_STOCK,
                                    0 AS RESERVED_PROD_STOCK,
                                    0 AS RESERVE_SALE_ORDER_STOCK,
                                    0 AS NOSALE_STOCK,
                                    0 AS BELONGTO_INSTITUTION_STOCK,
                                    0 AS RESERVE_PURCHASE_ORDER_STOCK,
                                    0 AS PRODUCTION_ORDER_STOCK,
                                    0 AS NOSALE_RESERVED_STOCK,
                                    ORR.STOCK_ID,
                                    ORR.PRODUCT_ID
                                FROM
                                    #attributes.dsn#.STOCKS_LOCATION SL,
                                    #attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR JOIN ####GetStockProfile GSP ON ORR.STOCK_ID = GSP.STOCK_ID , 
                                    #attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS
                                WHERE
                                    ORDS.DELIVER_DEPT_ID=SL.DEPARTMENT_ID AND
                                    ORDS.LOCATION_ID=SL.LOCATION_ID AND
                                    SL.NO_SALE = 0 AND
                                    ORDS.PURCHASE_SALES=0 AND
                                    ORDS.ORDER_ZONE=0 AND
                                    ORDS.RESERVED = 1 AND 
                                    ORDS.ORDER_STATUS = 1 AND	
                                    ORR.ORDER_ID = ORDS.ORDER_ID AND
                                    (RESERVE_STOCK_IN-STOCK_IN)>0
                            UNION ALL			
                                SELECT
                                    0 AS REAL_STOCK,
                                    0 AS PRODUCT_STOCK,
                                    0 AS RESERVED_STOCK,
                                    0 AS PURCHASE_PROD_STOCK,
                                    0 AS RESERVED_PROD_STOCK,
                                    0 AS RESERVE_SALE_ORDER_STOCK,
                                    0 AS NOSALE_STOCK,
                                    0 AS BELONGTO_INSTITUTION_STOCK,
                                    0 AS RESERVE_PURCHASE_ORDER_STOCK,
                                    0 AS PRODUCTION_ORDER_STOCK,
                                    (RESERVE_STOCK_IN-STOCK_IN) AS NOSALE_RESERVED_STOCK,
                                    ORR.STOCK_ID,
                                    ORR.PRODUCT_ID
                                FROM
                                    #attributes.dsn#.STOCKS_LOCATION SL,
                                    #attributes.dsn#_#get_period.our_company_id#.GET_ORDER_ROW_RESERVED ORR JOIN ####GetStockProfile GSP ON ORR.STOCK_ID = GSP.STOCK_ID , 
                                    #attributes.dsn#_#get_period.our_company_id#.ORDERS ORDS
                                WHERE
                                    ORDS.DELIVER_DEPT_ID=SL.DEPARTMENT_ID AND
                                    ORDS.LOCATION_ID=SL.LOCATION_ID AND
                                    SL.NO_SALE = 1 AND
                                    ORDS.PURCHASE_SALES=0 AND
                                    ORDS.ORDER_ZONE=0 AND
                                    ORDS.RESERVED = 1 AND 
                                    ORDS.ORDER_STATUS = 1 AND	
                                    ORR.ORDER_ID = ORDS.ORDER_ID AND
                                    (RESERVE_STOCK_IN-STOCK_IN)>0
                            UNION ALL			
                                SELECT
                                    0 AS REAL_STOCK,
                                    0 AS PRODUCT_STOCK,
                                    ((RESERVE_STOCK_IN-STOCK_IN) + ((RESERVE_STOCK_OUT-STOCK_OUT)*-1)) AS RESERVED_STOCK,
                                    0 AS PURCHASE_PROD_STOCK,
                                    0 AS RESERVED_PROD_STOCK,
                                    (RESERVE_STOCK_OUT-STOCK_OUT) AS RESERVE_SALE_ORDER_STOCK,
                                    0 AS NOSALE_STOCK,
                                    0 AS BELONGTO_INSTITUTION_STOCK,
                                    (RESERVE_STOCK_IN-STOCK_IN) AS RESERVE_PURCHASE_ORDER_STOCK,
                                    0 AS PRODUCTION_ORDER_STOCK,
                                    0 AS NOSALE_RESERVED_STOCK,
                                    ORR.STOCK_ID,
                                    ORR.PRODUCT_ID
                                FROM
                                    #attributes.dsn#_#get_period.our_company_id#.ORDER_ROW_RESERVED  ORR JOIN ####GetStockProfile GSP ON ORR.STOCK_ID = GSP.STOCK_ID 
                                WHERE
                                    ORDER_ID IS NULL
                                    AND SHIP_ID IS NULL
                                    AND INVOICE_ID IS NULL
                            UNION ALL
                                SELECT
                                    0 AS REAL_STOCK,
                                    0 AS PRODUCT_STOCK,
                                    (STOCK_ARTIR-STOCK_AZALT) AS RESERVED_STOCK,
                                    STOCK_ARTIR AS PURCHASE_PROD_STOCK,
                                    STOCK_AZALT AS RESERVED_PROD_STOCK,
                                    0  AS RESERVE_SALE_ORDER_STOCK,
                                    0 AS NOSALE_STOCK,
                                    0 AS BELONGTO_INSTITUTION_STOCK,
                                    0  AS RESERVE_PURCHASE_ORDER_STOCK,
                                    (STOCK_ARTIR-STOCK_AZALT)  AS PRODUCTION_ORDER_STOCK,
                                    0 AS NOSALE_RESERVED_STOCK,
                                    GSP.STOCK_ID,
                                    GSP.PRODUCT_ID
                                FROM
                                    #attributes.dsn#_#get_period.our_company_id#.GET_PRODUCTION_RESERVED JOIN ####GetStockProfile GSP ON GET_PRODUCTION_RESERVED.STOCK_ID = GSP.STOCK_ID  
                        ) T1 
                        GROUP BY
                            t1.PRODUCT_ID, 
                            t1.STOCK_ID
                END
</cfquery>


<cfquery name="CREATE_PERIOD_DB_SP" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#">
CREATE PROCEDURE [#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#].[UPD_SHIP_COST]
            @aktarim_is_location_based_cost smallint,
            @is_prod_cost_type bit
        AS
        BEGIN
        
            SET NOCOUNT ON;
             IF ( @aktarim_is_location_based_cost = 1  and @is_prod_cost_type = 0 )
                 BEGIN
                      UPDATE
                                SHIP_ROW
                                SET
                                    COST_PRICE=ISNULL(XXX.p1,0),            
                                    EXTRA_COST=ISNULL((XXX.r1),0)
                                            
                                FROM 

                                    SHIP_ROW
                                OUTER APPLY 
                                    (
                                        SELECT
                                                    TOP 1 
                                              
                                                             ROUND((PURCHASE_NET_SYSTEM_LOCATION),4) AS p1
                                                            ,ROUND((PURCHASE_EXTRA_COST_SYSTEM_LOCATION),4) AS r1
                                                
                                                    FROM 
                                                        #attributes.dsn#_#get_period.our_company_id#.PRODUCT_COST GPCP
                                                    WHERE
                                                            GPCP.START_DATE <= (SELECT INV.SHIP_DATE FROM SHIP INV WHERE INV.SHIP_ID = SHIP_ROW.SHIP_ID)
                                                            AND GPCP.PRODUCT_ID = SHIP_ROW.PRODUCT_ID
                                                            AND ISNULL(GPCP.SPECT_MAIN_ID,0)=ISNULL((SELECT S.SPECT_MAIN_ID FROM #attributes.dsn#_#get_period.our_company_id#.SPECTS S WHERE S.SPECT_VAR_ID = SHIP_ROW.SPECT_VAR_ID),0)
                                                            AND GPCP.LOCATION_ID = (SELECT II.LOCATION FROM SHIP II WHERE II.SHIP_ID = SHIP_ROW.SHIP_ID)
                                                            AND GPCP.DEPARTMENT_ID = (SELECT II.DELIVER_STORE_ID FROM SHIP II WHERE II.SHIP_ID = SHIP_ROW.SHIP_ID)
                                                   ORDER BY GPCP.START_DATE DESC,GPCP.RECORD_DATE DESC,GPCP.PRODUCT_COST_ID DESC
                                    ) AS XXX
                                JOIN
                                    ####GET_INVOICE GET_INVOICE ON SHIP_ROW.SHIP_ID = GET_INVOICE.ACTION_ID AND GET_INVOICE.SHIP_TYPE_NEW=81
            
                END
            ELSE
                IF (@aktarim_is_location_based_cost = 0  and @is_prod_cost_type = 0)
                    BEGIN
                          UPDATE
                                SHIP_ROW
                            SET
                                COST_PRICE=ISNULL(XXX.p1,0),            
                                EXTRA_COST=ISNULL((XXX.r1),0)
                                            
                            FROM 
                                SHIP_ROW
                            OUTER APPLY 
                                (
                                    SELECT
                                                TOP 1 
                                                    ROUND((PURCHASE_NET_SYSTEM),4) AS p1,
                                                    ROUND((PURCHASE_EXTRA_COST_SYSTEM),4) AS r1
                                                FROM 
                                                    #attributes.dsn#_#get_period.our_company_id#.PRODUCT_COST GPCP
                                                WHERE
                                                    GPCP.START_DATE <= (SELECT INV.SHIP_DATE FROM SHIP INV WHERE INV.SHIP_ID = SHIP_ROW.SHIP_ID)
                                                    AND GPCP.PRODUCT_ID = SHIP_ROW.PRODUCT_ID
                                                    AND ISNULL(GPCP.SPECT_MAIN_ID,0)=ISNULL((SELECT S.SPECT_MAIN_ID FROM #attributes.dsn#_#get_period.our_company_id#.SPECTS S WHERE S.SPECT_VAR_ID = SHIP_ROW.SPECT_VAR_ID),0)
                                                ORDER BY 
                                                    GPCP.START_DATE DESC,
                                                    GPCP.RECORD_DATE DESC,
                                                    GPCP.PRODUCT_COST_ID DESC
                                ) AS XXX
                            JOIN
                                ####GET_INVOICE GET_INVOICE ON SHIP_ROW.SHIP_ID = GET_INVOICE.ACTION_ID AND GET_INVOICE.SHIP_TYPE_NEW=81
                    END
        
                    ELSE
                        IF (@aktarim_is_location_based_cost = 1  and @is_prod_cost_type =1 )
                            BEGIN
                                  UPDATE
                                        SHIP_ROW
                                        SET
                                            COST_PRICE=ISNULL(XXX.p1,0),            
                                            EXTRA_COST=ISNULL((XXX.r1),0)
                                            
                                        FROM 
                                            SHIP_ROW
                                        OUTER APPLY 
                                            (
                                                SELECT
                                                            TOP 1 
                                                                    ROUND((PURCHASE_NET_SYSTEM_LOCATION),4) AS p1
                                                                   ,ROUND((PURCHASE_EXTRA_COST_SYSTEM_LOCATION),4) AS r1
        
                                                            FROM 
                                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCT_COST GPCP
                                                            WHERE
                                                                GPCP.START_DATE <= (SELECT INV.SHIP_DATE FROM SHIP INV WHERE INV.SHIP_ID = SHIP_ROW.SHIP_ID)
                                                                AND GPCP.PRODUCT_ID = SHIP_ROW.PRODUCT_ID
                                                                AND GPCP.LOCATION_ID = (SELECT II.LOCATION FROM SHIP II WHERE II.SHIP_ID = SHIP_ROW.SHIP_ID)
                                                                AND GPCP.DEPARTMENT_ID = (SELECT II.DELIVER_STORE_ID FROM SHIP II WHERE II.SHIP_ID = SHIP_ROW.SHIP_ID)
                                                            ORDER BY 
                                                                GPCP.START_DATE DESC,
                                                                GPCP.RECORD_DATE DESC,
                                                                GPCP.PRODUCT_COST_ID DESC
                                            ) AS XXX
                                        JOIN
                                            ####GET_INVOICE GET_INVOICE ON SHIP_ROW.SHIP_ID = GET_INVOICE.ACTION_ID AND GET_INVOICE.SHIP_TYPE_NEW=81
                            END
        
                        ELSE
                            IF (@aktarim_is_location_based_cost = 0  and @is_prod_cost_type = 1 )
                            BEGIN
                                  UPDATE
        
                                        SHIP_ROW
                                        SET
                                            COST_PRICE=ISNULL(XXX.p1,0),            
                                            EXTRA_COST=ISNULL((XXX.r1),0)
                                            
                                        FROM 
                                            SHIP_ROW
                                        OUTER APPLY 
                                            (
                                                SELECT
                                                            TOP 1 
                                                                    ROUND((PURCHASE_NET_SYSTEM),4) AS p1
                                                                    ,ROUND((PURCHASE_EXTRA_COST_SYSTEM),4) AS r1
                                                            FROM 
                                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCT_COST GPCP
                                                            WHERE
                                                                GPCP.START_DATE <= (SELECT INV.SHIP_DATE FROM SHIP INV WHERE INV.SHIP_ID = SHIP_ROW.SHIP_ID)
                                                                AND GPCP.PRODUCT_ID = SHIP_ROW.PRODUCT_ID
                                                            ORDER BY GPCP.START_DATE DESC,GPCP.RECORD_DATE DESC,GPCP.PRODUCT_COST_ID DESC
                                            ) AS XXX
                                        JOIN
                                            ####GET_INVOICE GET_INVOICE ON SHIP_ROW.SHIP_ID = GET_INVOICE.ACTION_ID AND GET_INVOICE.SHIP_TYPE_NEW=81
                            END
                     ELSE
                     IF ( @aktarim_is_location_based_cost = 2  and @is_prod_cost_type = 0 )
                         BEGIN
                              UPDATE
                                        SHIP_ROW
                                        SET
                                            COST_PRICE=ISNULL(XXX.p1,0),            
                                            EXTRA_COST=ISNULL((XXX.r1),0)
                                                    
                                        FROM 
        
                                            SHIP_ROW
                                        OUTER APPLY 
                                            (
                                                SELECT
                                                            TOP 1 
                                                      
                                                                     ROUND((PURCHASE_NET_SYSTEM_DEPARTMENT),4) AS p1
                                                                    ,ROUND((PURCHASE_EXTRA_COST_SYSTEM_DEPARTMENT),4) AS r1
                                                        
                                                            FROM 
                                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCT_COST GPCP
                                                            WHERE
                                                                    GPCP.START_DATE <= (SELECT INV.SHIP_DATE FROM SHIP INV WHERE INV.SHIP_ID = SHIP_ROW.SHIP_ID)
                                                                    AND GPCP.PRODUCT_ID = SHIP_ROW.PRODUCT_ID
                                                                    AND ISNULL(GPCP.SPECT_MAIN_ID,0)=ISNULL((SELECT S.SPECT_MAIN_ID FROM #attributes.dsn#_#get_period.our_company_id#.SPECTS S WHERE S.SPECT_VAR_ID = SHIP_ROW.SPECT_VAR_ID),0)
                                                                    AND GPCP.DEPARTMENT_ID = (SELECT II.DELIVER_STORE_ID FROM SHIP II WHERE II.SHIP_ID = SHIP_ROW.SHIP_ID)
                                                           ORDER BY GPCP.START_DATE DESC,GPCP.RECORD_DATE DESC,GPCP.PRODUCT_COST_ID DESC
                                            ) AS XXX
                                        JOIN
                                            ####GET_INVOICE GET_INVOICE ON SHIP_ROW.SHIP_ID = GET_INVOICE.ACTION_ID AND GET_INVOICE.SHIP_TYPE_NEW=81
                    
                        END
                    ELSE
                        IF (@aktarim_is_location_based_cost = 2  and @is_prod_cost_type =1 )
                            BEGIN
                                    UPDATE
                                        SHIP_ROW
                                        SET
                                            COST_PRICE=ISNULL(XXX.p1,0),            
                                            EXTRA_COST=ISNULL((XXX.r1),0)
                                                    
                                        FROM 
                                            SHIP_ROW
                                        OUTER APPLY 
                                            (
                                                SELECT
                                                            TOP 1 
                                                                    ROUND((PURCHASE_NET_SYSTEM_DEPARTMENT),4) AS p1
                                                                    ,ROUND((PURCHASE_EXTRA_COST_SYSTEM_DEPARTMENT),4) AS r1
                
                                                            FROM 
                                                                #attributes.dsn#_#get_period.our_company_id#.PRODUCT_COST GPCP
                                                            WHERE
                                                                GPCP.START_DATE <= (SELECT INV.SHIP_DATE FROM SHIP INV WHERE INV.SHIP_ID = SHIP_ROW.SHIP_ID)
                                                                AND GPCP.PRODUCT_ID = SHIP_ROW.PRODUCT_ID
                                                                AND GPCP.DEPARTMENT_ID = (SELECT II.DELIVER_STORE_ID FROM SHIP II WHERE II.SHIP_ID = SHIP_ROW.SHIP_ID)
                                                            ORDER BY 
                                                                GPCP.START_DATE DESC,
                                                                GPCP.RECORD_DATE DESC,
                                                                GPCP.PRODUCT_COST_ID DESC
                                            ) AS XXX
                                        JOIN
                                            ####GET_INVOICE GET_INVOICE ON SHIP_ROW.SHIP_ID = GET_INVOICE.ACTION_ID AND GET_INVOICE.SHIP_TYPE_NEW=81
                            END
        
        END
</cfquery>


<!--- SP EKLEME BASLANDI --->

<cfquery name="GET_COMPANY_PERIODS" datasource="#attributes.dsn#">
    SELECT PERIOD_YEAR FROM SETUP_PERIOD WHERE OUR_COMPANY_ID = #get_period.our_company_id#
</cfquery>
<cftransaction action="begin">
    <cftry>
        <cfquery name="drop_view" datasource="#attributes.dsn#_#get_period.our_company_id#">
            IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[GET_ALL_INVOICE_ROW]'))
                DROP VIEW [GET_ALL_INVOICE_ROW]
        </cfquery>
        <cfif get_company_periods.recordcount>
            <cfquery name="cr_view" datasource="#attributes.dsn#_#get_period.our_company_id#">
                CREATE VIEW [GET_ALL_INVOICE_ROW] AS
                <cfloop query="GET_COMPANY_PERIODS">
                    SELECT
                        INVOICE_ID,
                        SHIP_ID,
                        WRK_ROW_RELATION_ID,
                        AMOUNT,
                        WRK_ROW_ID
                    FROM
                        #attributes.dsn#_#get_company_periods.period_year#_#get_period.our_company_id#.INVOICE_ROW
                    WHERE
                        INVOICE_ID IN(SELECT S.INVOICE_ID FROM #attributes.dsn#_#get_company_periods.period_year#_#get_period.our_company_id#.INVOICE S WHERE ISNULL(S.IS_IPTAL,0) = 0)
                    <cfif currentrow neq get_company_periods.recordcount> UNION</cfif>
                </cfloop>				
            </cfquery>
        </cfif>
        <cfquery name="drop_view" datasource="#attributes.dsn#_#get_period.our_company_id#">
            IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'[GET_ALL_SHIP_ROW]'))
                DROP VIEW [GET_ALL_SHIP_ROW]
        </cfquery>
        <cfif get_company_periods.recordcount>
            <cfquery name="cr_view" datasource="#attributes.dsn#_#get_period.our_company_id#">
                CREATE VIEW [GET_ALL_SHIP_ROW] AS
                    <cfloop query="GET_COMPANY_PERIODS">
                        SELECT
                            SHIP_ID,
                            WRK_ROW_RELATION_ID,
                            WRK_ROW_ID,
                            AMOUNT
                        FROM
                            #attributes.dsn#_#get_company_periods.period_year#_#get_period.our_company_id#.SHIP_ROW
                        WHERE
                            SHIP_ID IN(SELECT S.SHIP_ID FROM #attributes.dsn#_#get_company_periods.period_year#_#get_period.our_company_id#.SHIP S WHERE ISNULL(S.IS_SHIP_IPTAL,0) = 0)
                        <cfif currentrow neq get_company_periods.recordcount> UNION</cfif>
                    </cfloop>
            </cfquery>		
        </cfif>
             <cftransaction action="commit">
        <cfcatch>
            <cftransaction action="rollback">
        </cfcatch>
    </cftry>
</cftransaction>
<!---İlgili firmanın E-Faturayı kullanıp kullanmadığı kontrol ediliyor.--->
<cfquery name="get_einvoice_info" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#">
		SELECT 
			IS_EFATURA 
		FROM 
			#attributes.dsn#.OUR_COMPANY_INFO 
		WHERE 
			IS_EFATURA = 1 AND 
			COMP_ID = #get_period.our_company_id#
</cfquery>
<cfif get_einvoice_info.recordcount><!---E-Fatura kullanıyorsa tablo create ediliyor.--->
	<cfquery name="set_einvoice_number" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#">	
			CREATE TABLE EINVOICE_NUMBER(
					[ID] [int] IDENTITY(1,1) NOT NULL,
					[EINVOICE_PREFIX] [varchar](50) NOT NULL,
					[EINVOICE_NUMBER] [varchar](50) ,
			CONSTRAINT [PK_EINVOICE_NUMBER] PRIMARY KEY CLUSTERED 
				(
					[ID] ASC
				)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON)
				) ON [PRIMARY]
	</cfquery><!---İlgili firmanın bir önceki dönem kaydı olup olmadığı kontrol ediliyor.--->
	<cfquery name="get_company_period_last_year" datasource="#attributes.dsn#">
			SELECT 
				PERIOD_YEAR 
			FROM 
				SETUP_PERIOD
			WHERE
				PERIOD_YEAR IN (#get_period.period_year-1#) AND 
				OUR_COMPANY_ID = #get_period.our_company_id#
	</cfquery>
    <cfif get_company_period_last_year.recordcount> <!---İlgili tabloda kayıt varmı--->
		<cfquery name="is_get_company_period_records" datasource="#attributes.dsn#_#get_company_period_last_year.period_year#_#get_period.our_company_id#">
			IF EXISTS(SELECT * FROM INFORMATION_SCHEMA.TABLES  WHERE TABLE_TYPE='BASE TABLE'  AND TABLE_NAME='EINVOICE_NUMBER' AND TABLE_SCHEMA = '#attributes.dsn#_#get_company_period_last_year.period_year#_#get_period.our_company_id#')
			SELECT 1 AS res ELSE SELECT 0 AS res;
		</cfquery>
		<cfif is_get_company_period_records.res>
		<cfquery name="get_company_period_records" datasource="#attributes.dsn#_#get_company_period_last_year.period_year#_#get_period.our_company_id#">
			SELECT EINVOICE_PREFIX FROM EINVOICE_NUMBER
		</cfquery>
		<cfif get_company_period_records.recordcount><!---Kayıt varsa aktarım işlemi yapılıyor.--->
		<cfquery name="transfer_einvoice_number" datasource="#attributes.dsn#_#get_period.period_year#_#get_period.our_company_id#">
			INSERT INTO [EINVOICE_NUMBER]
				([EINVOICE_PREFIX],
				 [EINVOICE_NUMBER])
			 (SELECT [EINVOICE_PREFIX],'000000001' FROM #attributes.dsn#_#get_company_period_last_year.period_year#_#get_period.our_company_id#.[EINVOICE_NUMBER])
		</cfquery>
		</cfif>
		</cfif>
	</cfif>
</cfif>
