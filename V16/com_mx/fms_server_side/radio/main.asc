/***************************************************************************************************************************************\
*	Radio Statiton																														*
*	Release 1.0																															*
*	Server side																															*
*	by Zafer Altun																														*
\***************************************************************************************************************************************/
/***************************************************************************************************************************************/
application.onAppStart = function ()
{
	application.authID = "7E44D70B-C762-6C79-117DFCB422ACCE18";
	application.admin_client = undefined;
	application.generalInfo = {broadcastIsOn: false, liveRequestIsOn: false, postIsOn: false, playbackIsOn: false, playbackVirtualName: "", playbackVolume: 0, jingleIsOn: false, jingleVolume: 0, liveStreams: new Array(), kj: null, surveyData: null};
	application.playbackStream = undefined;
	application.jingleStream = undefined;
	application.sharedData = SharedObject.get("sharedData", false);
	application.logFileNumber = 0;
	application.logFileSelected = false;
	
	checkLogFile();	
	writeToLogFile("RADIO APPLICATION IS STARTED");
}

application.onAppStop = function (info)
{
	writeToLogFile("LOG FILE CLOSED");
	writeToLogFile("|-----------------------------------------------------------------------------|");
	writeToLogFile("|------------------------------- END OF SEASON -------------------------------|");
	writeToLogFile("|-----------------------------------------------------------------------------|\n");
	application.logFile.close();
}


application.onConnect = function (newClient, clientName, authID, serverAddress, channelID)
{
	var _usernameCreatedAsRandom;
	
	function generateRandomName()
	{
		var _tName = "user_";
		
		for (i = 0; i < 16; i++)
		{
			_tName += Math.round(Math.random() * 9);
		}
		
		_usernameCreatedAsRandom = true;
		return _tName;
	}
	
	if (clientName == undefined){clientName = generateRandomName()};
	if (clientName != "admin")
	{
		while (clientName != undefined && getClientByUsername(clientName) != null)	// If name is given to another client already, get another random name until it is not given to a client
		{
			clientName = generateRandomName();
		}
	}
	
	newClient.name = clientName;
	newClient.writeAccess = "";
	newClient.serverAddress = serverAddress;
	newClient.channelID = channelID;
	application.acceptConnection(newClient);
	
	writeToLogFile("CONNECTED: " + newClient.name + " (" + newClient.ip + ")");
	
	if (clientName == "admin")
	{		
		if (application.admin_client == undefined && authID == application.authID)
		{
			newClient.writeAccess = "/";
			application.admin_client = newClient;
			application.admin_client.call("process", null, {processType: "getExternalData"});
			sendClientsInfo("list", undefined);
		} else if (application.admin_client != undefined && authID == application.authID){
			newClient.name = "admin (admin is already logged in)";
			newClient.call("process", null, {processType: "message", messageType: "error", errorNumber: "0", message: "Giriş engellendi !\n\nAdmin zaten oturum açmış durumda, lütfen daha sonra tekrar deneyin.."});
			return;
		} else if (authID != application.authID){
			newClient.name = "admin (forbidden)";
			newClient.call("process", null, {processType: "message", messageType: "error", errorNumber: "0", message: "Giriş engellendi !\n\nAdmin girişi yapmaya yetkiniz yok !"});
			return;
		}
	} else {
		var _pack = application.generalInfo;
		_pack.processType = "initInfo";
		if (_usernameCreatedAsRandom == true){_pack.username = clientName};		// Send user to its name if name is created as random
		newClient.call("process", null, _pack);
		sendClientsInfo("new", newClient);
	}
	
	newClient.process = function(pack) 
	{
		writeToLogFile("PROCESS REQUEST: " + pack.processType);
		
		switch(pack.processType)
		{
			case "directCommand":
				applyDirectCommand(pack, newClient);
				break;
			case "externalData":
				getStreamFileInfos(pack.data);
				break;
			case "controlPlayback":
				controlPlaybackStream(pack);
				break;
			case "controlJingle":
				controlJingleStream(pack);
				break;
			case "changeVolume":
				assignStreamVolume(pack.stream, pack.volume);
				break;
			case "addNewStream":
				addNewStream(pack);
				break;
			case "removeStream":
				removeStream(pack);
				break;
			case "userCommonForm":
				if (application.admin_client != undefined && application.generalInfo.broadcastIsOn == true)
				{
					application.admin_client.call("process", null, pack);
					newClient.call("process", null, {processType: pack.processType, formType: pack.formType, status: "ok"});
				} else {
					newClient.call("process", null, {processType: pack.processType, formType: pack.formType, status: "fail"});
				}
				break;
			case "liveRequest":
				if (application.admin_client != undefined && application.generalInfo.broadcastIsOn == true)
				{
					if (application.admin_client != newClient)
					{
						writeToLogFile("LIVE REQUEST FROM USER: " + pack.sender + " -> " + pack.command);
						application.admin_client.call("process", null, pack);
					} else {
						writeToLogFile("REPLY USER LIVE REQUEST: " + pack.sender + " -> " + pack.status);
						getClientByUsername(pack.sender).call("process", null, pack);
						getClientByUsername(pack.sender).writeAccess = (pack.status == "confirm" || pack.status == "publish" || pack.status == "unpublish")? "/": "";
					}
				}
				break;
			case "assignSurvey":
				writeToLogFile("ASSIGN SURVEY: " + pack.data);
				application.generalInfo.surveyData = pack.data;
				application.sharedData.send("process", {processType: "assignSurvey", data: pack.data});
				break;
		}
	}
}

application.onDisconnect = function(client)
{
	writeToLogFile("DISCONNECTED: " + client.name + " (" + client.ip + ")");
	
	if (client.name == "admin")
	{
		application.admin_client = undefined;
		closeAllBroadcast();
		setChannelStatus(client.serverAddress, client.channelID, 0);
	} else {
		if (application.admin_client != undefined){application.admin_client.call("process", null, {processType: "userDisconnected", username: client.name})};
		sendClientsInfo("remove", client);
	}
	
	garbageIdles();
}
/***************************************************************************************************************************************/
function applyDirectCommand(_pack, client)
{
	switch (_pack.command)
	{
		case "openBroadcast":
			application.generalInfo.broadcastIsOn = true;
			setChannelStatus(client.serverAddress, client.channelID, Number(application.generalInfo.broadcastIsOn));
			break;
		case "closeBroadcast":
			application.generalInfo.broadcastIsOn = false;
			setChannelStatus(client.serverAddress, client.channelID, Number(application.generalInfo.broadcastIsOn));
			break;
		case "assignLiveRequestPermission":
			application.generalInfo.liveRequestIsOn = _pack.permissionIsOn;
			break;
		case "assignPostPermission":
			application.generalInfo.postIsOn = _pack.permissionIsOn;
			break;
		case "assignKJ":
			application.generalInfo.kj = _pack.message;
			break;
	}
	
	if (_pack.command == "openBroadcast")
	{
		var __pack = application.generalInfo;
		__pack.processType = _pack.processType;
		__pack.command = _pack.command;
		_pack = __pack;
	}
	
	application.sharedData.send("process", _pack);
}

function sendClientsInfo(_infoType, _client)
{
	if (application.admin_client == undefined){return};
	
	var _clientInfoList = new Array();
	
	if (_infoType == "list")
	{
		for (i = 0; i < application.clients.length; i++)
		{
			_clientInfoList.unshift([application.clients[i].name, application.clients[i].ip]);
		}
	} else if (_infoType == "new" || _infoType == "remove"){
		_clientInfoList.push([_client.name, _client.ip]);
	}
	
	application.admin_client.call("process", null, {processType: "clientsInfo", infoType: _infoType, infoList: _clientInfoList});
}

function controlPlaybackStream(_pack)
{
	if (_pack.command == "play")
	{		
		if (application.playbackStream == undefined){application.playbackStream = Stream.get("playbackStream")};
		
		if (application.playbackStream)
		{
			writeToLogFile("PLAYBACK STREAM is publising: " + _pack.file);
			application.playbackStream.play(false);
			assignStreamVolume("playback", _pack.volume);
			application.playbackStream.onStatus = function(info)
			{
				writeToLogFile("PLAYBACK STREAM STATUS: " + info.code);
			}
			application.playbackStream.play(_pack.file, _pack.seekTime);
			application.sharedData.send("process", _pack);
			application.generalInfo.playbackIsOn = true;
			application.generalInfo.playbackVirtualName = _pack.stream;
			application.generalInfo.playbackVolume = _pack.volume;
		} else {
			writeToLogFile("ERROR | PLAYBACK STREAM: Stream.get(...)");
		}
	} else if (_pack.command == "pause" || _pack.command == "stop"){
		if (application.playbackStream)
		{
			application.playbackStream.play(false);
			application.playbackStream = undefined;
			application.generalInfo.playbackIsOn = false;
			application.generalInfo.playbackVirtualName = "";
			application.generalInfo.playbackVolume = 0;
			application.sharedData.send("process", _pack);
		}
	}
}

function controlJingleStream(_pack)
{
	if (_pack.command == "play")
	{
		application.jingleStream = Stream.get("jingleStream");
		
		if (application.jingleStream)
		{
			writeToLogFile("JINGLE STREAM is publising: " + _pack.file);
			assignStreamVolume("jingle", _pack.volume);
			application.jingleStream.onStatus = function(info)
			{
				writeToLogFile("JINGLE STREAM STATUS: " + info.code);
			}
			application.jingleStream.play(_pack.file, _pack.seekTime);
			application.sharedData.send("process", _pack);
			application.generalInfo.jingleIsOn = true;
			application.generalInfo.jingleVolume = _pack.volume;
		} else {
			writeToLogFile("ERROR | JINGLE STREAM: Stream.get(...)");
		}
	} else if (_pack.command == "stop"){
		if (application.jingleStream)
		{
			application.jingleStream.play(false);
			application.jingleStream = undefined;
			application.generalInfo.jingleIsOn = false;
			application.generalInfo.jingleVolume = 0;
			application.sharedData.send("process", _pack);
		}
	}
}

function assignStreamVolume(_stream, _volume)
{
	if (_stream == "playback")
	{
		application.generalInfo.playbackVolume = _volume;
	} else if (_stream == "jingle"){
		application.generalInfo.jingleVolume = _volume;
	}
	
	application.sharedData.send("process", {processType: "assignStreamVolume", stream: _stream, volume: _volume});
}

function addNewStream(pack)
{
	for (i = 0; i < application.generalInfo.liveStreams.length; i++)
	{
		if (application.generalInfo.liveStreams[i].stream == pack.stream){return};
	}
	
	writeToLogFile("ADD NEW STREAM: " + pack.stream);
	
	application.generalInfo.liveStreams.push({stream: pack.stream, volume: pack.volume});
	application.sharedData.send("process", pack);
}

function removeStream(pack)
{
	writeToLogFile("REMOVE STREAM: " + pack.stream);
	
	for (i = 0; i < application.generalInfo.liveStreams.length; i++)
	{
		if (application.generalInfo.liveStreams[i].stream == pack.stream)
		{
			application.generalInfo.liveStreams.splice(i, 1);
			break;
		}
	}
	
	application.sharedData.send("process", pack);
	garbageIdles();
}

function closeAllBroadcast()
{
	controlPlaybackStream({processType: "controlPlayback", command: "stop"});
	controlJingleStream({processType: "controlJingle", command: "stop"});
	application.sharedData.send("process", {processType: "directCommand", command: "closeBroadcast"});

	application.playbackStream = undefined;
	application.jingleStream = undefined;
	application.generalInfo = {broadcastIsOn: false, liveRequestIsOn: false, postIsOn: false, playbackIsOn: false, playbackVirtualName: "", playbackVolume: 0, jingleIsOn: false, jingleVolume: 0, liveStreams: new Array(), kj: null, surveyData: null};
}

function setChannelStatus(serverAddress, channelID, channelStatus)
{
	var req = new LoadVars();
	
	req.onHTTPStatus = function(httpStatus) 
	{			
		if (httpStatus != 200) trace("set channel status http status: " + httpStatus);
	}
	
	req.onLoad = function(success)
	{		
		if (!success) trace("set channel status success status: " + success);
	}
	
	req.onData = function(valData)
	{		
		if (valData == undefined || valData != undefined && valData != "true") trace("set channel status error: " + valData.substr(0, 2048));
	}
	
	req.fms_auth_id = application.authID;
	req.channel_type = 2;
	req.channel_id = channelID;
	req.status = channelStatus;
	req.fuseaction = "home.emptypopup_tvradio_channel_status";
	req.load("http://" + serverAddress + "/index.cfm");
}
/***************************************************************************************************************************************/
function getStreamFileInfos(_data)
{
	var _newData = new Array();

	for (i = 0; i < _data.length; i++)
	{
		_newData[i] = Stream.length(_data[i]);
	}
	
	application.admin_client.call("process", null, {processType: "externalDataInfos", data: _newData});
}

function getTimeInfo()
{
	var d = new Date();
	
	var _h = d.getHours();
	if (_h.toString().length == 1){_h = "0" + _h};
	
	var _m = d.getMinutes();
	if (_m.toString().length == 1){_m = "0" + _m};
	
	var _s = d.getSeconds();
	if (_s.toString().length == 1){_s = "0" + _s};
	
	var _day = d.getDate();
	if (_day.toString().length == 1){_day = "0" + _day};
	
	var _month = Math.round(d.getMonth() + 1);
	if (_month.toString().length == 1){_month = "0" + _month};
	
	var time = _h + ":" + _m + ":" + _s + " | " + _day + "." + _month + "." + d.getFullYear() + " ::: ";
	return time;
}

function garbageIdles()
{
	writeToLogFile("GARBAGE COLLECTOR");
	application.gc();
}

function getClientByUsername(__name)
{
	for (i = 0; i < application.clients.length; i++)
	{	
		if (String(application.clients[i].name) == String(__name))
		{
			return application.clients[i];	// return i
		}
	}
	
	return null;
}

function checkLogFile()
{
	var _maxLen = 1024 * 1024;	// 1 MB
	
	if (application.logFile == undefined){application.logFile = new File("log_" + application.logFileNumber + ".txt")};
	
	if (application.logFile.length >= _maxLen)
	{
		application.logFileSelected = false;
		
		while (application.logFileSelected == false)
		{
			application.logFile = new File("log_" + application.logFileNumber + ".txt");
			trace("log_" + application.logFileNumber + " length is " + application.logFile.length);
			if (application.logFile.length >= _maxLen)
			{
				application.logFileNumber++;
			} else {
				application.logFileSelected = true;
				
				if (application.logFile.exists){
					application.logFile.open("text", "append");
					writeToLogFile("LOG FILE OPENED");
			    } else {
					application.logFile.open("text", "append");
					writeToLogFile("LOG FILE CREATED");
				}
			}
		}
	} else {
		if (application.logFile.isOpen == false)
		{
			if (application.logFile.exists){
				application.logFile.open("text", "append");
				writeToLogFile("LOG FILE OPENED");
			} else {
				application.logFile.open("text", "append");
				writeToLogFile("LOG FILE CREATED");
			}
		}
	}
}

function writeToLogFile(_message)
{
	checkLogFile();
	application.logFile.write(getTimeInfo() + _message + "\n");
	application.logFile.flush();
	trace(getTimeInfo() + _message);
}