/***************************************************************************************************************************************\
*	Video Conferans																														*
*	Release 2																															*
*	Server side																															*
*	by Zafer Altun																														*
\***************************************************************************************************************************************/
/***************************************************************************************************************************************/
application.onAppStart = function ()
{
	application.authID = "7E44D70B-C762-6C79-117DFCB422ACCE18";
	application.sharedData = SharedObject.get("sharedData", false);
	
	trace("CONFERENCE APPLICATION IS STARTED. APPLICATION INSTANCE NAME IS " + getInstanceName());
}

application.onConnect = function (newClient, username, realname, deviceType, authID)
{	
	trace("CONNECTED: " + username + " (" + realname + ")(" + newClient.ip + ")");
	
	newClient.writeAccess = (authID == application.authID)? "/": "";
	
	if (getClientByUsername(username) != undefined)
	{
		newClient.username = "rejected because of already logged in: " + username;
		newClient.realname = realname;
		application.acceptConnection(newClient);
		newClient.call("process", null, {processType: "loginFail"});
		return;
	}
	
	newClient.username = username;
	newClient.realname = realname;
	newClient.deviceType = deviceType;
	newClient.deviceIsOpen = false;
	newClient.viewerList = new Array();
	application.acceptConnection(newClient);
	
	newClient.call("process", null, {processType: "userList", users: getUserList()});
	application.sharedData.send("process", {processType: "userJoin", user: {username: username, realname: realname, deviceType: deviceType, deviceIsOpen: newClient.deviceIsOpen}});
	
	newClient.process = function(pack) 
	{
		trace("PROCESS: " + pack.processType);
		
		switch(pack.processType)
		{
			case "message":
				if (pack.to == null)
				{
					application.sharedData.send("process", pack);
				} else {
					if (getClientByUsername(pack.to) != undefined)
					{
						pack.isPrivate = true;
						getClientByUsername(pack.to).call("process", null, pack);
					}
				}
				break;
			case "readyInfo":
				newClient.deviceIsOpen = true;
				application.sharedData.send("process", pack);
				break;
			case "assignViewInfo":
				if (getClientByUsername(pack.username) != undefined)
				{
					if (pack.viewProcess == "+")
					{
						if (newClient.username != pack.username)
						{
							newClient.viewerList.push(pack.username);
						}
					} else {
						for (v = 0; v < newClient.viewerList.length; v++)
						{
							if (newClient.viewerList[v] == pack.username)
							{
								newClient.viewerList.splice(v, 1);
								break;
							}
						}
					}
					
					getClientByUsername(pack.username).call("process", null, pack);
					break;
				}
				break;
			case "unpublishInfo":
				newClient.deviceIsOpen = false;
				application.sharedData.send("process", pack);
				break;
		}
	}
}

application.onDisconnect = function(client)
{
	trace("DISCONNECTED: " + client.username + " (" + client.realname + ")(" + client.ip + ")");
	
	if (client.viewerList != undefined)
	{
		while (client.viewerList.length > 0)
		{
			getClientByUsername(client.viewerList[0]).call("process", null, {processType: "assignViewInfo", viewProcess: "-"});
			client.viewerList.splice(0, 1);
		}
	}
	
	application.sharedData.send("process", {processType: "userLeft", username: client.username, realname: client.realname});
	garbageIdles();
}
/***************************************************************************************************************************************/
function getUserList()
{
	var _users = new Array();
	
	for (i = 0; i < application.clients.length; i++)
	{
		_users.push({username: application.clients[i].username, realname: application.clients[i].realname, deviceType: application.clients[i].deviceType, deviceIsOpen: application.clients[i].deviceIsOpen});
	}
	
	return _users;
}

function garbageIdles()
{
	trace("GARBAGE COLLECTOR");
	application.gc();
	application.gc();
}

function getInstanceName()
{
	var appname = "video_conference";
	var sepIndex = application.name.indexOf("/", 0);
	return application.name.substr(sepIndex + 1, application.name.length - sepIndex);
}

function getClientByUsername(_targetUsername)
{
	for (c = 0; c < application.clients.length; c++)
	{
		if (application.clients[c].username == _targetUsername)
		{
			return application.clients[c];
		}
	}
	
	return undefined;
}