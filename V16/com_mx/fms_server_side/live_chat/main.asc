/***************************************************************************************************************************************\
*	Live Chat																															*
*	Release 1																															*
*	Server Side																															*
*	by Zafer Altun, 2012																												*
\***************************************************************************************************************************************/
/***************************************************************************************************************************************/
application.onAppStart = function ()
{
	application.authID = "7E44D70B-C762-6C79-117DFCB422ACCE18";
	application.pendingClients = new Array();
	application.busyEmpDir = "/busyEmployees";
	
	var f = new File("/");
	if (new File(application.busyEmpDir).exists == false) f.mkdir(application.busyEmpDir);
	f.close();
	
	trace("LIVE CHAT APPLICATION IS STARTED. APPLICATION INSTANCE NAME IS " + getInstanceName());
}

application.onConnect = function (newClient, serverAddress, userID, userInfo, relatedID)
{	
	trace("CONNECTED: " + userID + " (" + userInfo + ")(" + newClient.ip + "), related id: " + relatedID);
	
	newClient.writeAccess = "";
	
	if (getClientByID(userID) != undefined) application.disconnect(getClientByID(userID));
	
	newClient.serverAddress = serverAddress;
	newClient.userID = userID;
	newClient.userInfo = userInfo;
	newClient.relatedID = relatedID;
	newClient.isEmployee = false;
	
	validateClient(newClient);
}

application.onDisconnect = function(client)
{
	trace("DISCONNECTED: " + client.userID + " (" + client.userInfo + ")(" + client.ip + ")");
	
	if (client.isEmployee == false) setUserStatus(client.userID, client.relatedID, true);
	var cl = getClientByID(client.relatedID);
	if (cl != undefined && cl.relatedID == client.userID) 
	{
		if (client.isEmployee == true) setUserStatus(client.relatedID, client.userID, true);
		cl.call("process", null, { processType: "userLeft" } );
		cl.relatedID = undefined;
		if (cl.isEmployee == true && isEmployeeBusy(cl.userID) == false) setEmployeeStatus(cl.userID, true);
	}
	if (client.isEmployee == true && isEmployeeBusy(client.userID) == false) setEmployeeStatus(client.userID, true);
	garbageIdles();
}

application.onAppStop = function ()
{
	var f = new File(application.busyEmpDir);
	if (f.exists) f.remove(true);
}
/***************************************************************************************************************************************/
function validateClient(client)
{
	application.pendingClients.push(client);
	
	var validator = new LoadVars();
	validator.id = client.userID;
	
	validator.onHTTPStatus = function(httpStatus) 
	{			
		if (httpStatus != 200)
		{
			var cl = getClientByID(this.id, application.pendingClients);
			if (cl != undefined) application.rejectConnection(cl, { error: "validationFailed (http error: " + httpStatus + ")" });
			removePendingClientByID(this.id);
		}
	}
	
	validator.onLoad = function(success)
	{		
		if (!success)
		{
			var cl = getClientByID(this.id, application.pendingClients);
			if (cl != undefined) application.rejectConnection(cl, { error: "validationFailed" });
			removePendingClientByID(this.id);
		}
	}
	
	validator.onData = function(valData)
	{		
		var cl = getClientByID(this.id, application.pendingClients);
		
		if (valData != undefined && cl != undefined)
		{
			var fmsAuthID;
			var si = valData.indexOf("[FMS_AUTH_ID=");
			if (si != -1) fmsAuthID = valData.substring(si + 13, valData.indexOf("]", si + 1));
			
			if (fmsAuthID != undefined && fmsAuthID == application.authID)
			{
				cl.isEmployee = true;
				setClient(cl);
			} else {
				cl.isEmployee = false;
				setClient(cl);
			}
		} else if (valData == undefined && cl != undefined) {
			application.rejectConnection(cl, { error: "validationFailed" });
		}
		
		removePendingClientByID(this.id);
	}
	
	validator.fuseaction = "home.emptypopup_fms_auth_id";
	validator.workcube_id = client.userID;
	validator.user_type_id = 0;
	validator.load("http://" + client.serverAddress + "/index.cfm");
}

function setClient(client)
{
	trace("set client");
	
	var cl = getClientByID(client.relatedID);
	
	if (cl != undefined)
	{
		if (cl.relatedID != undefined && cl.relatedID != client.userID)
		{
			application.rejectConnection(client, { error: "matchingFailed" });
		} else {
			application.acceptConnection(client);
			cl.relatedID = client.userID;
			cl.call("process", null, { processType: "userJoin"} );
			if (client.isEmployee == true) 
			{
				setEmployeeStatus(client.userID);
				setUserStatus(cl.userID, cl.relatedID);
			}
		}
	} else {
		application.acceptConnection(client);	
	}
	
	var matchedSupports = (client.isEmployee == false) ? getBusyEmployees(): [];
	client.call("process", null, { processType: "start", isRelatedOnline: (cl != undefined), matchedSupports: matchedSupports } );
	
	client.process = function(pack) 
	{
		trace("PROCESS: " + pack.processType);
		
		switch(pack.processType)
		{
			case "message":
				client.call("process", null, pack);
				if (getClientByID(client.relatedID) != undefined) getClientByID(client.relatedID).call("process", null, pack);
				break;
			case "typo":
				if (getClientByID(client.relatedID) != undefined) getClientByID(client.relatedID).call("process", null, pack);
				break;
			case "setRelation":
				client.relatedID = pack.id;
				client.call("process", null, { processType: "setRelationCompleted" } );
				break;
			case "heartBeat":
				client.call("process", null, pack);
				break;
		}
	}
}

function getBusyEmployees()
{
	var f = new File(application.busyEmpDir);
	var fileList = f.list();
	var busyEmpList = [];
	for (var i = 0; i < fileList.length; i++)
	{
		busyEmpList.push(fileList[i].name.substr(application.busyEmpDir.length + 1));
	}
	
	return busyEmpList;
}

function setEmployeeStatus(_targetID, reset)
{
	var f = new File(application.busyEmpDir + "/" + _targetID);
	if (reset == true)
	{
		if (f.exists) f.remove();
	} else {
		f.open("text", "write");
		f.close();
	}
}

function setUserStatus(_targetID, _relID, reset)
{
	var f = new File(application.busyEmpDir + "/" + _relID);
	if (f.exists)
	{
		f.open("text", (reset == true) ? "read": "append");
		if (reset == true)
		{
			var lines = [];
			while (!f.eof())
			{
				var lineStr = f.readln();
				if (lineStr != _targetID) lines.push(lineStr);
			}
			f.close();
			
			f.open("text", "create");
			for (n = 0; n < lines.length; n++)
			{
				f.writeln(lines[n]);
			}
		} else {
			f.writeln(_targetID);
		}
		f.flush();
		f.close();
	}
}

function isEmployeeBusy(_targetID)
{
	var f = new File(application.busyEmpDir + "/" + _targetID);
	f.open("text", "read");
	
	var hasValidLine = false;
	while (!f.eof())
	{
		var lineStr = f.readln();
		if (lineStr.length)
		{
			hasValidLine = true;
			break;
		}
	}
	
	f.close();
	
	return hasValidLine;
}

function garbageIdles()
{
	trace("GARBAGE COLLECTOR");
	application.gc();
	application.gc();
}

function getInstanceName()
{
	var appname = "live_chat";
	var sepIndex = application.name.indexOf("/", 0);
	return application.name.substr(sepIndex + 1, application.name.length - sepIndex);
}

function getClientByID(_targetID, _targetList)
{
	if (_targetList == undefined) _targetList = application.clients;
	
	for (c = 0; c < _targetList.length; c++)
	{
		if (_targetList[c].userID == _targetID)
		{
			return _targetList[c];
		}
	}
	
	return undefined;
}

function removePendingClientByID(_targetID)
{
	for (c = 0; c < application.pendingClients.length; c++)
	{
		if (application.pendingClients[c].userID == _targetID)
		{
			application.pendingClients.splice(c, 1);
			break;
		}
	}
}