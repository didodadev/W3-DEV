/***************************************************************************************************************************************\
*	White Board																															*
*	Release 2.2																															*
*	Server side																															*
*	by Zafer Altun																														*
\***************************************************************************************************************************************/
/***************************************************************************************************************************************/
application.onAppStart = function ()
{
	application.authID = "7E44D70B-C762-6C79-117DFCB422ACCE18";
	application.allowDebug = true;
	application.sharedData = SharedObject.get("sharedData");
	application.pendingClients = new Array();
	application.streams = new Array();
	application.boards = {selectedBoard: 0, boardInfos: new Array()};
	for (b = 0; b < 100; b++)
	{
		application.boards.boardInfos.push({path: null, pageIndex: 0, drawedObjects: new Array(), videoInfo: {isPlaying: false, playbackTime: 0}});
	}
	
	trace("WHITE BOARD APPLICATION IS STARTED. APPLICATION INSTANCE NAME IS " + getInstanceName());
}

application.onConnect = function (newClient, serverAddress, workcubeID, realname, userType, userTypeID)
{	
	trace("CONNECTED: " + workcubeID + " (" + realname + ")(" + newClient.ip + ")");
	
	newClient.writeAccess = (userType == "owner") ? "/": "";
	
	if (getClientByID(workcubeID) != undefined)
	{
		newClient.workcubeID = "rejected because of already logged in: " + workcubeID;
		newClient.realname = realname;
		application.rejectConnection(newClient, { error: "alreadyLoggedIn" });
		return;
	}
	
	newClient.serverAddress = serverAddress;
	newClient.workcubeID = workcubeID;
	newClient.userTypeID = userTypeID;
	newClient.realname = realname;
	newClient.userType = userType;
	newClient.status = "active";
	newClient.expression = "active";
	newClient.viewerList = new Array();
	
	validateClient(newClient);
}

application.onDisconnect = function(client)
{
	trace("DISCONNECTED: " + client.workcubeID + " (" + client.realname + ")(" + client.ip + ")");
	
	removeFromStreamList(client.workcubeID);
	
	application.sharedData.send("process", {processType: "userLeft", workcubeID: client.workcubeID, realname: client.realname});
	garbageIdles();
	client = undefined;
}
/***************************************************************************************************************************************/
function validateClient(client)
{
	application.pendingClients.push(client);
	
	var validator = new LoadVars();
	validator.id = client.workcubeID;
	
	validator.onHTTPStatus = function(httpStatus) 
	{	
		if (httpStatus != 200)
		{
			var cl = getClientByID(this.id, application.pendingClients);
			if (cl != undefined) application.rejectConnection(cl, { error: "validationFailed (http error: " + httpStatus + ")" });
			removePendingClientByID(this.id);
		}
	}
	
	validator.onLoad = function(success)
	{		
		if (!success)
		{
			var cl = getClientByID(this.id, application.pendingClients);
			if (cl != undefined) application.rejectConnection(cl, { error: "validationFailed" });
			removePendingClientByID(this.id);
		}
	}
	
	validator.onData = function(valData)
	{
		var cl = getClientByID(this.id, application.pendingClients);
				
		if (valData != undefined && cl != undefined)
		{
			var fmsAuthID;
			var si = valData.indexOf("[FMS_AUTH_ID=");
			if (si != -1) fmsAuthID = valData.substring(si + 13, valData.indexOf("]", si + 1));
			
			if (fmsAuthID != undefined && fmsAuthID == application.authID)
			{
				setClient(cl);
			} else {
				application.rejectConnection(cl, { error: "invalidClient" });
			}
		} else if (valData == undefined && cl != undefined) {
			application.rejectConnection(cl, { error: "validationFailed" });
		}
		
		removePendingClientByID(this.id);
	}
	
	validator.fuseaction = "home.emptypopup_fms_auth_id";
	validator.workcube_id = client.workcubeID;
	validator.user_type_id = client.userTypeID;
	validator.load("http://" + client.serverAddress + "/index.cfm");
}

function setClient(client)
{
	application.acceptConnection(client);
	
	client.call("process", null, {processType: "initInfo", users: getUserList(), streams: application.streams, boards: application.boards});
	application.sharedData.send("process", {processType: "userJoin", user: {workcubeID: client.workcubeID, realname: client.realname, userType: client.userType, expression: client.expression, status: client.status}});
	
	client.process = function(pack) 
	{
		trace("PROCESS: " + pack.processType);
		var targetClient;
		switch(pack.processType)
		{
			case "message":
				if (pack.to == null)
				{
					application.sharedData.send("process", pack);
				} else {
					if (getClientByID(pack.to) != undefined)
					{
						pack.isPrivate = true;
						getClientByID(pack.to).call("process", null, pack);
					}
				}
				break;
			case "streamInfo":
				if (pack.status == "publish")
				{
					application.streams.push({workcubeID: pack.workcubeID, realname: pack.realname});
				} else if (pack.status == "unpublish"){
					removeFromStreamList(pack.workcubeID);
				}
			
				application.sharedData.send("process", pack);
				break;
			case "userStatus":
				targetClient = getClientByID(pack.workcubeID);
				if (targetClient != undefined){targetClient.status = pack.status};
				application.sharedData.send("process", pack);
				break;
			case "userExpression":
				targetClient = getClientByID(pack.workcubeID);
				if (targetClient != undefined){targetClient.expression = pack.expression};
				application.sharedData.send("process", pack);
				break;
			case "assignUserRoleAndAuthority":
				targetClient = getClientByID(pack.workcubeID);
				if (targetClient != undefined)
				{
					targetClient.userType = pack.role;
					targetClient.writeAccess = (pack.role == "participant")? "": "/";
				}
				application.sharedData.send("process", pack);
				break;
			case "drawPackage":
				if (pack.action == "selectBoard")
				{
					application.boards.selectedBoard = pack.data.index;
				} else if (pack.action == "fileLoad" || pack.action == "fileClear"){
					application.boards.boardInfos[pack.data.boardIndex].path = pack.data.file;
					application.boards.boardInfos[pack.data.boardIndex].pageIndex = 0;
					application.boards.boardInfos[pack.data.boardIndex].videoInfo = {isPlaying: false, playbackTime: 0};
				} else if (pack.action == "selectPage"){
					application.boards.boardInfos[pack.data.boardIndex].pageIndex = pack.data.pageIndex;
				} else if (pack.action == "draw" || pack.action == "move" || pack.action == "delete"){
					if (pack.action == "delete")
					{
						var _packList = application.boards.boardInfos[pack.boardIndex].drawedObjects;
						
						if (pack.data.id == null)
						{
							_packList.length = 0;
						} else {
							var _newList = new Array();
							
							for (p = 0; p < _packList.length; p++)
							{
								if (_packList[p].data.id != pack.data.id)
								{
									_newList.push(_packList[p]);
								}
							}
							
							application.boards.boardInfos[pack.boardIndex].drawedObjects = _newList;
						}
					} else {
						application.boards.boardInfos[pack.boardIndex].drawedObjects.push(pack);
					}
				}
			
				application.sharedData.send("process", pack);
				break;
			case "videoInfo":
				if (pack.data.type == "status")
				{
					application.boards.boardInfos[pack.boardIndex].videoInfo.isPlaying = pack.data.isPlaying;
				} else if (pack.data.type == "time"){
					application.boards.boardInfos[pack.boardIndex].videoInfo.playbackTime = pack.data.time;
				}
				application.sharedData.send("process", pack);
				break;
		}
	}
}

function getUserList()
{
	var _users = new Array();
	
	for (i = 0; i < application.clients.length; i++)
	{
		if (application.clients[i].temporary != true)
		{
			_users.push({workcubeID: application.clients[i].workcubeID, realname: application.clients[i].realname, userType: application.clients[i].userType, expression: application.clients[i].expression, status: application.clients[i].status});
		}
	}
	
	return _users;
}

function removeFromStreamList(_targetUser)
{
	for (s = 0; s < application.streams.length; s++)
	{
		if (application.streams[s].workcubeID == _targetUser)
		{
			application.streams.splice(s, 1);
			break;
		}
	}
}

function garbageIdles()
{
	trace("GARBAGE COLLECTOR");
	application.gc();
}

function getInstanceName()
{
	var appname = "white_board";
	var sepIndex = application.name.indexOf("/", 0);
	return application.name.substr(sepIndex + 1, application.name.length - sepIndex);
}

function getClientByID(_targetID, _targetList)
{
	if (_targetList == undefined) _targetList = application.clients;
	
	for (c = 0; c < _targetList.length; c++)
	{
		if (_targetList[c].workcubeID == _targetID)
		{
			return _targetList[c];
		}
	}
	
	return undefined;
}

function removePendingClientByID(_targetID)
{
	for (c = 0; c < application.pendingClients.length; c++)
	{
		if (application.pendingClients[c].workcubeID == _targetID)
		{
			application.pendingClients.splice(c, 1);
			break;
		}
	}
}