/***************************************************************************************************************************************\
*	Video Conferans																														*
*	Release 2																															*
*	Server side																															*
*	by Zafer Altun																														*
\***************************************************************************************************************************************/
/***************************************************************************************************************************************/
application.onAppStart = function ()
{
	application.authID = "7E44D70B-C762-6C79-117DFCB422ACCE18";
	application.sharedData = SharedObject.get("sharedData", false);
	application.pendingClients = new Array();
	
	trace("CONFERENCE APPLICATION IS STARTED. APPLICATION INSTANCE NAME IS " + getInstanceName());
}

application.onConnect = function (newClient, serverAddress, workcubeID, userTypeID, realname, deviceType)
{	
	trace("CONNECTED: " + workcubeID + " (" + realname + ")(" + newClient.ip + ")");
	
	newClient.writeAccess = "";
	
	if (getClientByID(workcubeID) != undefined)
	{
		newClient.workcubeID = "rejected because of already logged in: " + workcubeID;
		newClient.realname = realname;
		application.rejectConnection(newClient, { error: "alreadyLoggedIn" });
		return;
	}
	
	newClient.serverAddress = serverAddress;
	newClient.workcubeID = workcubeID;
	newClient.userTypeID = userTypeID;
	newClient.realname = realname;
	newClient.deviceType = deviceType;
	newClient.deviceIsOpen = false;
	newClient.viewerList = new Array();
	
	validateClient(newClient);
}

application.onDisconnect = function(client)
{
	trace("DISCONNECTED: " + client.workcubeID + " (" + client.realname + ")(" + client.ip + ")");
	
	if (client.viewerList != undefined)
	{
		while (client.viewerList.length > 0)
		{
			var tClient = getClientByID(client.viewerList[0]);
			if (tClient != undefined) tClient.call("process", null, {processType: "assignViewInfo", viewProcess: "-"});
			client.viewerList.splice(0, 1);
		}
	}
	
	application.sharedData.send("process", {processType: "userLeft", workcubeID: client.workcubeID, realname: client.realname});
	garbageIdles();
}
/***************************************************************************************************************************************/
function validateClient(client)
{
	application.pendingClients.push(client);
	
	var validator = new LoadVars();
	validator.id = client.workcubeID;
	
	validator.onHTTPStatus = function(httpStatus) 
	{	
		if (httpStatus != 200)
		{
			var cl = getClientByID(this.id, application.pendingClients);
			if (cl != undefined) application.rejectConnection(cl, { error: "validationFailed (http error: " + httpStatus + ")" });
			removePendingClientByID(this.id);
		}
	}
	
	validator.onLoad = function(success)
	{		
		if (!success)
		{
			var cl = getClientByID(this.id, application.pendingClients);
			if (cl != undefined) application.rejectConnection(cl, { error: "validationFailed" });
			removePendingClientByID(this.id);
		}
	}
	
	validator.onData = function(valData)
	{
		var cl = getClientByID(this.id, application.pendingClients);
				
		if (valData != undefined && cl != undefined)
		{
			var fmsAuthID;
			var si = valData.indexOf("[FMS_AUTH_ID=");
			if (si != -1) fmsAuthID = valData.substring(si + 13, valData.indexOf("]", si + 1));
			
			if (fmsAuthID != undefined && fmsAuthID == application.authID)
			{
				setClient(cl);
			} else {
				application.rejectConnection(cl, { error: "invalidClient" });
			}
		} else if (valData == undefined && cl != undefined) {
			application.rejectConnection(cl, { error: "validationFailed" });
		}
		
		removePendingClientByID(this.id);
	}
	
	validator.fuseaction = "home.emptypopup_fms_auth_id";
	validator.workcube_id = client.workcubeID;
	validator.user_type_id = client.userTypeID;
	validator.load("http://" + client.serverAddress + "/index.cfm");
}

function setClient(client)
{
	application.acceptConnection(client);
	
	client.writeAccess = "/";
	client.call("process", null, {processType: "userList", users: getUserList()});
	
	application.sharedData.send("process", {processType: "userJoin", user: {workcubeID: client.workcubeID, realname: client.realname, deviceType: client.deviceType, deviceIsOpen: client.deviceIsOpen}});
	
	client.process = function(pack) 
	{
		trace("PROCESS: " + pack.processType);
		
		switch(pack.processType)
		{
			case "message":
				if (pack.to == null)
				{
					application.sharedData.send("process", pack);
				} else {
					if (getClientByID(pack.to) != undefined)
					{
						pack.isPrivate = true;
						getClientByID(pack.to).call("process", null, pack);
					}
				}
				break;
			case "readyInfo":
				client.deviceIsOpen = true;
				application.sharedData.send("process", pack);
				break;
			case "assignViewInfo":
				if (getClientByID(pack.workcubeID) != undefined)
				{
					if (pack.viewProcess == "+")
					{
						if (client.workcubeID != pack.workcubeID)
						{
							client.viewerList.push(pack.workcubeID);
						}
					} else {
						for (v = 0; v < client.viewerList.length; v++)
						{
							if (client.viewerList[v] == pack.workcubeID)
							{
								client.viewerList.splice(v, 1);
								break;
							}
						}
					}
					
					getClientByID(pack.workcubeID).call("process", null, pack);
					break;
				}
				break;
			case "unpublishInfo":
				client.deviceIsOpen = false;
				application.sharedData.send("process", pack);
				break;
			case "fileRequest":
				if (pack.to != null && getClientByID(pack.to) != undefined)
				{
					getClientByID(pack.to).call("process", null, pack);
				}
				break;
			case "respondFileRequest":
				if (pack.from != null && getClientByID(pack.from) != undefined)
				{
					getClientByID(pack.from).call("process", null, pack);
				}
				break;
			case "fileStream":
				if (pack.to != null && getClientByID(pack.to) != undefined)
				{
					getClientByID(pack.to).call("process", null, pack);
				}
				break;
		}
	}
}

function getUserList()
{
	var _users = new Array();
	
	for (i = 0; i < application.clients.length; i++)
	{
		_users.push({workcubeID: application.clients[i].workcubeID, realname: application.clients[i].realname, deviceType: application.clients[i].deviceType, deviceIsOpen: application.clients[i].deviceIsOpen});
	}
	
	return _users;
}

function garbageIdles()
{
	trace("GARBAGE COLLECTOR");
	application.gc();
	application.gc();
}

function getInstanceName()
{
	var appname = "video_conference";
	var sepIndex = application.name.indexOf("/", 0);
	return application.name.substr(sepIndex + 1, application.name.length - sepIndex);
}

function getClientByID(_targetID, _targetList)
{
	if (_targetList == undefined) _targetList = application.clients;
	
	for (c = 0; c < _targetList.length; c++)
	{
		if (_targetList[c].workcubeID == _targetID)
		{
			return _targetList[c];
		}
	}
	
	return undefined;
}

function removePendingClientByID(_targetID)
{
	for (c = 0; c < application.pendingClients.length; c++)
	{
		if (application.pendingClients[c].workcubeID == _targetID)
		{
			application.pendingClients.splice(c, 1);
			break;
		}
	}
}