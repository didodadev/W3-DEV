/***************************************************************************************************************************************\
*	Internet TV																															*
*	Release 2																															*
*	Server side																															*
*	by Zafer Altun																														*
\***************************************************************************************************************************************/
/***************************************************************************************************************************************/
application.onAppStart = function ()
{
	application.authID = "7E44D70B-C762-6C79-117DFCB422ACCE18";
	application.admin_client = undefined;
	application.generalInfo = {broadcastIsOn: false, broadcastType: null, liveRequestIsOn: false, postIsOn: false, liveStreams: new Array(), kj: {bgClip: null, screenInformations: null}, broadcastInfo: null, nextBroadcastInfo: null};
	application.bandStream = undefined;
	application.bandStreamMetadata = undefined;
	application.sharedData = SharedObject.get("sharedData", false);
	application.logFileNumber = 0;
	application.logFileSelected = false;
	
	checkLogFile();	
	writeToLogFile("TV APPLICATION IS STARTED. APPLICATION INSTANCE NAME IS " + getInstanceName());
}

application.onAppStop = function (info)
{
	writeToLogFile("LOG FILE CLOSED");
	writeToLogFile("|-----------------------------------------------------------------------------|");
	writeToLogFile("|------------------------------- END OF SEASON -------------------------------|");
	writeToLogFile("|-----------------------------------------------------------------------------|\n");
	application.logFile.close();
}


application.onConnect = function (newClient, clientName, clientType, authID, serverAddress, channelID)
{
	var _usernameCreatedAsRandom;
	
	function generateRandomName()
	{
		var _tName = "user_";
		
		for (i = 0; i < 16; i++)
		{
			_tName += Math.round(Math.random() * 9);
		}
		
		_usernameCreatedAsRandom = true;
		return _tName;
	}
	
	if (clientName == undefined){clientName = generateRandomName()};
	if (clientName != "admin")
	{
		while (clientName != undefined && getClientByUsername(clientName) != null)	// If name is given to another client already, get another random name until it is not given to a client
		{
			writeToLogFile("Creating new client name for " + clientName + " because of already exists..");
			clientName = generateRandomName();
			writeToLogFile("New client name is " + clientName);
		}
	}
	if (clientType == "[.]MOBILE[.]")
	{
		newClient.clientType = clientType;
		clientName = "[M] " + clientName;
	}
	
	newClient.name = clientName;
	newClient.writeAccess = "";
	newClient.serverAddress = serverAddress;
	newClient.channelID = channelID;
	application.acceptConnection(newClient);
	
	writeToLogFile("CONNECTED: " + newClient.name + " (" + newClient.ip + ")");
	
	if (newClient.name == "admin")
	{		
		if (application.admin_client == undefined && authID == application.authID)
		{
			application.admin_client = newClient;
			newClient.writeAccess = "/";
			sendClientsInfo("list", undefined);
		} else if (application.admin_client != undefined && authID == application.authID){
			newClient.name = "admin (admin is already logged in)";
			newClient.call("process", null, {processType: "message", messageType: "error", errorNumber: "0", message: "Giriş engellendi !\n\nAdmin zaten oturum açmış durumda, lütfen daha sonra tekrar deneyin.."});
			return;
		} else if (authID != application.authID){
			newClient.name = "admin (forbidden)";
			newClient.call("process", null, {processType: "message", messageType: "error", errorNumber: "0", message: "Giriş engellendi !\n\nAdmin girişi yapmaya yetkiniz yok !"});
			return;
		}
	} else {
		var _pack = application.generalInfo;
		_pack.processType = "initInfo";
		_pack.connectionTime = new Date().getTime();
		_pack.streamMetadata = application.bandStreamMetadata;
		
		_pack.username = newClient.name;		// Send user to its name if name is created as random
		newClient.call("process", null, _pack);
		sendClientsInfo("new", newClient);
	}
	
	newClient.process = function(pack) 
	{
		writeToLogFile("PROCESS REQUEST: " + pack.processType + ((pack.processType == "directCommand")? " >> " + pack.command: ""));
		
		switch(pack.processType)
		{
			case "streamInfo":
				sendStreamInfo(pack.streams);
				break;
			case "directCommand":
				applyDirectCommand(pack, newClient);
				break;
			case "controlBand":
				controlBandStream(pack);
				break;
			case "controlLive":
				controlLiveStream(pack);
				break;
			case "userCommonForm":
				writeToLogFile("POST FROM USER: " + pack.sender + " -> " + pack.formType);
				if (application.admin_client != undefined && application.generalInfo.broadcastIsOn == true)
				{
					application.admin_client.call("process", null, pack);
					newClient.call("process", null, {processType: pack.processType, formType: pack.formType, status: "ok"});
				} else {
					newClient.call("process", null, {processType: pack.processType, formType: pack.formType, status: "fail"});
				}
				break;
			case "liveRequest":
				if (application.admin_client != undefined && application.generalInfo.broadcastIsOn == true)
				{
					if (application.admin_client != newClient)
					{
						writeToLogFile("LIVE REQUEST FROM USER: " + pack.sender + " -> " + pack.command);
						application.admin_client.call("process", null, pack);
					} else {
						writeToLogFile("REPLY USER LIVE REQUEST: " + pack.sender + " -> " + pack.status);
						getClientByUsername(pack.sender).call("process", null, pack);
						getClientByUsername(pack.sender).writeAccess = (pack.status == "confirm" || pack.status == "publish" || pack.status == "unpublish")? "/": "";
					}
				}
				break;
		}
	}
}

application.onDisconnect = function(client)
{
	writeToLogFile("DISCONNECTED: " + client.name + " (" + client.ip + ")");
	
	if (client.name == "admin")
	{
		application.admin_client = undefined;
		closeAllBroadcast();
		setChannelStatus(client.serverAddress, client.channelID, 0);
	} else {
		if (application.admin_client != undefined){application.admin_client.call("process", null, {processType: "userDisconnected", username: client.name})};
		sendClientsInfo("remove", client);
	}
	
	garbageIdles();
}
/***************************************************************************************************************************************/
function sendStreamInfo(_streams)
{
	var _data = new Array();
	
	for (s = 0; s < _streams.length; s++)
	{
		var _dur = Stream.length(_streams[s]);
		var _size = Stream.size(_streams[s]);
		_data.push({duration: _dur, size: _size});
	}
	
	if (application.admin_client != undefined){application.admin_client.call("process", null, {processType: "streamInfo", data: _data})};
}

function applyDirectCommand(_pack, client)
{
	switch (_pack.command)
	{
		case "openBroadcast":
			application.generalInfo.broadcastIsOn = true;
			setChannelStatus(client.serverAddress, client.channelID, Number(application.generalInfo.broadcastIsOn));
			break;
		case "closeBroadcast":
			application.generalInfo.broadcastIsOn = false;
			setChannelStatus(client.serverAddress, client.channelID, Number(application.generalInfo.broadcastIsOn));
			break;
		case "assignLiveRequestPermission":
			application.generalInfo.liveRequestIsOn = _pack.permissionIsOn;
			break;
		case "assignPostPermission":
			application.generalInfo.postIsOn = _pack.permissionIsOn;
			break;
		case "assignKJ":
			// Assign start time for general scrolling text of kj
			if (_pack.info != null)
			{
				if (_pack.info[0].status == "publish"){_pack.info[0].startTime = new Date().getTime()};
			}
			
			application.generalInfo.kj.screenInformations = _pack.info;
			break;
		case "assignBackgroundClip":
			application.generalInfo.kj.bgClip = _pack.info;
			break;
		case "assignNextBroadcastInfo":
			application.generalInfo.nextBroadcastInfo = _pack.info;
			break;
		case "assignBroadcastInfo":
			application.generalInfo.broadcastInfo = _pack.info;
			break;
	}
	
	if (_pack.command == "openBroadcast")
	{
		var __pack = application.generalInfo;
		__pack.processType = _pack.processType;
		__pack.command = _pack.command;
		_pack = __pack;
	} else if (_pack.command == "assignKJ" || _pack.command == "assignBackgroundClip"){
		application.admin_client.call("process", null, _pack);
	}
	
	application.sharedData.send("process", _pack);
	shareWithMobiles(_pack);
}

function sendClientsInfo(_infoType, _client)
{
	if (application.admin_client == undefined){return};
	
	var _clientInfoList = new Array();
	
	if (_infoType == "list")
	{
		for (i = 0; i < application.clients.length; i++)
		{
			_clientInfoList.unshift([application.clients[i].name, application.clients[i].ip]);
		}
	} else if (_infoType == "new" || _infoType == "remove"){
		_clientInfoList.push([_client.name, _client.ip]);
	}
	
	application.admin_client.call("process", null, {processType: "clientsInfo", infoType: _infoType, infoList: _clientInfoList});
}

function controlBandStream(_pack)
{
	if (_pack.command == "play")
	{		
		if (application.bandStream == undefined){application.bandStream = Stream.get("bandStream")};
		
		if (application.bandStream)
		{
			writeToLogFile("BAND STREAM is publising: " + _pack.file);
			application.bandStream.onMetaData = function(_metaInfo)
			{
				if (application.admin_client != undefined)
				{
					application.bandStreamMetadata = _metaInfo;
					application.admin_client.call("process", null, {processType: "streamMetadata", info: _metaInfo});
					application.sharedData.send("process", {processType: "streamMetadata", info: _metaInfo});
				}
			}
			application.bandStream.play(false);
			application.bandStream.onStatus = handlerBandStreamStatus;
			application.bandStream.play(_pack.file, _pack.seekTime);
			application.generalInfo.broadcastType = _pack.broadcastType = "band";
			application.sharedData.send("process", _pack);
			shareWithMobiles(_pack);
		} else {
			writeToLogFile("ERROR | BAND STREAM: Stream.get(...)");
		}
	} else if (_pack.command == "pause" || _pack.command == "stop"){
		if (application.bandStream)
		{
			application.bandStream.play(false);
			delete application.bandStream;
			application.bandStream = undefined;
			application.bandStreamMetadata = undefined;
			application.generalInfo.broadcastType = _pack.broadcastType = "band";
			application.sharedData.send("process", _pack);
			shareWithMobiles(_pack);
		}
	}
}

function controlLiveStream(_pack)
{
	application.generalInfo.broadcastType = _pack.broadcastType = "live";
	
	if (_pack.command == "play")
	{
		if (_pack.screenIndex > application.generalInfo.liveStreams.length - 1)
		{
			application.generalInfo.liveStreams.push(_pack.screenInfo);
		} else {
			application.generalInfo.liveStreams[_pack.screenIndex] = _pack.screenInfo; 
		}
		_pack.liveStreams = application.generalInfo.liveStreams;
		
		application.sharedData.send("process", _pack);
		shareWithMobiles(_pack);
	} else {
		if (_pack.deviceType == null)
		{
			application.generalInfo.liveStreams.splice(_pack.screenIndex, 1);
		} else if (_pack.deviceType == "cam"){
			application.generalInfo.liveStreams[_pack.screenIndex].camStreamName = null;
		} else if (_pack.deviceType == "mic"){
			application.generalInfo.liveStreams[_pack.screenIndex].micStreamName = null;
		}
		_pack.liveStreams = application.generalInfo.liveStreams;
		application.sharedData.send("process", _pack);
		shareWithMobiles(_pack);
	}
}

function closeAllBroadcast()
{
	controlBandStream({processType: "controlBand", command: "stop"});
	application.sharedData.send("process", {processType: "directCommand", command: "closeBroadcast"});
	shareWithMobiles({processType: "directCommand", command: "closeBroadcast"});

	application.bandStream = undefined;
	application.bandStreamMetadata = undefined;
	application.generalInfo = {broadcastIsOn: false, broadcastType: null, liveRequestIsOn: false, postIsOn: false, liveStreams: new Array(), kj: {bgClip: null, screenInformations: null}, broadcastInfo: null, nextBroadcastInfo: null};
}

function shareWithMobiles(_pack)
{
	for (i = 0; i < application.clients.length; i++)
	{	
		if (String(application.clients[i].clientType) == "[.]MOBILE[.]")
		{
			application.clients[i].call("process", null, _pack);
		}
	}
}

function handlerBandStreamStatus(info)
{
	writeToLogFile("BAND STREAM STATUS: " + info.code);
}

function setChannelStatus(serverAddress, channelID, channelStatus)
{
	var req = new LoadVars();
	
	req.onHTTPStatus = function(httpStatus) 
	{			
		if (httpStatus != 200) trace("set channel status http status: " + httpStatus);
	}
	
	req.onLoad = function(success)
	{		
		if (!success) trace("set channel status success status: " + success);
	}
	
	req.onData = function(valData)
	{		
		if (valData == undefined || valData != undefined && valData != "true") trace("set channel status error: " + valData.substr(0, 2048));
	}
	
	req.fms_auth_id = application.authID;
	req.channel_type = 1;
	req.channel_id = channelID;
	req.status = channelStatus;
	req.fuseaction = "home.emptypopup_tvradio_channel_status";
	req.load("http://" + serverAddress + "/index.cfm");
}
/***************************************************************************************************************************************/
function getTimeInfo()
{
	var d = new Date();
	
	var _h = d.getHours();
	if (_h.toString().length == 1){_h = "0" + _h};
	
	var _m = d.getMinutes();
	if (_m.toString().length == 1){_m = "0" + _m};
	
	var _s = d.getSeconds();
	if (_s.toString().length == 1){_s = "0" + _s};
	
	var _day = d.getDate();
	if (_day.toString().length == 1){_day = "0" + _day};
	
	var _month = Math.round(d.getMonth() + 1);
	if (_month.toString().length == 1){_month = "0" + _month};
	
	var time = _h + ":" + _m + ":" + _s + " | " + _day + "." + _month + "." + d.getFullYear() + " ::: ";
	return time;
}

function garbageIdles()
{
	writeToLogFile("GARBAGE COLLECTOR");
	application.gc();
}

function getClientByUsername(__name)
{
	for (i = 0; i < application.clients.length; i++)
	{	
		if (String(application.clients[i].name) == String(__name))
		{
			return application.clients[i];	// return i
		}
	}
	
	return null;
}

function checkLogFile()
{
	var _maxLen = 1024 * 1024;	// 1 MB
	
	if (application.logFile == undefined){application.logFile = new File("log_" + getInstanceName() + "_" + application.logFileNumber + ".txt")};
	
	if (application.logFile.length >= _maxLen)
	{
		application.logFileSelected = false;
		
		while (application.logFileSelected == false)
		{
			application.logFile = new File("log_" + getInstanceName() + "_" + application.logFileNumber + ".txt");
			trace("log_" + getInstanceName() + "_" + application.logFileNumber + " length is " + application.logFile.length);
			if (application.logFile.length >= _maxLen)
			{
				application.logFileNumber++;
			} else {
				application.logFileSelected = true;
				
				if (application.logFile.exists){
					application.logFile.open("text", "append");
					writeToLogFile("LOG FILE OPENED");
			    } else {
					application.logFile.open("text", "append");
					writeToLogFile("LOG FILE CREATED");
				}
			}
		}
	} else {
		if (application.logFile.isOpen == false)
		{
			if (application.logFile.exists){
				application.logFile.open("text", "append");
				writeToLogFile("LOG FILE OPENED");
			} else {
				application.logFile.open("text", "append");
				writeToLogFile("LOG FILE CREATED");
			}
		}
	}
}

function writeToLogFile(_message)
{
	checkLogFile();
	application.logFile.write(getTimeInfo() + _message + "\n");
	application.logFile.flush();
	trace(getTimeInfo() + _message);
}

function getInstanceName()
{
	var appname = "internettv";
	var sepIndex = application.name.indexOf("/", 0);
	return application.name.substr(sepIndex + 1, application.name.length - sepIndex);
}